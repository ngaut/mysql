# This is based on main.checksum_io_cache, and is simply designed
# to cause a large enough IO_CACHE to be generated.

--disable_query_log
call mtr.add_suppression("try to repair it");
--enable_query_log

--disable_warnings
DROP TABLE IF EXISTS t1;
--enable_warnings

CREATE TABLE t1 (
  id INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
  gender CHAR(1),
  name VARCHAR(20)
);

--disable_query_log
INSERT INTO t1 (gender, name) VALUES (NULL, NULL);
INSERT INTO t1 (gender, name) VALUES (NULL, NULL);
INSERT INTO t1 (gender, name) VALUES (NULL, NULL);

# Four copies is sufficient to generate a large enough IO_CACHE.
# Best to keep this near the lower limit, because the test can take an
# extremely long time if the size limiting is not functioning and the table is
# much larger (even with i = 5 it takes a while).
let $i = 3;
while ($i)
{
  INSERT INTO t1 (gender, name) VALUES ('F', 'Helen'), ('F', 'Anastasia'),
  ('F', 'Katherine'), ('F', 'Margo'), ('F', 'Magdalene'), ('F', 'Mary');

  INSERT INTO t1 (gender, name) VALUES ('F', 'Eva'), ('F', 'Sofia'),
  ('F', 'Sara'), ('F', 'Golda'), ('F', 'Toba'), ('F', 'Victory'),
  ('F', 'Faina'), ('F', 'Miriam'), ('F', 'Beki'), ('F', 'America'),
  ('F', 'Susan'), ('F', 'Glory'), ('F', 'Priscilla'), ('F', 'Rosmary'),
  ('F', 'Rose'), ('F', 'Margareth'), ('F', 'Elizabeth'), ('F', 'Meredith'),
  ('F', 'Julie'), ('F', 'Xenia'), ('F', 'Zena'), ('F', 'Olga'),
  ('F', 'Brunhilda'), ('F', 'Nataly'), ('F', 'Lara'), ('F', 'Svetlana'),
  ('F', 'Grethem'), ('F', 'Irene');
  dec $i;
}
--enable_query_log

# EE_OVER_IO_CACHE_LIMIT, see include/mysys_err.h
--error 34
SELECT
  SUM(DISTINCT LENGTH(g1.name)) s1,
  SUM(DISTINCT SUBSTRING(g2.name, 1, 3)) s2,
  SUM(DISTINCT LENGTH(SUBSTRING(g3.name, 1, 4))) s3
FROM t1 g1, t1 g2, t1 g3 GROUP BY LENGTH(SUBSTRING(g3.name, 5, 10));

DROP TABLE t1;
