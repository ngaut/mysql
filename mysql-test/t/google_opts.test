# Test google-specific options settings

# These options have to be set inside the test case since the test framework
# makes use of some of the features they disable.

--let $allow_stored_procedures_saved= query_get_value(show variables like 'allow_stored_procedures', Value, 1)
--let $allow_subqueries_saved= query_get_value(show variables like 'allow_subqueries', Value, 1)
--let $allow_triggers_saved= query_get_value(show variables like 'allow_triggers', Value, 1)
--let $allow_views_saved= query_get_value(show variables like 'allow_views', Value, 1)
--let $allow_xa_saved= query_get_value(show variables like 'allow_xa', Value, 1)

set global allow_stored_procedures= 0;
set global allow_subqueries= 0;
set global allow_triggers= 0;
set global allow_views= 0;
set global allow_xa= 0;

show variables like 'allow_stored_procedures';
show variables like 'allow_subqueries';
show variables like 'allow_triggers';
show variables like 'allow_views';
show variables like 'allow_xa';

create table foo (v varchar(4));
insert into foo values ("abc"), ("def"), ("ghi");

# Confirm that stored procedures cannot be used.
delimiter //;
--error ER_OPTION_PREVENTS_STATEMENT
create procedure my_proc (out param1 int)
begin
  select count(*) into param1 from foo;
end//
delimiter ;//

--error ER_OPTION_PREVENTS_STATEMENT
create function hello (s char(20))
returns char(50) deterministic
return concat('Hello, ', s, '!');

# Confirm that subqueries cannot be used.
--error ER_OPTION_PREVENTS_STATEMENT
select count(*) from (select 1) a;

--error ER_OPTION_PREVENTS_STATEMENT
select * from foo where v not in (select v from foo);

# Confirm that triggers cannot be used.
--error ER_OPTION_PREVENTS_STATEMENT
create trigger bar before insert on foo
for each row set @num_inserted = @num_inserted + 1;

# Confirm that views cannot be used.
--error ER_OPTION_PREVENTS_STATEMENT
create view vw as select v from foo where length(v) > 0;

# Confirm that xa cannot be used.
--error ER_OPTION_PREVENTS_STATEMENT
xa start 'foobar';

# Confirm user with SUPER can set timestamp.
set timestamp = 1293840000;
set timestamp = default;

# Confirm user without SUPER cannot set timestamp.
create user mysqltest_1@localhost;
connect (con1,localhost,mysqltest_1,,);
--error ER_SPECIFIC_ACCESS_DENIED_ERROR
set timestamp = 1293840000;

# Clean up.
connection default;
disconnect con1;
drop user mysqltest_1@localhost;

--replace_result $allow_stored_procedures_saved allow_stored_procedures_saved
eval set global allow_stored_procedures= $allow_stored_procedures_saved;
--replace_result $allow_subqueries_saved allow_subqueries_saved
eval set global allow_subqueries= $allow_subqueries_saved;
--replace_result $allow_triggers_saved allow_triggers_saved
eval set global allow_triggers= $allow_triggers_saved;
--replace_result $allow_views_saved allow_views_saved
eval set global allow_views= $allow_views_saved;
--replace_result $allow_xa_saved allow_xa_saved
eval set global allow_xa= $allow_xa_saved;

drop table foo;
