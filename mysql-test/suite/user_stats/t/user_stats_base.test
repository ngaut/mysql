# Uses GRANT commands that usually disabled in embedded server
-- source include/not_embedded.inc
-- source include/have_innodb.inc

update mysql.db set User = 'hide' where User = '';
create table mysql.user_bak like mysql.user;
insert into mysql.user_bak select * from mysql.user where length(User) = 0;
delete from mysql.user where length(User) = 0;
flush privileges;

--enable_warnings

create table t2 (a int not null primary key, b int not null) engine=innodb;
create table t3 (a int not null primary key, b int not null, index bx(b)) engine=myisam;

# Test flush user_statistics, show user_statistics

echo "";
echo Test user statistics;
echo "";

flush user_statistics;

let $val=query_get_value(show user_statistics, Empty_queries, 1);
echo Empty_queries should be 0 and is $val;

let $val=query_get_value(show user_statistics, Rows_fetched, 1);
echo Rows_fetched should be 1 and is $val;

let $val=query_get_value(show user_statistics, Update_commands, 1);
echo Update_commands should be 0 and is $val;

let $val=query_get_value(show user_statistics, Select_commands, 1);
echo Select_commands should be 0 and is $val;

let $val=query_get_value(show user_statistics, Other_commands, 1);
echo Other_commands should be 5 and is $val;

let $val=query_get_value(show user_statistics, Table_rows_read, 1);
echo Table_rows_read should be 0 and is $val;

select User, Empty_queries, Rows_fetched, Update_commands, Select_commands, Other_commands, Table_rows_read
from INFORMATION_SCHEMA.USER_STATISTICS;

# Test create table

echo "";
echo Test create table;
echo "";

flush user_statistics;
create table t1 (a int not null primary key, b int not null) engine=innodb;

let $val=query_get_value(show user_statistics, Update_commands, 1);
echo Update_commands should be 1 and is $val;

let $val=query_get_value(show user_statistics, Select_commands, 1);
echo Select_commands should be 0 and is $val;

let $val=query_get_value(show user_statistics, Other_commands, 1);
echo Other_commands should be 3 and is $val;

select User, Update_commands, Select_commands, Other_commands
from INFORMATION_SCHEMA.USER_STATISTICS;

# Test insert

echo "";
echo Test insert;
echo "";

flush user_statistics;

insert into t1 values (1,1), (2,2);

let $val=query_get_value(show user_statistics, Update_commands, 1);
echo Update_commands should be 1 and is $val;

let $val=query_get_value(show user_statistics, Select_commands, 1);
echo Select_commands should be 0 and is $val;

let $val=query_get_value(show user_statistics, Other_commands, 1);
echo Other_commands should be 3 and is $val;

let $val=query_get_value(show user_statistics, Rows_updated, 1);
echo Rows_updated should be 2 and is $val;

let $val=query_get_value(show user_statistics, Rows_fetched, 1);
echo Rows_fetched should be 4 and is $val;

let $val=query_get_value(show user_statistics, Table_rows_read, 1);
echo Table_rows_read should be 0 and is $val;

select User, Update_commands, Select_commands, Other_commands, Rows_updated, Rows_fetched, Table_rows_read
from INFORMATION_SCHEMA.USER_STATISTICS;

# Test insert select

echo "";
echo Test insert select;
echo "";

flush user_statistics;

insert into t2 select * from t1;

let $val=query_get_value(show user_statistics, Update_commands, 1);
echo Update_commands should be 1 and is $val;

let $val=query_get_value(show user_statistics, Select_commands, 1);
echo Select_commands should be 0 and is $val;

let $val=query_get_value(show user_statistics, Rows_updated, 1);
echo Rows_updated should be 2 and is $val;

let $val=query_get_value(show user_statistics, Rows_fetched, 1);
echo Rows_fetched should be 3 and is $val;

let $val=query_get_value(show user_statistics, Table_rows_read, 1);
echo Table_rows_read should be 2 and is $val;

select User, Update_commands, Select_commands, Rows_updated, Rows_fetched, Table_rows_read
from INFORMATION_SCHEMA.USER_STATISTICS;

# Test update with PK scans

echo "";
echo Test update with PK scans;
echo "";

insert into t1 values (0,0);
select count(*) from t1;

flush user_statistics;

update t1 set a = 3 where a = 1;

let $val=query_get_value(show user_statistics, Table_rows_read, 1);
echo Table_rows_read should be 1 and is $val;

update t1 set a = 4 where b = 2;

let $val=query_get_value(show user_statistics, Update_commands, 1);
echo Update_commands should be 2 and is $val;

let $val=query_get_value(show user_statistics, Select_commands, 1);
echo Select_commands should be 0 and is $val;

let $val=query_get_value(show user_statistics, Rows_updated, 1);
echo Rows_updated should be 2 and is $val;

let $val=query_get_value(show user_statistics, Rows_fetched, 1);
echo Rows_fetched should be 4 and is $val;

let $val=query_get_value(show user_statistics, Table_rows_read, 1);
echo Table_rows_read should be 5 and is $val;

select User, Update_commands, Select_commands, Rows_updated, Rows_fetched, Table_rows_read
from INFORMATION_SCHEMA.USER_STATISTICS;

# Test update with secondary index scans and MyISAM

echo "";
echo Test update with secondary index scans and MyISAM;
echo "";

insert into t3 values (0,0);
insert into t3 values (1,1);
insert into t3 values (2,2);

flush user_statistics;

update t3 set a = 4 where b = 1;

let $val=query_get_value(show user_statistics, Update_commands, 1);
echo Update_commands should be 1 and is $val;

let $val=query_get_value(show user_statistics, Select_commands, 1);
echo Select_commands should be 0 and is $val;

let $val=query_get_value(show user_statistics, Rows_updated, 1);
echo Rows_updated should be 1 and is $val;

let $val=query_get_value(show user_statistics, Rows_fetched, 1);
echo Rows_fetched should be 3 and is $val;

let $val=query_get_value(show user_statistics, Table_rows_read, 1);
echo Table_rows_read should be 1 and is $val;

select User, Update_commands, Select_commands, Rows_updated, Rows_fetched, Table_rows_read
from INFORMATION_SCHEMA.USER_STATISTICS;

# Test delete with PK scans

echo "";
echo Test delete with PK scans;
echo "";

flush user_statistics;

delete from t1 where a = 3;

let $val=query_get_value(show user_statistics, Table_rows_read, 1);
echo Table_rows_read should be 1 and is $val;

select User, Table_rows_read
from INFORMATION_SCHEMA.USER_STATISTICS;

delete from t1 where b = 2;

let $val=query_get_value(show user_statistics, Update_commands, 1);
echo Update_commands should be 2 and is $val;

let $val=query_get_value(show user_statistics, Select_commands, 1);
echo Select_commands should be 1 and is $val;

let $val=query_get_value(show user_statistics, Rows_updated, 1);
echo Rows_updated should be 2 and is $val;

let $val=query_get_value(show user_statistics, Rows_fetched, 1);
echo Rows_fetched should be 5 and is $val;

let $val=query_get_value(show user_statistics, Table_rows_read, 1);
echo Table_rows_read should be 3 and is $val;

select User, Update_commands, Select_commands, Rows_updated, Rows_fetched, Table_rows_read
from INFORMATION_SCHEMA.USER_STATISTICS;

# Test delete with secondary index scans

echo "";
echo Test delete with secondary index scans;
echo "";

flush user_statistics;

delete from t3 where b = 1;

let $val=query_get_value(show user_statistics, Update_commands, 1);
echo Update_commands should be 1 and is $val;

let $val=query_get_value(show user_statistics, Select_commands, 1);
echo Select_commands should be 0 and is $val;

let $val=query_get_value(show user_statistics, Rows_updated, 1);
echo Rows_updated should be 1 and is $val;

let $val=query_get_value(show user_statistics, Rows_fetched, 1);
echo Rows_fetched should be 3 and is $val;

let $val=query_get_value(show user_statistics, Table_rows_read, 1);
echo Table_rows_read should be 1 and is $val;

select User, Update_commands, Select_commands, Rows_updated, Rows_fetched, Table_rows_read
from INFORMATION_SCHEMA.USER_STATISTICS;

# Test select on PK index

echo "";
echo Test select with PK scans;
echo "";

insert into t1 values (1,1), (2,2);

flush user_statistics;

select count(*) from t1 where a = 1;

let $val=query_get_value(show user_statistics, Table_rows_read, 1);
echo Table_rows_read should be 1 and is $val;

select User, Table_rows_read
from INFORMATION_SCHEMA.USER_STATISTICS;

select count(*) from t1 where b < 0;

let $val=query_get_value(show user_statistics, Update_commands, 1);
echo Update_commands should be 0 and is $val;

let $val=query_get_value(show user_statistics, Select_commands, 1);
echo Select_commands should be 3 and is $val;

let $val=query_get_value(show user_statistics, Rows_updated, 1);
echo Rows_updated should be 0 and is $val;

let $val=query_get_value(show user_statistics, Rows_fetched, 1);
echo Rows_fetched should be 7 and is $val;

let $val=query_get_value(show user_statistics, Table_rows_read, 1);
echo Table_rows_read should be 4 and is $val;

select User, Update_commands, Select_commands, Rows_updated, Rows_fetched, Table_rows_read
from INFORMATION_SCHEMA.USER_STATISTICS;

# Test select on secondary index

echo "";
echo Test select with secondary scans;
echo "";

insert into t3 values (1,1);
analyze table t3;
explain select * from t3 where b < 0;

flush user_statistics;

select * from t3 where b = 1;

let $val=query_get_value(show user_statistics, Table_rows_read, 1);
echo Table_rows_read should be 1 and is $val;

select * from t3 where b < 0;

let $val=query_get_value(show user_statistics, Update_commands, 1);
echo Update_commands should be 0 and is $val;

let $val=query_get_value(show user_statistics, Select_commands, 1);
echo Select_commands should be 2 and is $val;

let $val=query_get_value(show user_statistics, Rows_updated, 1);
echo Rows_updated should be 0 and is $val;

let $val=query_get_value(show user_statistics, Rows_fetched, 1);
echo Rows_fetched should be 5 and is $val;

let $val=query_get_value(show user_statistics, Table_rows_read, 1);
echo Table_rows_read should be 2 and is $val;

select User, Update_commands, Select_commands, Rows_updated, Rows_fetched, Table_rows_read
from INFORMATION_SCHEMA.USER_STATISTICS;

#
# Test denied connections
#

echo "";
echo Test denied connections;
echo "";

# user level connection limit to force denied connections.
create user foo@localhost identified by 'bar';
grant select, insert, drop, delete, update on test.t1 to foo@localhost with max_user_connections 2;

flush user_statistics;

connect (foo0, localhost, foo, bar,,);
select current_user();

connection default;

echo total_connections should be 1;
echo concurrent_connections should be 1;
select total_connections, concurrent_connections from information_schema.user_statistics where User = 'foo';

disconnect foo0;

--replace_result $MASTER_MYSOCK MASTER_SOCKET $MASTER_MYPORT MASTER_PORT
--error ER_ACCESS_DENIED_ERROR
connect (foo0, localhost, foo, wrong,,);

# On the failed connection the test case is unblocked and continues executing
# prior to the code in the server which increments the denied connection for
# the user executing, creating a race. Attempt to work around the race by
# introducing a small sleep.
real_sleep 0.5;

connection default;

echo total_connections should be 1;
echo denied_connections should be 1;
select total_connections, denied_connections from information_schema.user_statistics where User = 'foo';

# Test rollback and commit

echo "";
echo Test rollback and commit
echo "";

set autocommit=0;
flush user_statistics;

insert into t1 values (10,10);
commit;

let $val=query_get_value(show user_statistics, Commit_transactions, 1);
echo Commit_transactions should be 1 and is $val;

let $val=query_get_value(show user_statistics, Rollback_transactions, 1);
echo Rollback_transactions should be 0 and is $val;

select User, Commit_transactions, Rollback_transactions
from INFORMATION_SCHEMA.USER_STATISTICS;

insert into t1 values (11,11);
rollback;

let $val=query_get_value(show user_statistics, Commit_transactions, 1);
echo Commit_transactions should be 1 and is $val;

let $val=query_get_value(show user_statistics, Rollback_transactions, 1);
echo Rollback_transactions should be 1 and is $val;

select User, Commit_transactions, Rollback_transactions
from INFORMATION_SCHEMA.USER_STATISTICS;

select * from t1;

# Test empty queries

echo "";
echo Test empty queries
echo "";

flush user_statistics;

select * from t1 where a < -1;
select * from t1 where a < -3;

let $val=query_get_value(show user_statistics, Empty_queries, 1);
echo Empty_queries should be 2 and is $val;

select User, Empty_queries
from INFORMATION_SCHEMA.USER_STATISTICS;

#
# Test lost connections
#

echo "";
echo Test lost connections;
echo "";

set global wait_timeout = 1;
set global interactive_timeout = 1;
flush user_statistics;

# this connection will get timed out and aborted.
connect (abortconn, localhost, root,,,);
--sleep 3

connection default;

let $val=query_get_value(show user_statistics, Lost_connections, 1);
echo Lost_connections should be 1 and is $val;

select User, Lost_connections
from INFORMATION_SCHEMA.USER_STATISTICS;

set global wait_timeout = DEFAULT;
set global interactive_timeout = DEFAULT;

#
# Test non-existent users
#

echo "";
echo Test non-existent users
echo "";

flush user_statistics;

--replace_result $MASTER_MYSOCK MASTER_SOCKET $MASTER_MYPORT MASTER_PORT
--error ER_ACCESS_DENIED_ERROR
connect (userDNE, localhost, userDNE,,,);
real_sleep 0.5;

# userDNE should not exist in the output.
select user from information_schema.user_statistics where user = 'userDNE';

#
# Confirm SHOW USER_STATS is correct for open connection
# when FLUSH USER_STATS is done
#
echo Confirm USER_STATS is correct after open connection and FLUSH USER_STATS;
connection default;
grant select on test.t1 to foo@localhost;

connect (foo_conn, localhost, foo, bar,,);
select * from test.t1 where a=0;
# Run another command to make sure that USER_STATS accounting for the previous
# statement is done before running FLUSH
ping;

connection default;
flush user_statistics;

connection foo_conn;                            # Adds +1 to select_commands
select * from test.t1 where a=0;

let $val=query_get_value(show user_statistics, Concurrent_connections, 1);
echo Concurrent_connections should be 1 and is $val;

let $val=query_get_value(show user_statistics, Select_commands, 1);
echo Select_commands should be 2 and is $val;

select User, Concurrent_connections, Select_commands
from INFORMATION_SCHEMA.USER_STATISTICS;

connection default;
disconnect foo_conn;

# Cleanup
connection default;

drop table t1;
drop table t2;
drop table t3;
drop user foo@localhost;

update mysql.db set User='' where User='hide';
insert into mysql.user select * from mysql.user_bak;
drop table mysql.user_bak;
flush privileges;

