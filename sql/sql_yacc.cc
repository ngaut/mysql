/* A Bison parser, made by GNU Bison 2.5.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2011 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.5"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 268 of yacc.c  */
#line 25 "sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "mysql_priv.h"
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

const LEX_STRING null_lex_str= {0,0};

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

inline bool allow_delayed_write()
{
  if (!opt_allow_delayed_write)
  {
    my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
             "--allow-delayed-write=0");
    return false;
  }
  else
    return true;
}

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  /* Push an error into the error stack */
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  (yytext ? yytext : ""),
                  lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == &sys_autocommit)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable_t *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->dflt)
    it= spv->dflt;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}


static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}


static bool add_create_index (LEX *lex, Key::Keytype type, const char *name, 
  KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}



/* Line 268 of yacc.c  */
#line 698 "sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYZE_SYM = 269,
     AND_AND_SYM = 270,
     AND_SYM = 271,
     ANY_SYM = 272,
     AS = 273,
     ASC = 274,
     ASCII_SYM = 275,
     ASENSITIVE_SYM = 276,
     AT_SYM = 277,
     AUTHORS_SYM = 278,
     AUTOEXTEND_SIZE_SYM = 279,
     AUTO_INC = 280,
     AVG_ROW_LENGTH = 281,
     AVG_SYM = 282,
     BACKUP_SYM = 283,
     BEFORE_SYM = 284,
     BEGIN_SYM = 285,
     BETWEEN_SYM = 286,
     BIGINT = 287,
     BINARY = 288,
     BINLOG_SYM = 289,
     BINLOG_GROUP_ID_SYM = 290,
     BIN_NUM = 291,
     BIT_AND = 292,
     BIT_OR = 293,
     BIT_SYM = 294,
     BIT_XOR = 295,
     BLOB_SYM = 296,
     BLOCK_SYM = 297,
     BOOLEAN_SYM = 298,
     BOOL_SYM = 299,
     BOTH = 300,
     BTREE_SYM = 301,
     BY = 302,
     BYTE_SYM = 303,
     CACHE_SYM = 304,
     CALL_SYM = 305,
     CASCADE = 306,
     CASCADED = 307,
     CASE_SYM = 308,
     CAST_SYM = 309,
     CHAIN_SYM = 310,
     CHANGE = 311,
     CHANGED = 312,
     CHARSET = 313,
     CHAR_SYM = 314,
     CHECKSUM_SYM = 315,
     CHECK_SYM = 316,
     CIPHER_SYM = 317,
     CLIENT_SYM = 318,
     CLOSE_SYM = 319,
     COALESCE = 320,
     CODE_SYM = 321,
     COLLATE_SYM = 322,
     COLLATION_SYM = 323,
     COLUMNS = 324,
     COLUMN_SYM = 325,
     COMMENT_SYM = 326,
     COMMITTED_SYM = 327,
     COMMIT_SYM = 328,
     COMPACT_SYM = 329,
     COMPLETION_SYM = 330,
     COMPRESSED_SYM = 331,
     CONCURRENT = 332,
     CONDITION_SYM = 333,
     CONNECTION_SYM = 334,
     CONNECT_USING_GROUP_ID_SYM = 335,
     CONSISTENT_SYM = 336,
     CONSTRAINT = 337,
     CONTAINS_SYM = 338,
     CONTEXT_SYM = 339,
     CONTINUE_SYM = 340,
     CONTRIBUTORS_SYM = 341,
     CONVERT_SYM = 342,
     COUNT_SYM = 343,
     CPU_SYM = 344,
     CREATE = 345,
     CROSS = 346,
     CUBE_SYM = 347,
     CURDATE = 348,
     CURRENT_USER = 349,
     CURSOR_SYM = 350,
     CURTIME = 351,
     DATABASE = 352,
     DATABASES = 353,
     DATAFILE_SYM = 354,
     DATA_SYM = 355,
     DATETIME = 356,
     DATE_ADD_INTERVAL = 357,
     DATE_SUB_INTERVAL = 358,
     DATE_SYM = 359,
     DAY_HOUR_SYM = 360,
     DAY_MICROSECOND_SYM = 361,
     DAY_MINUTE_SYM = 362,
     DAY_SECOND_SYM = 363,
     DAY_SYM = 364,
     DEALLOCATE_SYM = 365,
     DECIMAL_NUM = 366,
     DECIMAL_SYM = 367,
     DECLARE_SYM = 368,
     DEFAULT = 369,
     DEFINER_SYM = 370,
     DELAYED_SYM = 371,
     DELAY_KEY_WRITE_SYM = 372,
     DELETE_SYM = 373,
     DESC = 374,
     DESCRIBE = 375,
     DES_KEY_FILE = 376,
     DETERMINISTIC_SYM = 377,
     DIRECTORY_SYM = 378,
     DISABLE_SYM = 379,
     DISCARD = 380,
     DISK_SYM = 381,
     DISTINCT = 382,
     DIV_SYM = 383,
     DOUBLE_SYM = 384,
     DO_SYM = 385,
     DROP = 386,
     DUAL_SYM = 387,
     DUMPFILE = 388,
     DUPLICATE_SYM = 389,
     DYNAMIC_SYM = 390,
     EACH_SYM = 391,
     ELSE = 392,
     ELSEIF_SYM = 393,
     ENABLE_SYM = 394,
     ENCLOSED = 395,
     END = 396,
     ENDS_SYM = 397,
     END_OF_INPUT = 398,
     ENGINES_SYM = 399,
     ENGINE_SYM = 400,
     ENUM = 401,
     EQ = 402,
     EQUAL_SYM = 403,
     ERRORS = 404,
     ESCAPED = 405,
     ESCAPE_SYM = 406,
     EVENTS_SYM = 407,
     EVENT_SYM = 408,
     EVERY_SYM = 409,
     EXECUTE_SYM = 410,
     EXISTS = 411,
     EXIT_SYM = 412,
     EXPANSION_SYM = 413,
     EXTENDED_SYM = 414,
     EXTENT_SIZE_SYM = 415,
     EXTRACT_SYM = 416,
     FAILOVER_SYM = 417,
     FALSE_SYM = 418,
     FAST_SYM = 419,
     FAULTS_SYM = 420,
     FETCH_SYM = 421,
     FILE_SYM = 422,
     FIRST_SYM = 423,
     FIXED_SYM = 424,
     FLOAT_NUM = 425,
     FLOAT_SYM = 426,
     FLUSH_SYM = 427,
     FORCE_SYM = 428,
     FOREIGN = 429,
     FOR_SYM = 430,
     FOUND_SYM = 431,
     FRAC_SECOND_SYM = 432,
     FROM = 433,
     FULL = 434,
     FULLTEXT_SYM = 435,
     FUNCTION_SYM = 436,
     GE = 437,
     GEOMETRYCOLLECTION = 438,
     GEOMETRY_SYM = 439,
     GET_FORMAT = 440,
     GLOBAL_SYM = 441,
     GOOGLESTATS_SYM = 442,
     GRANT = 443,
     GRANTS = 444,
     GROUP_SYM = 445,
     GROUP_CONCAT_SYM = 446,
     GT_SYM = 447,
     HANDLER_SYM = 448,
     HASH_SYM = 449,
     HAVING = 450,
     HELP_SYM = 451,
     HEX_NUM = 452,
     HIGH_PRIORITY = 453,
     HOST_SYM = 454,
     HOSTS_SYM = 455,
     HOUR_MICROSECOND_SYM = 456,
     HOUR_MINUTE_SYM = 457,
     HOUR_SECOND_SYM = 458,
     HOUR_SYM = 459,
     IDENT = 460,
     IDENTIFIED_SYM = 461,
     IDENT_QUOTED = 462,
     IDLE_SYM = 463,
     IF = 464,
     IGNORE_SYM = 465,
     IMPORT = 466,
     INDEXES = 467,
     INDEX_SYM = 468,
     INFILE = 469,
     INFO_SYM = 470,
     INITIAL_SIZE_SYM = 471,
     INNER_SYM = 472,
     INNOBASE_SYM = 473,
     INOUT_SYM = 474,
     INSENSITIVE_SYM = 475,
     INSERT = 476,
     INSERT_METHOD = 477,
     INSTALL_SYM = 478,
     INTERVAL_SYM = 479,
     INTO = 480,
     INT_SYM = 481,
     INVOKER_SYM = 482,
     IN_SYM = 483,
     IO_SYM = 484,
     IPC_SYM = 485,
     IS = 486,
     ISOLATION = 487,
     ISSUER_SYM = 488,
     ITERATE_SYM = 489,
     JOIN_SYM = 490,
     KEYS = 491,
     KEY_BLOCK_SIZE = 492,
     KEY_SYM = 493,
     KILL_SYM = 494,
     LANGUAGE_SYM = 495,
     LAST_SYM = 496,
     LE = 497,
     LEADING = 498,
     LEAVES = 499,
     LEAVE_SYM = 500,
     LEFT = 501,
     LESS_SYM = 502,
     LEVEL_SYM = 503,
     LEX_HOSTNAME = 504,
     LIKE = 505,
     LIMIT = 506,
     LINEAR_SYM = 507,
     LINES = 508,
     LINESTRING = 509,
     LIST_SYM = 510,
     LOAD = 511,
     LOCAL_SYM = 512,
     LOCATOR_SYM = 513,
     LOCKS_SYM = 514,
     LOCK_SYM = 515,
     LOGFILE_SYM = 516,
     LOGS_SYM = 517,
     LONGBLOB = 518,
     LONGTEXT = 519,
     LONG_NUM = 520,
     LONG_SYM = 521,
     LOOP_SYM = 522,
     LOW_PRIORITY = 523,
     LT = 524,
     MAPPED = 525,
     MASTER_CONNECT_RETRY_SYM = 526,
     MASTER_HOST_SYM = 527,
     MASTER_LOG_FILE_SYM = 528,
     MASTER_LOG_POS_SYM = 529,
     MASTER_PASSWORD_SYM = 530,
     MASTER_PORT_SYM = 531,
     MASTER_SERVER_ID_SYM = 532,
     MASTER_SSL_CAPATH_SYM = 533,
     MASTER_SSL_CA_SYM = 534,
     MASTER_SSL_CERT_SYM = 535,
     MASTER_SSL_CIPHER_SYM = 536,
     MASTER_SSL_KEY_SYM = 537,
     MASTER_SSL_SYM = 538,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 539,
     MASTER_SYM = 540,
     MASTER_USER_SYM = 541,
     MATCH = 542,
     MAX_CONNECTIONS_PER_HOUR = 543,
     MAX_QUERIES_PER_HOUR = 544,
     MAX_ROWS = 545,
     MAX_SIZE_SYM = 546,
     MAX_SYM = 547,
     MAX_UPDATES_PER_HOUR = 548,
     MAX_USER_CONNECTIONS_SYM = 549,
     MAX_VALUE_SYM = 550,
     MEDIUMBLOB = 551,
     MEDIUMINT = 552,
     MEDIUMTEXT = 553,
     MEDIUM_SYM = 554,
     MEMORY_SYM = 555,
     MERGE_SYM = 556,
     MICROSECOND_SYM = 557,
     MIGRATE_SYM = 558,
     MINUTE_MICROSECOND_SYM = 559,
     MINUTE_SECOND_SYM = 560,
     MINUTE_SYM = 561,
     MIN_ROWS = 562,
     MIN_SYM = 563,
     MODE_SYM = 564,
     MODIFIES_SYM = 565,
     MODIFY_SYM = 566,
     MOD_SYM = 567,
     MONTH_SYM = 568,
     MULTILINESTRING = 569,
     MULTIPOINT = 570,
     MULTIPOLYGON = 571,
     MUTEX_SYM = 572,
     NAMES_SYM = 573,
     NAME_SYM = 574,
     NATIONAL_SYM = 575,
     NATURAL = 576,
     NCHAR_STRING = 577,
     NCHAR_SYM = 578,
     NDBCLUSTER_SYM = 579,
     NE = 580,
     NEG = 581,
     NEW_SYM = 582,
     NEXT_SYM = 583,
     NODEGROUP_SYM = 584,
     NONE_SYM = 585,
     NOT2_SYM = 586,
     NOT_SYM = 587,
     NOW_SYM = 588,
     NO_SYM = 589,
     NO_WAIT_SYM = 590,
     NO_WRITE_TO_BINLOG = 591,
     NULL_SYM = 592,
     NUM = 593,
     NUMERIC_SYM = 594,
     NVARCHAR_SYM = 595,
     OFFSET_SYM = 596,
     OLD_PASSWORD = 597,
     ON = 598,
     ONE_SHOT_SYM = 599,
     ONE_SYM = 600,
     OPEN_SYM = 601,
     OPTIMIZE = 602,
     OPTIONS_SYM = 603,
     OPTION = 604,
     OPTIONALLY = 605,
     OR2_SYM = 606,
     ORDER_SYM = 607,
     OR_OR_SYM = 608,
     OR_SYM = 609,
     ORDERED_CHECKSUM_SYM = 610,
     OUTER = 611,
     OUTFILE = 612,
     OUT_SYM = 613,
     OWNER_SYM = 614,
     PACK_KEYS_SYM = 615,
     PAGE_SYM = 616,
     PARAM_MARKER = 617,
     PARSER_SYM = 618,
     PARTIAL = 619,
     PARTITIONING_SYM = 620,
     PARTITIONS_SYM = 621,
     PARTITION_SYM = 622,
     PASSWORD = 623,
     PHASE_SYM = 624,
     PLUGINS_SYM = 625,
     PLUGIN_SYM = 626,
     POINT_SYM = 627,
     POLYGON = 628,
     PORT_SYM = 629,
     POSITION_SYM = 630,
     PRECISION = 631,
     PREPARE_SYM = 632,
     PRESERVE_SYM = 633,
     PREV_SYM = 634,
     PRIMARY_SYM = 635,
     PRIVILEGES = 636,
     PROCEDURE = 637,
     PROCESS = 638,
     PROCESSLIST_SYM = 639,
     PROFILE_SYM = 640,
     PROFILES_SYM = 641,
     PURGE = 642,
     QUARTER_SYM = 643,
     QUERY_SYM = 644,
     QUICK = 645,
     RANGE_SYM = 646,
     READS_SYM = 647,
     READ_ONLY_SYM = 648,
     READ_SYM = 649,
     READ_WRITE_SYM = 650,
     REAL = 651,
     REBUILD_SYM = 652,
     RECOVER_SYM = 653,
     REDOFILE_SYM = 654,
     REDO_BUFFER_SIZE_SYM = 655,
     REDUNDANT_SYM = 656,
     REFERENCES = 657,
     REGEXP = 658,
     RELAY_LOG_FILE_SYM = 659,
     RELAY_LOG_POS_SYM = 660,
     RELAY_THREAD = 661,
     RELEASE_SYM = 662,
     RELOAD = 663,
     REMOVE_SYM = 664,
     RENAME = 665,
     REORGANIZE_SYM = 666,
     REPAIR = 667,
     REPEATABLE_SYM = 668,
     REPEAT_SYM = 669,
     REPLACE = 670,
     REPLICATION = 671,
     REQUIRE_SYM = 672,
     RESET_SYM = 673,
     RESOURCES = 674,
     RESTORE_SYM = 675,
     RESTRICT = 676,
     RESUME_SYM = 677,
     RETURNS_SYM = 678,
     RETURN_SYM = 679,
     REVOKE = 680,
     RIGHT = 681,
     ROLE_SYM = 682,
     ROLLBACK_SYM = 683,
     ROLLUP_SYM = 684,
     ROUTINE_SYM = 685,
     ROWS_SYM = 686,
     ROW_FORMAT_SYM = 687,
     ROW_SYM = 688,
     RTREE_SYM = 689,
     SAVEPOINT_SYM = 690,
     SCHEDULE_SYM = 691,
     SECOND_MICROSECOND_SYM = 692,
     SECOND_SYM = 693,
     SECURITY_SYM = 694,
     SELECT_SYM = 695,
     SENSITIVE_SYM = 696,
     SEPARATOR_SYM = 697,
     SERIALIZABLE_SYM = 698,
     SERIAL_SYM = 699,
     SESSION_SYM = 700,
     SERVER_SYM = 701,
     SERVER_OPTIONS = 702,
     SET = 703,
     SET_VAR = 704,
     SHARE_SYM = 705,
     SHIFT_LEFT = 706,
     SHIFT_RIGHT = 707,
     SHOW = 708,
     SHUTDOWN = 709,
     SIGNED_SYM = 710,
     SIMPLE_SYM = 711,
     SLAVE = 712,
     SMALLINT = 713,
     SNAPSHOT_SYM = 714,
     SOCKET_SYM = 715,
     SONAME_SYM = 716,
     SOUNDS_SYM = 717,
     SOURCE_SYM = 718,
     SPATIAL_SYM = 719,
     SPECIFIC_SYM = 720,
     SQLEXCEPTION_SYM = 721,
     SQLSTATE_SYM = 722,
     SQLWARNING_SYM = 723,
     SQL_BIG_RESULT = 724,
     SQL_BUFFER_RESULT = 725,
     SQL_CACHE_SYM = 726,
     SQL_CALC_FOUND_ROWS = 727,
     SQL_NO_CACHE_SYM = 728,
     SQL_SMALL_RESULT = 729,
     SQL_SYM = 730,
     SQL_THREAD = 731,
     SSL_SYM = 732,
     STARTING = 733,
     STARTS_SYM = 734,
     START_SYM = 735,
     STATS_SERVER_SYM = 736,
     STATS_SERVERS_SYM = 737,
     STATUS_SYM = 738,
     STDDEV_SAMP_SYM = 739,
     STD_SYM = 740,
     STOP_SYM = 741,
     STORAGE_SYM = 742,
     STRAIGHT_JOIN = 743,
     STRING_SYM = 744,
     SUBDATE_SYM = 745,
     SUBJECT_SYM = 746,
     SUBPARTITIONS_SYM = 747,
     SUBPARTITION_SYM = 748,
     SUBSTRING = 749,
     SUM_SYM = 750,
     SUPER_SYM = 751,
     SUSPEND_SYM = 752,
     SWAPS_SYM = 753,
     SWITCHES_SYM = 754,
     SYSDATE = 755,
     TABLES = 756,
     TABLESPACE = 757,
     TABLE_REF_PRIORITY = 758,
     TABLE_STATS_SYM = 759,
     TABLE_SYM = 760,
     TABLE_CHECKSUM_SYM = 761,
     TEMPORARY = 762,
     TEMPTABLE_SYM = 763,
     TERMINATED = 764,
     TEXT_STRING = 765,
     TEXT_SYM = 766,
     THAN_SYM = 767,
     THEN_SYM = 768,
     TIMESTAMP = 769,
     TIMESTAMP_ADD = 770,
     TIMESTAMP_DIFF = 771,
     TIME_SYM = 772,
     TINYBLOB = 773,
     TINYINT = 774,
     TINYTEXT = 775,
     TO_SYM = 776,
     TRAILING = 777,
     TRANSACTION_SYM = 778,
     TRIGGERS_SYM = 779,
     TRIGGER_SYM = 780,
     TRIM = 781,
     TRUE_SYM = 782,
     TRUNCATE_SYM = 783,
     TYPES_SYM = 784,
     TYPE_SYM = 785,
     UDF_RETURNS_SYM = 786,
     ULONGLONG_NUM = 787,
     UNCOMMITTED_SYM = 788,
     UNDEFINED_SYM = 789,
     UNDERSCORE_CHARSET = 790,
     UNDOFILE_SYM = 791,
     UNDO_BUFFER_SIZE_SYM = 792,
     UNDO_SYM = 793,
     UNICODE_SYM = 794,
     UNINSTALL_SYM = 795,
     UNION_SYM = 796,
     UNIQUE_SYM = 797,
     UNKNOWN_SYM = 798,
     UNLOCK_SYM = 799,
     UNORDERED_CHECKSUM_SYM = 800,
     UNSIGNED = 801,
     UNTIL_SYM = 802,
     UPDATE_SYM = 803,
     UPGRADE_SYM = 804,
     USAGE = 805,
     USER = 806,
     USER_STATS_SYM = 807,
     USE_FRM = 808,
     USE_SYM = 809,
     USING = 810,
     UTC_DATE_SYM = 811,
     UTC_TIMESTAMP_SYM = 812,
     UTC_TIME_SYM = 813,
     VALUES = 814,
     VALUE_SYM = 815,
     VARBINARY = 816,
     VARCHAR = 817,
     VARIABLES = 818,
     VARIANCE_SYM = 819,
     VARYING = 820,
     VAR_SAMP_SYM = 821,
     VIEW_SYM = 822,
     WAIT_SYM = 823,
     WARNINGS = 824,
     WEEK_SYM = 825,
     WHEN_SYM = 826,
     WHERE = 827,
     WHILE_SYM = 828,
     WITH = 829,
     WORK_SYM = 830,
     WRAPPER_SYM = 831,
     WRITE_SYM = 832,
     X509_SYM = 833,
     XA_SYM = 834,
     XOR = 835,
     YEAR_MONTH_SYM = 836,
     YEAR_SYM = 837,
     ZEROFILL = 838
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYZE_SYM 269
#define AND_AND_SYM 270
#define AND_SYM 271
#define ANY_SYM 272
#define AS 273
#define ASC 274
#define ASCII_SYM 275
#define ASENSITIVE_SYM 276
#define AT_SYM 277
#define AUTHORS_SYM 278
#define AUTOEXTEND_SIZE_SYM 279
#define AUTO_INC 280
#define AVG_ROW_LENGTH 281
#define AVG_SYM 282
#define BACKUP_SYM 283
#define BEFORE_SYM 284
#define BEGIN_SYM 285
#define BETWEEN_SYM 286
#define BIGINT 287
#define BINARY 288
#define BINLOG_SYM 289
#define BINLOG_GROUP_ID_SYM 290
#define BIN_NUM 291
#define BIT_AND 292
#define BIT_OR 293
#define BIT_SYM 294
#define BIT_XOR 295
#define BLOB_SYM 296
#define BLOCK_SYM 297
#define BOOLEAN_SYM 298
#define BOOL_SYM 299
#define BOTH 300
#define BTREE_SYM 301
#define BY 302
#define BYTE_SYM 303
#define CACHE_SYM 304
#define CALL_SYM 305
#define CASCADE 306
#define CASCADED 307
#define CASE_SYM 308
#define CAST_SYM 309
#define CHAIN_SYM 310
#define CHANGE 311
#define CHANGED 312
#define CHARSET 313
#define CHAR_SYM 314
#define CHECKSUM_SYM 315
#define CHECK_SYM 316
#define CIPHER_SYM 317
#define CLIENT_SYM 318
#define CLOSE_SYM 319
#define COALESCE 320
#define CODE_SYM 321
#define COLLATE_SYM 322
#define COLLATION_SYM 323
#define COLUMNS 324
#define COLUMN_SYM 325
#define COMMENT_SYM 326
#define COMMITTED_SYM 327
#define COMMIT_SYM 328
#define COMPACT_SYM 329
#define COMPLETION_SYM 330
#define COMPRESSED_SYM 331
#define CONCURRENT 332
#define CONDITION_SYM 333
#define CONNECTION_SYM 334
#define CONNECT_USING_GROUP_ID_SYM 335
#define CONSISTENT_SYM 336
#define CONSTRAINT 337
#define CONTAINS_SYM 338
#define CONTEXT_SYM 339
#define CONTINUE_SYM 340
#define CONTRIBUTORS_SYM 341
#define CONVERT_SYM 342
#define COUNT_SYM 343
#define CPU_SYM 344
#define CREATE 345
#define CROSS 346
#define CUBE_SYM 347
#define CURDATE 348
#define CURRENT_USER 349
#define CURSOR_SYM 350
#define CURTIME 351
#define DATABASE 352
#define DATABASES 353
#define DATAFILE_SYM 354
#define DATA_SYM 355
#define DATETIME 356
#define DATE_ADD_INTERVAL 357
#define DATE_SUB_INTERVAL 358
#define DATE_SYM 359
#define DAY_HOUR_SYM 360
#define DAY_MICROSECOND_SYM 361
#define DAY_MINUTE_SYM 362
#define DAY_SECOND_SYM 363
#define DAY_SYM 364
#define DEALLOCATE_SYM 365
#define DECIMAL_NUM 366
#define DECIMAL_SYM 367
#define DECLARE_SYM 368
#define DEFAULT 369
#define DEFINER_SYM 370
#define DELAYED_SYM 371
#define DELAY_KEY_WRITE_SYM 372
#define DELETE_SYM 373
#define DESC 374
#define DESCRIBE 375
#define DES_KEY_FILE 376
#define DETERMINISTIC_SYM 377
#define DIRECTORY_SYM 378
#define DISABLE_SYM 379
#define DISCARD 380
#define DISK_SYM 381
#define DISTINCT 382
#define DIV_SYM 383
#define DOUBLE_SYM 384
#define DO_SYM 385
#define DROP 386
#define DUAL_SYM 387
#define DUMPFILE 388
#define DUPLICATE_SYM 389
#define DYNAMIC_SYM 390
#define EACH_SYM 391
#define ELSE 392
#define ELSEIF_SYM 393
#define ENABLE_SYM 394
#define ENCLOSED 395
#define END 396
#define ENDS_SYM 397
#define END_OF_INPUT 398
#define ENGINES_SYM 399
#define ENGINE_SYM 400
#define ENUM 401
#define EQ 402
#define EQUAL_SYM 403
#define ERRORS 404
#define ESCAPED 405
#define ESCAPE_SYM 406
#define EVENTS_SYM 407
#define EVENT_SYM 408
#define EVERY_SYM 409
#define EXECUTE_SYM 410
#define EXISTS 411
#define EXIT_SYM 412
#define EXPANSION_SYM 413
#define EXTENDED_SYM 414
#define EXTENT_SIZE_SYM 415
#define EXTRACT_SYM 416
#define FAILOVER_SYM 417
#define FALSE_SYM 418
#define FAST_SYM 419
#define FAULTS_SYM 420
#define FETCH_SYM 421
#define FILE_SYM 422
#define FIRST_SYM 423
#define FIXED_SYM 424
#define FLOAT_NUM 425
#define FLOAT_SYM 426
#define FLUSH_SYM 427
#define FORCE_SYM 428
#define FOREIGN 429
#define FOR_SYM 430
#define FOUND_SYM 431
#define FRAC_SECOND_SYM 432
#define FROM 433
#define FULL 434
#define FULLTEXT_SYM 435
#define FUNCTION_SYM 436
#define GE 437
#define GEOMETRYCOLLECTION 438
#define GEOMETRY_SYM 439
#define GET_FORMAT 440
#define GLOBAL_SYM 441
#define GOOGLESTATS_SYM 442
#define GRANT 443
#define GRANTS 444
#define GROUP_SYM 445
#define GROUP_CONCAT_SYM 446
#define GT_SYM 447
#define HANDLER_SYM 448
#define HASH_SYM 449
#define HAVING 450
#define HELP_SYM 451
#define HEX_NUM 452
#define HIGH_PRIORITY 453
#define HOST_SYM 454
#define HOSTS_SYM 455
#define HOUR_MICROSECOND_SYM 456
#define HOUR_MINUTE_SYM 457
#define HOUR_SECOND_SYM 458
#define HOUR_SYM 459
#define IDENT 460
#define IDENTIFIED_SYM 461
#define IDENT_QUOTED 462
#define IDLE_SYM 463
#define IF 464
#define IGNORE_SYM 465
#define IMPORT 466
#define INDEXES 467
#define INDEX_SYM 468
#define INFILE 469
#define INFO_SYM 470
#define INITIAL_SIZE_SYM 471
#define INNER_SYM 472
#define INNOBASE_SYM 473
#define INOUT_SYM 474
#define INSENSITIVE_SYM 475
#define INSERT 476
#define INSERT_METHOD 477
#define INSTALL_SYM 478
#define INTERVAL_SYM 479
#define INTO 480
#define INT_SYM 481
#define INVOKER_SYM 482
#define IN_SYM 483
#define IO_SYM 484
#define IPC_SYM 485
#define IS 486
#define ISOLATION 487
#define ISSUER_SYM 488
#define ITERATE_SYM 489
#define JOIN_SYM 490
#define KEYS 491
#define KEY_BLOCK_SIZE 492
#define KEY_SYM 493
#define KILL_SYM 494
#define LANGUAGE_SYM 495
#define LAST_SYM 496
#define LE 497
#define LEADING 498
#define LEAVES 499
#define LEAVE_SYM 500
#define LEFT 501
#define LESS_SYM 502
#define LEVEL_SYM 503
#define LEX_HOSTNAME 504
#define LIKE 505
#define LIMIT 506
#define LINEAR_SYM 507
#define LINES 508
#define LINESTRING 509
#define LIST_SYM 510
#define LOAD 511
#define LOCAL_SYM 512
#define LOCATOR_SYM 513
#define LOCKS_SYM 514
#define LOCK_SYM 515
#define LOGFILE_SYM 516
#define LOGS_SYM 517
#define LONGBLOB 518
#define LONGTEXT 519
#define LONG_NUM 520
#define LONG_SYM 521
#define LOOP_SYM 522
#define LOW_PRIORITY 523
#define LT 524
#define MAPPED 525
#define MASTER_CONNECT_RETRY_SYM 526
#define MASTER_HOST_SYM 527
#define MASTER_LOG_FILE_SYM 528
#define MASTER_LOG_POS_SYM 529
#define MASTER_PASSWORD_SYM 530
#define MASTER_PORT_SYM 531
#define MASTER_SERVER_ID_SYM 532
#define MASTER_SSL_CAPATH_SYM 533
#define MASTER_SSL_CA_SYM 534
#define MASTER_SSL_CERT_SYM 535
#define MASTER_SSL_CIPHER_SYM 536
#define MASTER_SSL_KEY_SYM 537
#define MASTER_SSL_SYM 538
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 539
#define MASTER_SYM 540
#define MASTER_USER_SYM 541
#define MATCH 542
#define MAX_CONNECTIONS_PER_HOUR 543
#define MAX_QUERIES_PER_HOUR 544
#define MAX_ROWS 545
#define MAX_SIZE_SYM 546
#define MAX_SYM 547
#define MAX_UPDATES_PER_HOUR 548
#define MAX_USER_CONNECTIONS_SYM 549
#define MAX_VALUE_SYM 550
#define MEDIUMBLOB 551
#define MEDIUMINT 552
#define MEDIUMTEXT 553
#define MEDIUM_SYM 554
#define MEMORY_SYM 555
#define MERGE_SYM 556
#define MICROSECOND_SYM 557
#define MIGRATE_SYM 558
#define MINUTE_MICROSECOND_SYM 559
#define MINUTE_SECOND_SYM 560
#define MINUTE_SYM 561
#define MIN_ROWS 562
#define MIN_SYM 563
#define MODE_SYM 564
#define MODIFIES_SYM 565
#define MODIFY_SYM 566
#define MOD_SYM 567
#define MONTH_SYM 568
#define MULTILINESTRING 569
#define MULTIPOINT 570
#define MULTIPOLYGON 571
#define MUTEX_SYM 572
#define NAMES_SYM 573
#define NAME_SYM 574
#define NATIONAL_SYM 575
#define NATURAL 576
#define NCHAR_STRING 577
#define NCHAR_SYM 578
#define NDBCLUSTER_SYM 579
#define NE 580
#define NEG 581
#define NEW_SYM 582
#define NEXT_SYM 583
#define NODEGROUP_SYM 584
#define NONE_SYM 585
#define NOT2_SYM 586
#define NOT_SYM 587
#define NOW_SYM 588
#define NO_SYM 589
#define NO_WAIT_SYM 590
#define NO_WRITE_TO_BINLOG 591
#define NULL_SYM 592
#define NUM 593
#define NUMERIC_SYM 594
#define NVARCHAR_SYM 595
#define OFFSET_SYM 596
#define OLD_PASSWORD 597
#define ON 598
#define ONE_SHOT_SYM 599
#define ONE_SYM 600
#define OPEN_SYM 601
#define OPTIMIZE 602
#define OPTIONS_SYM 603
#define OPTION 604
#define OPTIONALLY 605
#define OR2_SYM 606
#define ORDER_SYM 607
#define OR_OR_SYM 608
#define OR_SYM 609
#define ORDERED_CHECKSUM_SYM 610
#define OUTER 611
#define OUTFILE 612
#define OUT_SYM 613
#define OWNER_SYM 614
#define PACK_KEYS_SYM 615
#define PAGE_SYM 616
#define PARAM_MARKER 617
#define PARSER_SYM 618
#define PARTIAL 619
#define PARTITIONING_SYM 620
#define PARTITIONS_SYM 621
#define PARTITION_SYM 622
#define PASSWORD 623
#define PHASE_SYM 624
#define PLUGINS_SYM 625
#define PLUGIN_SYM 626
#define POINT_SYM 627
#define POLYGON 628
#define PORT_SYM 629
#define POSITION_SYM 630
#define PRECISION 631
#define PREPARE_SYM 632
#define PRESERVE_SYM 633
#define PREV_SYM 634
#define PRIMARY_SYM 635
#define PRIVILEGES 636
#define PROCEDURE 637
#define PROCESS 638
#define PROCESSLIST_SYM 639
#define PROFILE_SYM 640
#define PROFILES_SYM 641
#define PURGE 642
#define QUARTER_SYM 643
#define QUERY_SYM 644
#define QUICK 645
#define RANGE_SYM 646
#define READS_SYM 647
#define READ_ONLY_SYM 648
#define READ_SYM 649
#define READ_WRITE_SYM 650
#define REAL 651
#define REBUILD_SYM 652
#define RECOVER_SYM 653
#define REDOFILE_SYM 654
#define REDO_BUFFER_SIZE_SYM 655
#define REDUNDANT_SYM 656
#define REFERENCES 657
#define REGEXP 658
#define RELAY_LOG_FILE_SYM 659
#define RELAY_LOG_POS_SYM 660
#define RELAY_THREAD 661
#define RELEASE_SYM 662
#define RELOAD 663
#define REMOVE_SYM 664
#define RENAME 665
#define REORGANIZE_SYM 666
#define REPAIR 667
#define REPEATABLE_SYM 668
#define REPEAT_SYM 669
#define REPLACE 670
#define REPLICATION 671
#define REQUIRE_SYM 672
#define RESET_SYM 673
#define RESOURCES 674
#define RESTORE_SYM 675
#define RESTRICT 676
#define RESUME_SYM 677
#define RETURNS_SYM 678
#define RETURN_SYM 679
#define REVOKE 680
#define RIGHT 681
#define ROLE_SYM 682
#define ROLLBACK_SYM 683
#define ROLLUP_SYM 684
#define ROUTINE_SYM 685
#define ROWS_SYM 686
#define ROW_FORMAT_SYM 687
#define ROW_SYM 688
#define RTREE_SYM 689
#define SAVEPOINT_SYM 690
#define SCHEDULE_SYM 691
#define SECOND_MICROSECOND_SYM 692
#define SECOND_SYM 693
#define SECURITY_SYM 694
#define SELECT_SYM 695
#define SENSITIVE_SYM 696
#define SEPARATOR_SYM 697
#define SERIALIZABLE_SYM 698
#define SERIAL_SYM 699
#define SESSION_SYM 700
#define SERVER_SYM 701
#define SERVER_OPTIONS 702
#define SET 703
#define SET_VAR 704
#define SHARE_SYM 705
#define SHIFT_LEFT 706
#define SHIFT_RIGHT 707
#define SHOW 708
#define SHUTDOWN 709
#define SIGNED_SYM 710
#define SIMPLE_SYM 711
#define SLAVE 712
#define SMALLINT 713
#define SNAPSHOT_SYM 714
#define SOCKET_SYM 715
#define SONAME_SYM 716
#define SOUNDS_SYM 717
#define SOURCE_SYM 718
#define SPATIAL_SYM 719
#define SPECIFIC_SYM 720
#define SQLEXCEPTION_SYM 721
#define SQLSTATE_SYM 722
#define SQLWARNING_SYM 723
#define SQL_BIG_RESULT 724
#define SQL_BUFFER_RESULT 725
#define SQL_CACHE_SYM 726
#define SQL_CALC_FOUND_ROWS 727
#define SQL_NO_CACHE_SYM 728
#define SQL_SMALL_RESULT 729
#define SQL_SYM 730
#define SQL_THREAD 731
#define SSL_SYM 732
#define STARTING 733
#define STARTS_SYM 734
#define START_SYM 735
#define STATS_SERVER_SYM 736
#define STATS_SERVERS_SYM 737
#define STATUS_SYM 738
#define STDDEV_SAMP_SYM 739
#define STD_SYM 740
#define STOP_SYM 741
#define STORAGE_SYM 742
#define STRAIGHT_JOIN 743
#define STRING_SYM 744
#define SUBDATE_SYM 745
#define SUBJECT_SYM 746
#define SUBPARTITIONS_SYM 747
#define SUBPARTITION_SYM 748
#define SUBSTRING 749
#define SUM_SYM 750
#define SUPER_SYM 751
#define SUSPEND_SYM 752
#define SWAPS_SYM 753
#define SWITCHES_SYM 754
#define SYSDATE 755
#define TABLES 756
#define TABLESPACE 757
#define TABLE_REF_PRIORITY 758
#define TABLE_STATS_SYM 759
#define TABLE_SYM 760
#define TABLE_CHECKSUM_SYM 761
#define TEMPORARY 762
#define TEMPTABLE_SYM 763
#define TERMINATED 764
#define TEXT_STRING 765
#define TEXT_SYM 766
#define THAN_SYM 767
#define THEN_SYM 768
#define TIMESTAMP 769
#define TIMESTAMP_ADD 770
#define TIMESTAMP_DIFF 771
#define TIME_SYM 772
#define TINYBLOB 773
#define TINYINT 774
#define TINYTEXT 775
#define TO_SYM 776
#define TRAILING 777
#define TRANSACTION_SYM 778
#define TRIGGERS_SYM 779
#define TRIGGER_SYM 780
#define TRIM 781
#define TRUE_SYM 782
#define TRUNCATE_SYM 783
#define TYPES_SYM 784
#define TYPE_SYM 785
#define UDF_RETURNS_SYM 786
#define ULONGLONG_NUM 787
#define UNCOMMITTED_SYM 788
#define UNDEFINED_SYM 789
#define UNDERSCORE_CHARSET 790
#define UNDOFILE_SYM 791
#define UNDO_BUFFER_SIZE_SYM 792
#define UNDO_SYM 793
#define UNICODE_SYM 794
#define UNINSTALL_SYM 795
#define UNION_SYM 796
#define UNIQUE_SYM 797
#define UNKNOWN_SYM 798
#define UNLOCK_SYM 799
#define UNORDERED_CHECKSUM_SYM 800
#define UNSIGNED 801
#define UNTIL_SYM 802
#define UPDATE_SYM 803
#define UPGRADE_SYM 804
#define USAGE 805
#define USER 806
#define USER_STATS_SYM 807
#define USE_FRM 808
#define USE_SYM 809
#define USING 810
#define UTC_DATE_SYM 811
#define UTC_TIMESTAMP_SYM 812
#define UTC_TIME_SYM 813
#define VALUES 814
#define VALUE_SYM 815
#define VARBINARY 816
#define VARCHAR 817
#define VARIABLES 818
#define VARIANCE_SYM 819
#define VARYING 820
#define VAR_SAMP_SYM 821
#define VIEW_SYM 822
#define WAIT_SYM 823
#define WARNINGS 824
#define WEEK_SYM 825
#define WHEN_SYM 826
#define WHERE 827
#define WHILE_SYM 828
#define WITH 829
#define WORK_SYM 830
#define WRAPPER_SYM 831
#define WRITE_SYM 832
#define X509_SYM 833
#define XA_SYM 834
#define XOR 835
#define YEAR_MONTH_SYM 836
#define YEAR_SYM 837
#define ZEROFILL 838




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 293 of yacc.c  */
#line 642 "sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  struct st_lex *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;



/* Line 293 of yacc.c  */
#line 1946 "sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 343 of yacc.c  */
#line 686 "sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 343 of yacc.c  */
#line 1963 "sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  563
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   48103

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  603
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  849
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2421
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4154

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   838

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   596,     2,     2,     2,   590,   585,     2,
     593,   594,   588,   587,   595,   586,   601,   589,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   602,   599,
       2,     2,     2,     2,   600,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   591,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   597,   584,   598,   592,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   127,   129,   131,   136,   138,   141,   142,   147,
     148,   151,   155,   157,   160,   161,   165,   166,   172,   174,
     178,   182,   186,   190,   194,   198,   202,   206,   210,   214,
     218,   222,   226,   228,   230,   234,   238,   242,   246,   247,
     255,   256,   269,   270,   283,   284,   297,   298,   305,   306,
     310,   316,   321,   325,   328,   339,   341,   345,   348,   351,
     354,   357,   360,   363,   366,   367,   381,   382,   389,   392,
     393,   395,   399,   401,   402,   405,   406,   409,   410,   412,
     416,   421,   422,   425,   426,   429,   431,   433,   435,   437,
     439,   441,   443,   445,   447,   449,   451,   453,   455,   456,
     460,   462,   463,   466,   467,   470,   473,   476,   479,   482,
     486,   490,   492,   494,   496,   499,   503,   507,   508,   513,
     514,   518,   519,   521,   525,   527,   528,   530,   534,   536,
     537,   541,   542,   544,   548,   550,   555,   556,   558,   560,
     562,   563,   567,   570,   574,   575,   579,   580,   586,   592,
     593,   601,   607,   608,   611,   613,   615,   617,   621,   623,
     625,   629,   630,   632,   634,   636,   638,   641,   643,   645,
     649,   650,   653,   655,   657,   659,   661,   663,   665,   667,
     669,   671,   673,   675,   677,   679,   680,   686,   687,   690,
     691,   695,   696,   699,   702,   705,   708,   709,   716,   719,
     720,   723,   725,   727,   731,   732,   733,   734,   742,   743,
     746,   749,   751,   753,   754,   755,   764,   765,   772,   774,
     777,   779,   782,   783,   784,   791,   792,   793,   800,   801,
     804,   805,   811,   812,   814,   815,   821,   822,   825,   826,
     832,   837,   838,   839,   848,   849,   857,   859,   861,   863,
     865,   867,   870,   875,   881,   882,   887,   892,   897,   901,
     905,   908,   911,   912,   915,   917,   920,   924,   926,   928,
     930,   932,   934,   937,   941,   943,   945,   947,   949,   951,
     953,   955,   957,   959,   961,   964,   968,   970,   972,   974,
     976,   978,   980,   982,   985,   989,   991,   993,   995,   997,
     999,  1001,  1003,  1005,  1007,  1010,  1014,  1016,  1018,  1020,
    1023,  1026,  1029,  1031,  1033,  1035,  1037,  1040,  1044,  1048,
    1052,  1056,  1060,  1064,  1068,  1072,  1077,  1078,  1080,  1082,
    1084,  1086,  1088,  1091,  1095,  1098,  1103,  1109,  1110,  1116,
    1117,  1118,  1124,  1125,  1133,  1134,  1136,  1137,  1141,  1142,
    1146,  1152,  1158,  1159,  1164,  1165,  1169,  1170,  1174,  1175,
    1177,  1178,  1180,  1182,  1186,  1188,  1194,  1200,  1201,  1204,
    1205,  1206,  1214,  1215,  1225,  1227,  1231,  1233,  1235,  1236,
    1239,  1240,  1244,  1246,  1250,  1251,  1258,  1260,  1261,  1266,
    1272,  1274,  1276,  1278,  1282,  1286,  1288,  1292,  1294,  1296,
    1297,  1301,  1303,  1307,  1308,  1313,  1315,  1316,  1318,  1321,
    1323,  1327,  1332,  1336,  1340,  1344,  1349,  1354,  1358,  1359,
    1360,  1367,  1368,  1370,  1371,  1373,  1375,  1378,  1380,  1382,
    1383,  1385,  1387,  1390,  1392,  1393,  1397,  1398,  1400,  1402,
    1405,  1407,  1410,  1414,  1418,  1422,  1426,  1430,  1434,  1438,
    1442,  1446,  1450,  1454,  1458,  1462,  1466,  1470,  1476,  1478,
    1480,  1484,  1489,  1494,  1497,  1500,  1503,  1507,  1511,  1516,
    1521,  1523,  1525,  1527,  1529,  1531,  1533,  1535,  1537,  1539,
    1541,  1543,  1545,  1548,  1550,  1552,  1554,  1556,  1558,  1562,
    1564,  1566,  1569,  1572,  1580,  1589,  1598,  1607,  1616,  1619,
    1622,  1623,  1625,  1628,  1629,  1631,  1634,  1635,  1640,  1644,
    1648,  1652,  1654,  1657,  1659,  1661,  1665,  1668,  1672,  1675,
    1678,  1680,  1684,  1688,  1691,  1695,  1697,  1699,  1702,  1704,
    1706,  1709,  1711,  1713,  1715,  1718,  1722,  1725,  1729,  1732,
    1735,  1739,  1743,  1747,  1748,  1755,  1756,  1763,  1766,  1768,
    1770,  1772,  1774,  1776,  1778,  1780,  1782,  1784,  1786,  1788,
    1791,  1794,  1796,  1799,  1801,  1804,  1808,  1811,  1813,  1815,
    1817,  1819,  1821,  1823,  1825,  1828,  1829,  1831,  1833,  1839,
    1840,  1842,  1845,  1847,  1849,  1851,  1853,  1857,  1861,  1865,
    1869,  1870,  1872,  1873,  1875,  1876,  1878,  1881,  1883,  1885,
    1888,  1891,  1896,  1898,  1902,  1905,  1907,  1910,  1913,  1916,
    1919,  1921,  1924,  1926,  1928,  1930,  1932,  1934,  1935,  1938,
    1940,  1942,  1944,  1946,  1948,  1949,  1952,  1954,  1956,  1957,
    1959,  1960,  1963,  1965,  1968,  1972,  1975,  1976,  1978,  1979,
    1981,  1983,  1986,  1987,  1989,  1990,  1995,  1997,  2002,  2006,
    2008,  2009,  2011,  2014,  2016,  2020,  2024,  2027,  2030,  2033,
    2035,  2037,  2040,  2043,  2046,  2048,  2051,  2054,  2056,  2058,
    2059,  2061,  2063,  2065,  2067,  2068,  2070,  2072,  2074,  2075,
    2077,  2080,  2081,  2083,  2084,  2086,  2087,  2089,  2091,  2094,
    2096,  2099,  2101,  2104,  2107,  2110,  2114,  2116,  2118,  2120,
    2122,  2126,  2128,  2130,  2132,  2137,  2140,  2142,  2147,  2148,
    2150,  2151,  2154,  2156,  2160,  2161,  2168,  2169,  2175,  2183,
    2184,  2190,  2191,  2197,  2198,  2204,  2205,  2210,  2211,  2222,
    2226,  2231,  2235,  2239,  2247,  2248,  2252,  2254,  2259,  2260,
    2264,  2265,  2268,  2269,  2271,  2272,  2275,  2278,  2281,  2284,
    2286,  2288,  2290,  2294,  2299,  2300,  2307,  2312,  2313,  2319,
    2320,  2327,  2332,  2334,  2337,  2339,  2341,  2342,  2348,  2349,
    2353,  2356,  2357,  2363,  2364,  2365,  2372,  2374,  2378,  2380,
    2382,  2386,  2389,  2393,  2396,  2401,  2402,  2409,  2410,  2411,
    2420,  2425,  2430,  2434,  2438,  2441,  2444,  2451,  2457,  2461,
    2467,  2469,  2471,  2473,  2474,  2476,  2477,  2479,  2480,  2482,
    2484,  2485,  2488,  2490,  2491,  2493,  2495,  2497,  2498,  2504,
    2508,  2509,  2515,  2519,  2523,  2524,  2528,  2529,  2532,  2534,
    2538,  2539,  2541,  2543,  2544,  2547,  2549,  2553,  2554,  2561,
    2562,  2569,  2570,  2576,  2577,  2579,  2581,  2582,  2589,  2590,
    2592,  2594,  2597,  2599,  2601,  2603,  2604,  2610,  2613,  2614,
    2620,  2621,  2623,  2625,  2628,  2630,  2632,  2634,  2636,  2638,
    2641,  2642,  2648,  2649,  2651,  2653,  2654,  2659,  2664,  2668,
    2674,  2676,  2680,  2684,  2690,  2692,  2696,  2699,  2701,  2703,
    2704,  2711,  2713,  2717,  2721,  2722,  2725,  2726,  2731,  2732,
    2735,  2737,  2740,  2745,  2748,  2752,  2753,  2757,  2758,  2759,
    2766,  2769,  2771,  2773,  2776,  2779,  2788,  2793,  2794,  2796,
    2799,  2801,  2803,  2805,  2807,  2809,  2811,  2813,  2815,  2817,
    2819,  2821,  2822,  2825,  2830,  2834,  2836,  2838,  2843,  2844,
    2845,  2847,  2849,  2850,  2853,  2856,  2858,  2860,  2861,  2864,
    2868,  2872,  2876,  2879,  2883,  2888,  2892,  2897,  2901,  2906,
    2908,  2912,  2917,  2921,  2925,  2932,  2934,  2940,  2947,  2953,
    2961,  2968,  2977,  2983,  2990,  2995,  3000,  3006,  3010,  3015,
    3017,  3021,  3025,  3029,  3033,  3037,  3041,  3047,  3053,  3057,
    3061,  3065,  3069,  3073,  3077,  3079,  3081,  3083,  3085,  3087,
    3089,  3091,  3093,  3095,  3097,  3099,  3101,  3103,  3105,  3107,
    3109,  3111,  3113,  3115,  3117,  3119,  3121,  3125,  3127,  3129,
    3131,  3133,  3137,  3140,  3143,  3146,  3149,  3153,  3157,  3163,
    3170,  3175,  3180,  3188,  3191,  3198,  3204,  3211,  3218,  3223,
    3228,  3234,  3239,  3246,  3249,  3254,  3259,  3264,  3275,  3282,
    3291,  3298,  3303,  3308,  3315,  3320,  3325,  3330,  3337,  3342,
    3350,  3358,  3366,  3373,  3380,  3387,  3394,  3398,  3403,  3410,
    3419,  3422,  3425,  3430,  3439,  3448,  3455,  3462,  3465,  3470,
    3477,  3484,  3493,  3502,  3509,  3518,  3525,  3528,  3533,  3542,
    3551,  3554,  3557,  3560,  3565,  3570,  3575,  3580,  3584,  3593,
    3598,  3605,  3610,  3615,  3620,  3627,  3636,  3643,  3648,  3655,
    3657,  3664,  3669,  3674,  3679,  3684,  3689,  3696,  3701,  3702,
    3708,  3715,  3718,  3722,  3723,  3728,  3729,  3733,  3734,  3736,
    3738,  3742,  3747,  3752,  3758,  3763,  3768,  3773,  3779,  3784,
    3785,  3786,  3794,  3795,  3796,  3803,  3804,  3805,  3812,  3813,
    3814,  3821,  3826,  3832,  3837,  3843,  3848,  3853,  3858,  3863,
    3868,  3874,  3875,  3884,  3885,  3889,  3893,  3895,  3900,  3901,
    3903,  3904,  3907,  3908,  3910,  3911,  3915,  3918,  3922,  3925,
    3927,  3930,  3932,  3935,  3937,  3939,  3941,  3944,  3945,  3947,
    3949,  3953,  3955,  3959,  3961,  3965,  3966,  3968,  3969,  3972,
    3977,  3983,  3985,  3987,  3989,  3991,  3996,  3998,  4002,  4006,
    4010,  4011,  4018,  4019,  4026,  4027,  4036,  4041,  4042,  4051,
    4052,  4063,  4070,  4071,  4080,  4081,  4092,  4099,  4101,  4104,
    4107,  4108,  4113,  4117,  4124,  4125,  4129,  4130,  4131,  4137,
    4138,  4140,  4141,  4143,  4144,  4147,  4151,  4155,  4157,  4159,
    4160,  4168,  4169,  4177,  4179,  4182,  4183,  4184,  4187,  4188,
    4191,  4192,  4194,  4196,  4198,  4200,  4204,  4206,  4210,  4212,
    4214,  4216,  4218,  4220,  4222,  4224,  4226,  4228,  4230,  4232,
    4234,  4236,  4238,  4240,  4242,  4244,  4246,  4248,  4250,  4252,
    4254,  4256,  4258,  4260,  4262,  4264,  4265,  4267,  4269,  4270,
    4273,  4274,  4276,  4277,  4278,  4282,  4283,  4284,  4288,  4291,
    4292,  4293,  4298,  4303,  4306,  4307,  4310,  4313,  4317,  4321,
    4323,  4326,  4327,  4329,  4330,  4335,  4340,  4343,  4344,  4346,
    4348,  4349,  4351,  4352,  4354,  4357,  4359,  4363,  4367,  4369,
    4371,  4373,  4375,  4376,  4379,  4381,  4383,  4385,  4387,  4389,
    4391,  4393,  4395,  4397,  4399,  4401,  4403,  4405,  4407,  4409,
    4411,  4413,  4415,  4417,  4419,  4421,  4423,  4425,  4426,  4427,
    4434,  4435,  4437,  4441,  4443,  4447,  4448,  4451,  4455,  4457,
    4460,  4462,  4463,  4467,  4468,  4469,  4477,  4480,  4482,  4483,
    4487,  4494,  4495,  4502,  4507,  4514,  4519,  4524,  4530,  4536,
    4541,  4546,  4552,  4559,  4564,  4566,  4570,  4572,  4573,  4575,
    4577,  4581,  4583,  4584,  4587,  4588,  4590,  4591,  4592,  4601,
    4602,  4603,  4610,  4611,  4613,  4615,  4617,  4619,  4621,  4624,
    4626,  4628,  4630,  4634,  4639,  4640,  4644,  4648,  4650,  4653,
    4656,  4657,  4661,  4662,  4668,  4672,  4674,  4678,  4680,  4684,
    4686,  4688,  4689,  4691,  4692,  4697,  4698,  4700,  4704,  4706,
    4708,  4710,  4711,  4712,  4719,  4720,  4721,  4733,  4737,  4739,
    4743,  4747,  4749,  4753,  4754,  4756,  4757,  4762,  4763,  4770,
    4771,  4777,  4778,  4785,  4787,  4791,  4795,  4801,  4802,  4805,
    4806,  4809,  4811,  4813,  4815,  4819,  4820,  4822,  4823,  4825,
    4827,  4831,  4833,  4835,  4838,  4841,  4844,  4846,  4848,  4850,
    4852,  4853,  4857,  4858,  4862,  4865,  4870,  4875,  4879,  4884,
    4889,  4892,  4894,  4898,  4902,  4909,  4926,  4929,  4932,  4933,
    4940,  4945,  4951,  4954,  4957,  4960,  4962,  4964,  4966,  4972,
    4978,  4981,  4984,  4986,  4991,  4996,  5000,  5003,  5006,  5009,
    5013,  5016,  5019,  5021,  5025,  5030,  5034,  5038,  5041,  5044,
    5048,  5052,  5056,  5060,  5064,  5066,  5068,  5072,  5076,  5080,
    5082,  5084,  5086,  5088,  5090,  5091,  5093,  5094,  5097,  5098,
    5100,  5101,  5103,  5105,  5107,  5108,  5111,  5112,  5115,  5116,
    5119,  5122,  5123,  5128,  5129,  5134,  5136,  5138,  5139,  5141,
    5143,  5144,  5146,  5148,  5149,  5154,  5158,  5160,  5161,  5165,
    5170,  5173,  5175,  5177,  5179,  5181,  5183,  5185,  5187,  5189,
    5191,  5193,  5195,  5196,  5198,  5199,  5203,  5207,  5209,  5211,
    5213,  5216,  5217,  5221,  5225,  5228,  5231,  5235,  5236,  5238,
    5240,  5242,  5245,  5246,  5251,  5257,  5258,  5259,  5260,  5278,
    5281,  5282,  5284,  5285,  5287,  5289,  5290,  5292,  5294,  5295,
    5298,  5301,  5303,  5307,  5312,  5316,  5320,  5321,  5324,  5327,
    5329,  5333,  5337,  5338,  5342,  5343,  5347,  5350,  5354,  5356,
    5358,  5361,  5362,  5365,  5367,  5369,  5372,  5375,  5377,  5379,
    5381,  5383,  5385,  5388,  5391,  5393,  5395,  5397,  5399,  5401,
    5403,  5405,  5408,  5411,  5414,  5417,  5420,  5422,  5424,  5426,
    5428,  5430,  5432,  5434,  5438,  5444,  5446,  5448,  5450,  5452,
    5454,  5458,  5463,  5469,  5471,  5477,  5481,  5484,  5486,  5490,
    5493,  5496,  5501,  5503,  5505,  5507,  5509,  5511,  5513,  5515,
    5517,  5519,  5521,  5523,  5525,  5527,  5529,  5533,  5536,  5538,
    5540,  5542,  5544,  5546,  5548,  5550,  5552,  5554,  5556,  5558,
    5560,  5562,  5564,  5566,  5568,  5570,  5572,  5574,  5576,  5578,
    5580,  5582,  5584,  5586,  5588,  5590,  5592,  5594,  5596,  5598,
    5600,  5602,  5604,  5606,  5608,  5610,  5612,  5614,  5616,  5618,
    5620,  5622,  5624,  5626,  5628,  5630,  5632,  5634,  5636,  5638,
    5640,  5642,  5644,  5646,  5648,  5650,  5652,  5654,  5656,  5658,
    5660,  5662,  5664,  5666,  5668,  5670,  5672,  5674,  5676,  5678,
    5680,  5682,  5684,  5686,  5688,  5690,  5692,  5694,  5696,  5698,
    5700,  5702,  5704,  5706,  5708,  5710,  5712,  5714,  5716,  5718,
    5720,  5722,  5724,  5726,  5728,  5730,  5732,  5734,  5736,  5738,
    5740,  5742,  5744,  5746,  5748,  5750,  5752,  5754,  5756,  5758,
    5760,  5762,  5764,  5766,  5768,  5770,  5772,  5774,  5776,  5778,
    5780,  5782,  5784,  5786,  5788,  5790,  5792,  5794,  5796,  5798,
    5800,  5802,  5804,  5806,  5808,  5810,  5812,  5814,  5816,  5818,
    5820,  5822,  5824,  5826,  5828,  5830,  5832,  5834,  5836,  5838,
    5840,  5842,  5844,  5846,  5848,  5850,  5852,  5854,  5856,  5858,
    5860,  5862,  5864,  5866,  5868,  5870,  5872,  5874,  5876,  5878,
    5880,  5882,  5884,  5886,  5888,  5890,  5892,  5894,  5896,  5898,
    5900,  5902,  5904,  5906,  5908,  5910,  5912,  5914,  5916,  5918,
    5920,  5922,  5924,  5926,  5928,  5930,  5932,  5934,  5936,  5938,
    5940,  5942,  5944,  5946,  5948,  5950,  5952,  5954,  5956,  5958,
    5960,  5962,  5964,  5966,  5968,  5970,  5972,  5974,  5976,  5978,
    5980,  5982,  5984,  5986,  5988,  5990,  5992,  5994,  5996,  5998,
    6000,  6002,  6004,  6006,  6008,  6010,  6012,  6014,  6016,  6018,
    6020,  6022,  6024,  6026,  6028,  6030,  6032,  6034,  6036,  6038,
    6040,  6042,  6044,  6046,  6048,  6050,  6052,  6054,  6056,  6058,
    6060,  6062,  6064,  6066,  6068,  6070,  6072,  6074,  6076,  6078,
    6080,  6082,  6084,  6086,  6088,  6090,  6092,  6094,  6096,  6098,
    6100,  6102,  6104,  6106,  6108,  6110,  6112,  6114,  6116,  6118,
    6120,  6122,  6124,  6126,  6128,  6130,  6132,  6134,  6136,  6138,
    6140,  6142,  6144,  6146,  6148,  6150,  6152,  6154,  6156,  6158,
    6160,  6162,  6164,  6166,  6168,  6170,  6172,  6174,  6176,  6178,
    6179,  6184,  6185,  6187,  6189,  6193,  6194,  6197,  6199,  6201,
    6203,  6205,  6206,  6208,  6209,  6211,  6213,  6215,  6216,  6219,
    6222,  6225,  6227,  6230,  6235,  6241,  6246,  6253,  6256,  6260,
    6264,  6268,  6274,  6278,  6287,  6288,  6291,  6293,  6297,  6301,
    6304,  6307,  6310,  6312,  6314,  6319,  6324,  6326,  6328,  6330,
    6332,  6334,  6335,  6340,  6342,  6344,  6346,  6350,  6354,  6356,
    6358,  6361,  6364,  6365,  6369,  6374,  6378,  6379,  6387,  6389,
    6392,  6394,  6396,  6398,  6400,  6402,  6404,  6405,  6411,  6413,
    6415,  6417,  6419,  6421,  6425,  6432,  6439,  6446,  6454,  6458,
    6467,  6476,  6485,  6486,  6488,  6490,  6493,  6494,  6496,  6498,
    6502,  6503,  6507,  6508,  6512,  6513,  6517,  6518,  6522,  6524,
    6526,  6528,  6530,  6532,  6534,  6536,  6538,  6540,  6542,  6544,
    6547,  6550,  6552,  6556,  6559,  6562,  6565,  6568,  6571,  6574,
    6577,  6580,  6582,  6584,  6585,  6587,  6591,  6593,  6596,  6599,
    6602,  6604,  6608,  6612,  6614,  6616,  6620,  6622,  6626,  6629,
    6634,  6635,  6638,  6643,  6649,  6651,  6652,  6656,  6660,  6662,
    6664,  6665,  6668,  6671,  6674,  6677,  6678,  6681,  6684,  6686,
    6689,  6692,  6695,  6698,  6701,  6702,  6706,  6707,  6709,  6710,
    6714,  6717,  6718,  6720,  6723,  6724,  6726,  6731,  6736,  6742,
    6745,  6749,  6750,  6752,  6753,  6758,  6759,  6761,  6763,  6764,
    6767,  6770,  6772,  6773,  6775,  6777,  6778,  6784,  6791,  6792,
    6793,  6796,  6799,  6803,  6805,  6807,  6809,  6811,  6813,  6815,
    6817,  6819,  6821,  6823,  6825,  6827,  6829,  6830,  6834,  6836,
    6839,  6841,  6844,  6848,  6852,  6856,  6857,  6861,  6865,  6866,
    6874,  6875,  6879,  6881,  6885,  6886,  6890,  6893,  6898,  6899,
    6903,  6908,  6913,  6914,  6915,  6916,  6933,  6942,  6950,  6951,
    6952,  6953,  6954,  6955,  6971,  6972,  6973,  6974,  6975,  6988,
    6993,  6998,  7002,  7007,  7011,  7014,  7016,  7020,  7026,  7028,
    7030,  7031,  7033,  7035,  7036,  7039,  7040,  7041,  7045,  7046,
    7049,  7055
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     604,     0,    -1,   143,    -1,    -1,   607,   605,   599,   606,
      -1,   607,   143,    -1,    -1,   143,    -1,   608,    -1,  1386,
      -1,   932,    -1,   993,    -1,   983,    -1,   995,    -1,   655,
      -1,   620,    -1,   996,    -1,   985,    -1,  1392,    -1,   625,
      -1,   609,    -1,  1224,    -1,  1255,    -1,  1177,    -1,  1179,
      -1,   613,    -1,  1261,    -1,  1359,    -1,  1350,    -1,   618,
      -1,  1188,    -1,  1450,    -1,  1275,    -1,  1278,    -1,  1342,
      -1,  1001,    -1,  1009,    -1,   787,    -1,  1013,    -1,   611,
      -1,  1271,    -1,  1395,    -1,  1004,    -1,   988,    -1,  1191,
      -1,  1267,    -1,   981,    -1,  1357,    -1,  1393,    -1,  1394,
      -1,  1021,    -1,  1324,    -1,  1241,    -1,   970,    -1,   973,
      -1,  1235,    -1,  1451,    -1,  1348,    -1,  1216,    -1,  1277,
      -1,  1442,    -1,   610,   377,  1318,    -1,   110,    -1,   131,
      -1,   377,  1318,   178,   612,    -1,  1315,    -1,   600,  1320,
      -1,    -1,   155,  1318,   614,   615,    -1,    -1,   555,   616,
      -1,   616,   595,   617,    -1,   617,    -1,   600,  1320,    -1,
      -1,   196,   619,  1320,    -1,    -1,    56,   285,   521,   621,
     622,    -1,   623,    -1,   622,   595,   623,    -1,   272,   147,
    1315,    -1,   286,   147,  1315,    -1,   275,   147,  1315,    -1,
     276,   147,  1157,    -1,   271,   147,  1157,    -1,   283,   147,
    1157,    -1,   279,   147,  1315,    -1,   278,   147,  1315,    -1,
     280,   147,  1315,    -1,   281,   147,  1315,    -1,   282,   147,
    1315,    -1,   284,   147,  1157,    -1,    80,    -1,   624,    -1,
     273,   147,  1315,    -1,   274,   147,  1159,    -1,   404,   147,
    1315,    -1,   405,   147,  1157,    -1,    -1,    90,   835,   505,
     838,  1311,   626,   778,    -1,    -1,    90,   910,   213,  1318,
     914,   343,  1311,   627,   593,   927,   594,   915,    -1,    -1,
      90,   911,   213,  1318,   913,   343,  1311,   628,   593,   927,
     594,   916,    -1,    -1,    90,   912,   213,  1318,   913,   343,
    1311,   629,   593,   927,   594,   917,    -1,    -1,    90,    97,
     838,  1318,   630,   832,    -1,    -1,    90,   631,  1408,    -1,
      90,  1183,   551,   648,  1376,    -1,    90,   261,   190,   741,
      -1,    90,   502,   738,    -1,    90,   632,    -1,   446,  1320,
     174,   100,   576,  1320,   348,   593,   633,   594,    -1,   634,
      -1,   633,   595,   634,    -1,   551,  1315,    -1,   199,  1315,
      -1,    97,  1315,    -1,   359,  1315,    -1,   368,  1315,    -1,
     460,  1315,    -1,   374,  1157,    -1,    -1,  1037,   153,   838,
     649,   636,   343,   436,   637,   642,   639,   644,   130,   645,
      -1,    -1,   154,  1042,  1128,   638,   640,   641,    -1,    22,
    1042,    -1,    -1,   139,    -1,   124,   343,   457,    -1,   124,
      -1,    -1,   479,  1042,    -1,    -1,   142,  1042,    -1,    -1,
     643,    -1,   343,    75,   378,    -1,   343,    75,   332,   378,
      -1,    -1,    71,  1315,    -1,    -1,   646,   647,    -1,   687,
      -1,   689,    -1,   685,    -1,   706,    -1,   724,    -1,   726,
      -1,   721,    -1,   691,    -1,   693,    -1,   694,    -1,   695,
      -1,   696,    -1,   698,    -1,    -1,  1318,   601,  1318,    -1,
    1318,    -1,    -1,   650,   652,    -1,    -1,   651,   653,    -1,
      71,  1315,    -1,   240,   475,    -1,   334,   475,    -1,    83,
     475,    -1,   392,   475,   100,    -1,   310,   475,   100,    -1,
     654,    -1,   652,    -1,   122,    -1,  1048,   122,    -1,   475,
     439,   115,    -1,   475,   439,   227,    -1,    -1,    50,   649,
     656,   657,    -1,    -1,   593,   658,   594,    -1,    -1,   659,
      -1,   659,   595,  1042,    -1,  1042,    -1,    -1,   661,    -1,
     661,   595,   663,    -1,   663,    -1,    -1,  1318,   662,   861,
      -1,    -1,   665,    -1,   665,   595,   666,    -1,   666,    -1,
     667,   662,  1318,   861,    -1,    -1,   228,    -1,   358,    -1,
     219,    -1,    -1,   668,   684,   599,    -1,   684,   599,    -1,
     669,   684,   599,    -1,    -1,   670,   671,   599,    -1,    -1,
     113,   682,   672,   861,   683,    -1,   113,  1318,    78,   175,
     679,    -1,    -1,   113,   676,   193,   175,   673,   677,   684,
      -1,   113,  1318,    95,   175,   674,    -1,    -1,   675,  1021,
      -1,   157,    -1,    85,    -1,   678,    -1,   677,   595,   678,
      -1,   681,    -1,  1157,    -1,   467,   680,  1316,    -1,    -1,
     560,    -1,   679,    -1,  1318,    -1,   468,    -1,  1048,   176,
      -1,   466,    -1,  1318,    -1,   682,   595,  1318,    -1,    -1,
     114,  1042,    -1,   687,    -1,   689,    -1,   685,    -1,   706,
      -1,   724,    -1,   726,    -1,   721,    -1,   691,    -1,   693,
      -1,   694,    -1,   695,    -1,   696,    -1,   698,    -1,    -1,
     209,   686,   701,   141,   209,    -1,    -1,   688,   608,    -1,
      -1,   424,   690,  1042,    -1,    -1,   692,   730,    -1,   245,
    1319,    -1,   234,  1319,    -1,   346,  1318,    -1,    -1,   166,
     699,  1318,   225,   697,   700,    -1,    64,  1318,    -1,    -1,
     328,   178,    -1,   178,    -1,  1318,    -1,   700,   595,  1318,
      -1,    -1,    -1,    -1,   702,  1042,   513,   703,   669,   704,
     705,    -1,    -1,   138,   701,    -1,   137,   669,    -1,   707,
      -1,   710,    -1,    -1,    -1,    53,   708,  1042,   709,   712,
     720,   141,    53,    -1,    -1,    53,   711,   713,   720,   141,
      53,    -1,   714,    -1,   712,   714,    -1,   717,    -1,   713,
     717,    -1,    -1,    -1,   571,   715,  1042,   716,   513,   669,
      -1,    -1,    -1,   571,   718,  1042,   719,   513,   669,    -1,
      -1,   137,   669,    -1,    -1,  1319,   602,   722,   730,   723,
      -1,    -1,  1319,    -1,    -1,  1319,   602,   725,   728,   723,
      -1,    -1,   727,   728,    -1,    -1,    30,   729,   670,   668,
     141,    -1,   267,   669,   141,   267,    -1,    -1,    -1,   573,
     731,  1042,   130,   732,   669,   141,   573,    -1,    -1,   414,
     669,   547,   733,  1042,   141,   414,    -1,    29,    -1,     8,
      -1,   221,    -1,   548,    -1,   118,    -1,   763,   765,    -1,
     763,    56,   760,   744,    -1,   763,     6,   760,   739,   748,
      -1,    -1,   554,   261,   190,  1318,    -1,   763,     6,   760,
     751,    -1,   763,   131,   760,   751,    -1,   764,   743,   754,
      -1,   764,   743,   757,    -1,     6,   761,    -1,     6,   762,
      -1,    -1,   745,   746,    -1,   747,    -1,   746,   747,    -1,
     746,   595,   747,    -1,   766,    -1,   767,    -1,   768,    -1,
     749,    -1,   750,    -1,   749,   750,    -1,   749,   595,   750,
      -1,   766,    -1,   767,    -1,   768,    -1,   769,    -1,   772,
      -1,   774,    -1,   776,    -1,   773,    -1,   752,    -1,   753,
      -1,   752,   753,    -1,   752,   595,   753,    -1,   766,    -1,
     767,    -1,   768,    -1,   774,    -1,   776,    -1,   755,    -1,
     756,    -1,   755,   756,    -1,   755,   595,   756,    -1,   766,
      -1,   770,    -1,   771,    -1,   772,    -1,   774,    -1,   776,
      -1,   773,    -1,   758,    -1,   759,    -1,   758,   759,    -1,
     758,   595,   759,    -1,   766,    -1,   774,    -1,   776,    -1,
      99,  1315,    -1,   536,  1315,    -1,   399,  1315,    -1,  1318,
      -1,  1318,    -1,   393,    -1,   395,    -1,   332,     4,    -1,
     216,  1208,   777,    -1,    24,  1208,   777,    -1,   291,  1208,
     777,    -1,   160,  1208,   777,    -1,   537,  1208,   777,    -1,
     400,  1208,   777,    -1,   329,  1208,  1158,    -1,    71,  1208,
    1315,    -1,  1247,   145,  1208,   845,    -1,    -1,   776,    -1,
     568,    -1,   335,    -1,  1158,    -1,   205,    -1,   593,   779,
      -1,   839,   784,   781,    -1,   250,  1311,    -1,   593,   250,
    1311,   594,    -1,   851,   594,   839,   784,   781,    -1,    -1,
     784,   828,   594,   780,  1399,    -1,    -1,    -1,  1286,   831,
     828,   782,  1396,    -1,    -1,  1286,   831,   593,   828,   594,
     783,  1399,    -1,    -1,   785,    -1,    -1,   367,   786,   789,
      -1,    -1,   367,   788,   789,    -1,    47,   790,   800,   801,
     808,    -1,   794,   238,   593,   795,   594,    -1,    -1,   794,
     194,   791,   798,    -1,    -1,   391,   792,   798,    -1,    -1,
     255,   793,   798,    -1,    -1,   252,    -1,    -1,   796,    -1,
     797,    -1,   796,   595,   797,    -1,  1318,    -1,   593,  1037,
     806,  1038,   594,    -1,   593,  1037,   806,  1038,   594,    -1,
      -1,   366,  1158,    -1,    -1,    -1,   493,    47,   794,   194,
     799,   802,   807,    -1,    -1,   493,    47,   794,   238,   593,
     804,   594,   803,   807,    -1,   805,    -1,   804,   595,   805,
      -1,  1318,    -1,  1045,    -1,    -1,   492,  1158,    -1,    -1,
     593,   809,   594,    -1,   810,    -1,   809,   595,   810,    -1,
      -1,   367,   811,   812,   813,   825,   820,    -1,  1318,    -1,
      -1,   559,   247,   512,   814,    -1,   559,   228,   593,   817,
     594,    -1,   815,    -1,   816,    -1,   295,    -1,   593,   295,
     594,    -1,   593,   819,   594,    -1,   818,    -1,   817,   595,
     818,    -1,   819,    -1,  1045,    -1,    -1,   593,   821,   594,
      -1,   822,    -1,   821,   595,   822,    -1,    -1,   493,   823,
     824,   825,    -1,  1320,    -1,    -1,   826,    -1,   826,   827,
      -1,   827,    -1,   502,  1208,  1320,    -1,  1247,   145,  1208,
     845,    -1,   329,  1208,  1158,    -1,   290,  1208,  1160,    -1,
     307,  1208,  1160,    -1,   100,   123,  1208,  1315,    -1,   213,
     123,  1208,  1315,    -1,    71,  1208,  1315,    -1,    -1,    -1,
     440,   829,  1031,  1035,   830,   849,    -1,    -1,    18,    -1,
      -1,   833,    -1,   834,    -1,   833,   834,    -1,   844,    -1,
     843,    -1,    -1,   836,    -1,   837,    -1,   837,   836,    -1,
     507,    -1,    -1,   209,  1048,   156,    -1,    -1,   841,    -1,
     842,    -1,   842,   840,    -1,   842,    -1,   842,   841,    -1,
     842,   595,   841,    -1,   145,  1208,   845,    -1,   530,  1208,
     845,    -1,   290,  1208,  1159,    -1,   307,  1208,  1159,    -1,
      26,  1208,  1157,    -1,   368,  1208,  1315,    -1,    71,  1208,
    1315,    -1,    25,  1208,  1159,    -1,   360,  1208,  1157,    -1,
     360,  1208,   114,    -1,    60,  1208,  1157,    -1,   506,  1208,
    1157,    -1,   117,  1208,  1157,    -1,   432,  1208,   847,    -1,
     541,  1208,   593,  1266,   594,    -1,   843,    -1,   844,    -1,
     222,  1208,   848,    -1,   100,   123,  1208,  1315,    -1,   213,
     123,  1208,  1315,    -1,   502,  1318,    -1,   487,   126,    -1,
     487,   300,    -1,    79,  1208,  1315,    -1,   237,  1208,  1157,
      -1,   892,   883,  1208,   885,    -1,   892,    67,  1208,   891,
      -1,  1320,    -1,  1320,    -1,   114,    -1,   169,    -1,   135,
      -1,    76,    -1,   401,    -1,    74,    -1,   334,    -1,   168,
      -1,   241,    -1,  1152,    -1,  1030,  1034,    -1,   489,    -1,
     396,    -1,   112,    -1,   226,    -1,   852,    -1,   851,   595,
     852,    -1,   853,    -1,   854,    -1,   859,   855,    -1,   859,
     897,    -1,   905,   929,   914,   593,   927,   594,   915,    -1,
     911,   908,   929,   913,   593,   927,   594,   916,    -1,   912,
     908,   929,   913,   593,   927,   594,   917,    -1,   857,   906,
     929,   914,   593,   927,   594,   915,    -1,   857,   174,   238,
     929,   593,   927,   594,   897,    -1,   858,   855,    -1,   857,
     856,    -1,    -1,   856,    -1,    61,  1042,    -1,    -1,   858,
      -1,    82,   929,    -1,    -1,  1310,   860,   861,   879,    -1,
     869,   877,   873,    -1,   870,   878,   873,    -1,   171,   871,
     873,    -1,    39,    -1,    39,   876,    -1,    44,    -1,    43,
      -1,   865,   876,   893,    -1,   865,   893,    -1,   866,   876,
     894,    -1,   866,   894,    -1,    33,   876,    -1,    33,    -1,
     867,   876,   893,    -1,   868,   876,   894,    -1,   561,   876,
      -1,   582,   877,   873,    -1,   104,    -1,   517,    -1,   514,
     877,    -1,   101,    -1,   518,    -1,    41,   877,    -1,   864,
      -1,   296,    -1,   263,    -1,   266,   561,    -1,   266,   867,
     893,    -1,   520,   893,    -1,   511,   877,   893,    -1,   298,
     893,    -1,   264,   893,    -1,   112,   871,   873,    -1,   339,
     871,   873,    -1,   169,   871,   873,    -1,    -1,   146,   862,
     593,   931,   594,   893,    -1,    -1,   448,   863,   593,   931,
     594,   893,    -1,   266,   893,    -1,   444,    -1,   184,    -1,
     183,    -1,   372,    -1,   315,    -1,   254,    -1,   314,    -1,
     373,    -1,   316,    -1,    59,    -1,   323,    -1,   320,    59,
      -1,   865,   565,    -1,   562,    -1,   320,   562,    -1,   340,
      -1,   323,   562,    -1,   320,    59,   565,    -1,   323,   565,
      -1,   226,    -1,   519,    -1,   458,    -1,   297,    -1,    32,
      -1,   396,    -1,   129,    -1,   129,   376,    -1,    -1,   876,
      -1,   872,    -1,   593,   338,   595,   338,   594,    -1,    -1,
     874,    -1,   874,   875,    -1,   875,    -1,   455,    -1,   546,
      -1,   583,    -1,   593,   265,   594,    -1,   593,   532,   594,
      -1,   593,   111,   594,    -1,   593,   338,   594,    -1,    -1,
     876,    -1,    -1,   872,    -1,    -1,   880,    -1,   880,   881,
      -1,   881,    -1,   337,    -1,  1048,   337,    -1,   114,   882,
      -1,   343,   548,   333,  1041,    -1,    25,    -1,   444,   114,
     560,    -1,   896,   238,    -1,   542,    -1,   542,   238,    -1,
      71,  1315,    -1,    67,   889,    -1,   333,  1041,    -1,  1301,
      -1,    59,   448,    -1,    58,    -1,  1320,    -1,    33,    -1,
     884,    -1,   114,    -1,    -1,   883,   885,    -1,  1320,    -1,
      33,    -1,   887,    -1,   114,    -1,  1320,    -1,    -1,    67,
     891,    -1,   889,    -1,   114,    -1,    -1,   114,    -1,    -1,
      20,   894,    -1,    48,    -1,   539,   894,    -1,   883,   884,
     894,    -1,    33,   895,    -1,    -1,    33,    -1,    -1,    20,
      -1,   539,    -1,   883,   884,    -1,    -1,   380,    -1,    -1,
     402,  1311,   898,   899,    -1,   901,    -1,   593,   900,   594,
     901,    -1,   900,   595,  1318,    -1,  1318,    -1,    -1,   902,
      -1,   902,   903,    -1,   903,    -1,   343,   118,   904,    -1,
     343,   548,   904,    -1,   287,   179,    -1,   287,   364,    -1,
     287,   456,    -1,   421,    -1,    51,    -1,   448,   337,    -1,
     334,     5,    -1,   448,   114,    -1,   907,    -1,   380,   238,
      -1,   542,   908,    -1,   238,    -1,   213,    -1,    -1,   907,
      -1,   236,    -1,   213,    -1,   212,    -1,    -1,   542,    -1,
     180,    -1,   464,    -1,    -1,   913,    -1,   913,   921,    -1,
      -1,   918,    -1,    -1,   920,    -1,    -1,   919,    -1,   923,
      -1,   918,   923,    -1,   924,    -1,   919,   924,    -1,   925,
      -1,   920,   925,    -1,   555,   926,    -1,   530,   926,    -1,
     237,  1208,  1157,    -1,   922,    -1,   921,    -1,   922,    -1,
     922,    -1,   574,   363,  1314,    -1,    46,    -1,   434,    -1,
     194,    -1,   927,   595,   928,  1150,    -1,   928,  1150,    -1,
    1318,    -1,  1318,   593,   338,   594,    -1,    -1,  1310,    -1,
      -1,   601,  1318,    -1,  1299,    -1,   931,   595,  1299,    -1,
      -1,    13,   966,   505,  1311,   933,   944,    -1,    -1,    13,
      97,   943,   934,   833,    -1,    13,    97,  1318,   549,   100,
     123,   319,    -1,    -1,    13,   382,   649,   935,   650,    -1,
      -1,    13,   181,   649,   936,   650,    -1,    -1,    13,  1416,
    1411,   937,  1418,    -1,    -1,    13,  1411,   938,  1418,    -1,
      -1,    13,  1411,   153,   649,   939,   940,   941,   639,   644,
     942,    -1,    13,   502,   740,    -1,    13,   261,   190,   742,
      -1,    13,   502,   737,    -1,    13,   502,   736,    -1,    13,
     446,  1320,   348,   593,   633,   594,    -1,    -1,   343,   436,
     637,    -1,   643,    -1,   343,   436,   637,   643,    -1,    -1,
     410,   521,   649,    -1,    -1,   130,   645,    -1,    -1,  1318,
      -1,    -1,   125,   502,    -1,   211,   502,    -1,   959,   784,
      -1,   959,   948,    -1,   948,    -1,   785,    -1,   950,    -1,
     131,   367,   957,    -1,   397,   367,  1003,   949,    -1,    -1,
     347,   367,  1003,   949,   945,  1003,    -1,    14,   367,  1003,
     949,    -1,    -1,    61,   367,   949,   946,   998,    -1,    -1,
     412,   367,  1003,   949,   947,   990,    -1,    65,   367,  1003,
    1158,    -1,   953,    -1,   409,   365,    -1,    12,    -1,   957,
      -1,    -1,     6,   367,  1003,   951,   952,    -1,    -1,   593,
     809,   594,    -1,   366,  1158,    -1,    -1,   411,   367,  1003,
     954,   955,    -1,    -1,    -1,   957,   956,   225,   593,   809,
     594,    -1,   958,    -1,   957,   595,   958,    -1,  1318,    -1,
     961,    -1,   959,   595,   961,    -1,     6,   965,    -1,   960,
     853,   968,    -1,     6,   854,    -1,   960,   593,   851,   594,
      -1,    -1,    56,   965,  1310,   962,   859,   968,    -1,    -1,
      -1,   311,   965,  1310,   963,   861,   879,   964,   968,    -1,
     131,   965,  1310,   967,    -1,   131,   174,   238,   929,    -1,
     131,   380,   238,    -1,   131,   907,  1310,    -1,   124,   236,
      -1,   139,   236,    -1,    13,   965,  1310,   448,   114,  1301,
      -1,    13,   965,  1310,   131,   114,    -1,   410,   969,  1311,
      -1,    87,   521,   883,   885,   890,    -1,   840,    -1,   173,
      -1,  1143,    -1,    -1,    70,    -1,    -1,   210,    -1,    -1,
     421,    -1,    51,    -1,    -1,     8,  1318,    -1,   168,    -1,
      -1,   521,    -1,   147,    -1,    18,    -1,    -1,   480,   457,
     975,   971,   979,    -1,   486,   457,   975,    -1,    -1,   457,
     480,   975,   972,   979,    -1,   457,   486,   975,    -1,   480,
     523,   974,    -1,    -1,   574,    81,   459,    -1,    -1,   976,
     977,    -1,   978,    -1,   977,   595,   978,    -1,    -1,   476,
      -1,   406,    -1,    -1,   547,   980,    -1,   624,    -1,   980,
     595,   624,    -1,    -1,   420,  1344,   982,  1181,   178,  1315,
      -1,    -1,    28,  1344,   984,  1181,   521,  1315,    -1,    -1,
      60,  1344,   986,  1181,   987,    -1,    -1,   390,    -1,   159,
      -1,    -1,   412,  1003,  1344,   989,  1181,   990,    -1,    -1,
     991,    -1,   992,    -1,   992,   991,    -1,   390,    -1,   159,
      -1,   553,    -1,    -1,    14,  1003,  1344,   994,  1181,    -1,
      34,  1315,    -1,    -1,    61,  1344,   997,  1181,   998,    -1,
      -1,   999,    -1,  1000,    -1,  1000,   999,    -1,   390,    -1,
     164,    -1,   299,    -1,   159,    -1,    57,    -1,   175,   549,
      -1,    -1,   347,  1003,  1344,  1002,  1181,    -1,    -1,   336,
      -1,   257,    -1,    -1,   410,  1344,  1005,  1007,    -1,   410,
     551,   648,  1006,    -1,  1321,   521,  1321,    -1,  1006,   595,
    1321,   521,  1321,    -1,  1008,    -1,  1007,   595,  1008,    -1,
    1311,   521,  1311,    -1,    49,   213,  1010,   228,  1012,    -1,
    1011,    -1,  1010,   595,  1011,    -1,  1311,  1017,    -1,  1318,
      -1,   114,    -1,    -1,   256,   213,   225,    49,  1014,  1015,
      -1,  1016,    -1,  1015,   595,  1016,    -1,  1311,  1017,  1020,
      -1,    -1,  1018,  1019,    -1,    -1,   907,   593,  1124,   594,
      -1,    -1,   210,   244,    -1,  1022,    -1,   440,  1024,    -1,
     593,  1023,   594,  1399,    -1,   440,  1026,    -1,   593,  1023,
     594,    -1,    -1,  1026,  1025,  1396,    -1,    -1,    -1,  1027,
    1031,  1035,  1028,  1029,  1034,    -1,  1146,  1152,    -1,  1172,
      -1,  1030,    -1,  1172,  1030,    -1,  1030,  1172,    -1,   178,
    1092,  1135,  1140,  1137,  1146,  1152,  1163,    -1,   178,   132,
    1135,  1152,    -1,    -1,  1032,    -1,  1032,  1033,    -1,  1033,
      -1,   488,    -1,   198,    -1,   127,    -1,   474,    -1,   469,
      -1,   470,    -1,   472,    -1,   473,    -1,   471,    -1,    12,
      -1,    -1,   175,   548,    -1,   260,   228,   450,   309,    -1,
    1035,   595,  1036,    -1,  1036,    -1,   588,    -1,  1037,  1039,
    1038,  1040,    -1,    -1,    -1,  1305,    -1,  1042,    -1,    -1,
      18,  1318,    -1,    18,  1315,    -1,  1318,    -1,  1315,    -1,
      -1,   593,   594,    -1,  1042,  1046,  1042,    -1,  1042,   580,
    1042,    -1,  1042,  1047,  1042,    -1,   332,  1042,    -1,  1043,
     231,   527,    -1,  1043,   231,  1048,   527,    -1,  1043,   231,
     163,    -1,  1043,   231,  1048,   163,    -1,  1043,   231,   543,
      -1,  1043,   231,  1048,   543,    -1,  1043,    -1,  1043,   231,
     337,    -1,  1043,   231,  1048,   337,    -1,  1043,   148,  1044,
      -1,  1043,  1050,  1044,    -1,  1043,  1050,  1051,   593,  1405,
     594,    -1,  1044,    -1,  1045,   228,   593,  1405,   594,    -1,
    1045,  1048,   228,   593,  1405,   594,    -1,  1045,   228,   593,
    1042,   594,    -1,  1045,   228,   593,  1042,   595,  1085,   594,
      -1,  1045,  1048,   228,   593,  1042,   594,    -1,  1045,  1048,
     228,   593,  1042,   595,  1085,   594,    -1,  1045,    31,  1045,
      16,  1044,    -1,  1045,  1048,    31,  1045,    16,  1044,    -1,
    1045,   462,   250,  1045,    -1,  1045,   250,  1052,  1139,    -1,
    1045,  1048,   250,  1052,  1139,    -1,  1045,   403,  1045,    -1,
    1045,  1048,   403,  1045,    -1,  1045,    -1,  1045,   584,  1045,
      -1,  1045,   585,  1045,    -1,  1045,   451,  1045,    -1,  1045,
     452,  1045,    -1,  1045,   587,  1045,    -1,  1045,   586,  1045,
      -1,  1045,   587,   224,  1042,  1128,    -1,  1045,   586,   224,
    1042,  1128,    -1,  1045,   588,  1045,    -1,  1045,   589,  1045,
      -1,  1045,   590,  1045,    -1,  1045,   128,  1045,    -1,  1045,
     312,  1045,    -1,  1045,   591,  1045,    -1,  1052,    -1,   354,
      -1,   351,    -1,    16,    -1,    15,    -1,   332,    -1,   331,
      -1,   596,    -1,   331,    -1,   147,    -1,   182,    -1,   192,
      -1,   242,    -1,   269,    -1,   325,    -1,    12,    -1,    17,
      -1,  1307,    -1,  1053,    -1,  1054,    -1,  1057,    -1,  1055,
      -1,  1052,    67,  1320,    -1,  1302,    -1,  1300,    -1,  1075,
      -1,  1065,    -1,  1052,   353,  1052,    -1,   587,  1052,    -1,
     586,  1052,    -1,   592,  1052,    -1,  1049,  1052,    -1,   593,
    1405,   594,    -1,   593,  1042,   594,    -1,   593,  1042,   595,
    1085,   594,    -1,   433,   593,  1042,   595,  1085,   594,    -1,
     156,   593,  1405,   594,    -1,   597,  1318,  1042,   598,    -1,
     287,  1086,     9,   593,  1045,  1059,   594,    -1,    33,  1052,
      -1,    54,   593,  1042,    18,  1083,   594,    -1,    53,  1088,
    1090,  1089,   141,    -1,    87,   593,  1042,   595,  1083,   594,
      -1,    87,   593,  1042,   555,   884,   594,    -1,   114,   593,
    1307,   594,    -1,   559,   593,  1308,   594,    -1,   224,  1042,
    1128,   587,  1042,    -1,    59,   593,  1085,   594,    -1,    59,
     593,  1085,   555,   884,   594,    -1,    94,  1041,    -1,   104,
     593,  1042,   594,    -1,   109,   593,  1042,   594,    -1,   204,
     593,  1042,   594,    -1,   221,   593,  1042,   595,  1042,   595,
    1042,   595,  1042,   594,    -1,   224,   593,  1042,   595,  1042,
     594,    -1,   224,   593,  1042,   595,  1042,   595,  1085,   594,
      -1,   246,   593,  1042,   595,  1042,   594,    -1,   306,   593,
    1042,   594,    -1,   313,   593,  1042,   594,    -1,   426,   593,
    1042,   595,  1042,   594,    -1,   438,   593,  1042,   594,    -1,
     517,   593,  1042,   594,    -1,   514,   593,  1042,   594,    -1,
     514,   593,  1042,   595,  1042,   594,    -1,   526,   593,  1042,
     594,    -1,   526,   593,   243,  1042,   178,  1042,   594,    -1,
     526,   593,   522,  1042,   178,  1042,   594,    -1,   526,   593,
      45,  1042,   178,  1042,   594,    -1,   526,   593,   243,   178,
    1042,   594,    -1,   526,   593,   522,   178,  1042,   594,    -1,
     526,   593,    45,   178,  1042,   594,    -1,   526,   593,  1042,
     178,  1042,   594,    -1,   551,   593,   594,    -1,   582,   593,
    1042,   594,    -1,     7,   593,  1042,   595,  1042,   594,    -1,
       7,   593,  1042,   595,   224,  1042,  1128,   594,    -1,    93,
    1041,    -1,    96,  1041,    -1,    96,   593,  1042,   594,    -1,
     102,   593,  1042,   595,   224,  1042,  1128,   594,    -1,   103,
     593,  1042,   595,   224,  1042,  1128,   594,    -1,   161,   593,
    1128,   178,  1042,   594,    -1,   185,   593,  1131,   595,  1042,
     594,    -1,   333,  1041,    -1,   333,   593,  1042,   594,    -1,
     375,   593,  1045,   228,  1042,   594,    -1,   490,   593,  1042,
     595,  1042,   594,    -1,   490,   593,  1042,   595,   224,  1042,
    1128,   594,    -1,   494,   593,  1042,   595,  1042,   595,  1042,
     594,    -1,   494,   593,  1042,   595,  1042,   594,    -1,   494,
     593,  1042,   178,  1042,   175,  1042,   594,    -1,   494,   593,
    1042,   178,  1042,   594,    -1,   500,  1041,    -1,   500,   593,
    1042,   594,    -1,   515,   593,  1129,   595,  1042,   595,  1042,
     594,    -1,   516,   593,  1129,   595,  1042,   595,  1042,   594,
      -1,   556,  1041,    -1,   558,  1041,    -1,   557,  1041,    -1,
      20,   593,  1042,   594,    -1,    58,   593,  1042,   594,    -1,
      65,   593,  1085,   594,    -1,    68,   593,  1042,   594,    -1,
      97,   593,   594,    -1,   209,   593,  1042,   595,  1042,   595,
    1042,   594,    -1,   302,   593,  1042,   594,    -1,   312,   593,
    1042,   595,  1042,   594,    -1,   342,   593,  1042,   594,    -1,
     368,   593,  1042,   594,    -1,   388,   593,  1042,   594,    -1,
     414,   593,  1042,   595,  1042,   594,    -1,   415,   593,  1042,
     595,  1042,   595,  1042,   594,    -1,   528,   593,  1042,   595,
    1042,   594,    -1,   570,   593,  1042,   594,    -1,   570,   593,
    1042,   595,  1042,   594,    -1,  1056,    -1,    83,   593,  1042,
     595,  1042,   594,    -1,   183,   593,  1085,   594,    -1,   254,
     593,  1085,   594,    -1,   314,   593,  1085,   594,    -1,   315,
     593,  1085,   594,    -1,   316,   593,  1085,   594,    -1,   372,
     593,  1042,   595,  1042,   594,    -1,   373,   593,  1085,   594,
      -1,    -1,  1314,   593,  1058,  1062,   594,    -1,  1318,   601,
    1318,   593,  1084,   594,    -1,  1060,  1061,    -1,   228,    43,
     309,    -1,    -1,   228,   321,   240,   309,    -1,    -1,   574,
     389,   158,    -1,    -1,  1063,    -1,  1064,    -1,  1063,   595,
    1064,    -1,  1037,  1042,  1038,  1040,    -1,    27,   593,  1081,
     594,    -1,    27,   593,   127,  1081,   594,    -1,    37,   593,
    1081,   594,    -1,    38,   593,  1081,   594,    -1,    40,   593,
    1081,   594,    -1,    88,   593,  1134,   588,   594,    -1,    88,
     593,  1081,   594,    -1,    -1,    -1,    88,   593,   127,  1066,
    1085,  1067,   594,    -1,    -1,    -1,   355,   593,  1068,  1085,
    1069,   594,    -1,    -1,    -1,   545,   593,  1070,  1085,  1071,
     594,    -1,    -1,    -1,   194,   593,  1072,  1085,  1073,   594,
      -1,   308,   593,  1081,   594,    -1,   308,   593,   127,  1081,
     594,    -1,   292,   593,  1081,   594,    -1,   292,   593,   127,
    1081,   594,    -1,   485,   593,  1081,   594,    -1,   564,   593,
    1081,   594,    -1,   484,   593,  1081,   594,    -1,   566,   593,
    1081,   594,    -1,   495,   593,  1081,   594,    -1,   495,   593,
     127,  1081,   594,    -1,    -1,   191,   593,  1078,  1074,  1085,
    1080,  1079,   594,    -1,    -1,   600,  1076,  1077,    -1,  1320,
     449,  1042,    -1,  1320,    -1,   600,  1333,  1320,   930,    -1,
      -1,   127,    -1,    -1,   442,  1299,    -1,    -1,  1147,    -1,
      -1,  1134,  1082,  1042,    -1,    33,   877,    -1,    59,   877,
     893,    -1,   323,   877,    -1,   455,    -1,   455,   226,    -1,
     546,    -1,   546,   226,    -1,   104,    -1,   517,    -1,   101,
      -1,   112,   871,    -1,    -1,  1085,    -1,  1042,    -1,  1085,
     595,  1042,    -1,  1087,    -1,   593,  1087,   594,    -1,  1307,
      -1,  1087,   595,  1307,    -1,    -1,  1042,    -1,    -1,   137,
    1042,    -1,   571,  1042,   513,  1042,    -1,  1090,   571,  1042,
     513,  1042,    -1,  1104,    -1,  1095,    -1,  1094,    -1,  1091,
      -1,   597,  1318,  1091,   598,    -1,  1093,    -1,  1094,   595,
    1093,    -1,  1091,  1103,  1091,    -1,  1091,   488,  1104,    -1,
      -1,  1091,  1103,  1091,   343,  1096,  1042,    -1,    -1,  1091,
     488,  1104,   343,  1097,  1042,    -1,    -1,  1091,  1103,  1091,
     555,  1098,   593,  1127,   594,    -1,  1091,   321,   235,  1104,
      -1,    -1,  1091,   246,  1113,   235,  1091,   343,  1099,  1042,
      -1,    -1,  1091,   246,  1113,   235,  1104,  1100,   555,   593,
    1127,   594,    -1,  1091,   321,   246,  1113,   235,  1104,    -1,
      -1,  1091,   426,  1113,   235,  1091,   343,  1101,  1042,    -1,
      -1,  1091,   426,  1113,   235,  1104,  1102,   555,   593,  1127,
     594,    -1,  1091,   321,   426,  1113,   235,  1104,    -1,   235,
      -1,   217,   235,    -1,    91,   235,    -1,    -1,  1105,  1311,
    1133,  1122,    -1,  1112,  1111,  1108,    -1,   593,  1111,  1106,
    1399,   594,  1133,    -1,    -1,  1111,  1107,  1094,    -1,    -1,
      -1,  1109,  1031,  1035,  1110,   849,    -1,    -1,   440,    -1,
      -1,   356,    -1,    -1,   175,   235,    -1,   175,   352,    47,
      -1,   175,   190,    47,    -1,   173,    -1,   210,    -1,    -1,
    1115,   907,  1114,  1117,   593,  1126,   594,    -1,    -1,   554,
     907,  1114,  1118,   593,  1124,   594,    -1,  1116,    -1,  1119,
    1116,    -1,    -1,    -1,  1121,  1119,    -1,    -1,  1123,  1120,
      -1,    -1,  1126,    -1,  1318,    -1,   380,    -1,  1125,    -1,
    1126,   595,  1125,    -1,  1318,    -1,  1127,   595,  1318,    -1,
    1130,    -1,   105,    -1,   106,    -1,   107,    -1,   108,    -1,
     201,    -1,   202,    -1,   203,    -1,   304,    -1,   305,    -1,
     437,    -1,   581,    -1,  1130,    -1,   177,    -1,   109,    -1,
     570,    -1,   204,    -1,   306,    -1,   313,    -1,   388,    -1,
     438,    -1,   302,    -1,   582,    -1,   104,    -1,   517,    -1,
     101,    -1,   514,    -1,    -1,    18,    -1,   147,    -1,    -1,
    1132,  1318,    -1,    -1,    12,    -1,    -1,    -1,   572,  1136,
    1042,    -1,    -1,    -1,   195,  1138,  1042,    -1,   151,  1052,
      -1,    -1,    -1,   190,    47,  1141,  1142,    -1,  1141,   595,
    1306,  1150,    -1,  1306,  1150,    -1,    -1,   574,    92,    -1,
     574,   429,    -1,   352,    47,  1144,    -1,  1144,   595,  1145,
      -1,  1145,    -1,  1308,  1150,    -1,    -1,  1147,    -1,    -1,
     352,    47,  1148,  1149,    -1,  1149,   595,  1306,  1150,    -1,
    1306,  1150,    -1,    -1,    19,    -1,   119,    -1,    -1,  1153,
      -1,    -1,  1153,    -1,   251,  1154,    -1,  1155,    -1,  1155,
     595,  1155,    -1,  1155,   341,  1155,    -1,  1300,    -1,   532,
      -1,   265,    -1,   338,    -1,    -1,   251,  1155,    -1,   338,
      -1,   197,    -1,   265,    -1,   532,    -1,   111,    -1,   170,
      -1,   338,    -1,   197,    -1,   265,    -1,   532,    -1,  1161,
      -1,   338,    -1,   532,    -1,   265,    -1,   111,    -1,   170,
      -1,   338,    -1,   532,    -1,   265,    -1,  1161,    -1,  1162,
      -1,   111,    -1,   170,    -1,    -1,    -1,   382,  1318,  1164,
     593,  1165,   594,    -1,    -1,  1166,    -1,  1166,   595,  1167,
      -1,  1167,    -1,  1037,  1042,  1038,    -1,    -1,  1169,  1170,
      -1,  1170,   595,  1171,    -1,  1171,    -1,   600,  1320,    -1,
    1320,    -1,    -1,   225,  1173,  1174,    -1,    -1,    -1,   357,
    1317,  1175,   886,  1176,  1287,  1290,    -1,   133,  1317,    -1,
    1168,    -1,    -1,   130,  1178,  1085,    -1,   131,  1187,  1344,
    1186,  1181,   967,    -1,    -1,   131,   213,  1318,   343,  1311,
    1180,    -1,   131,    97,  1186,  1318,    -1,   131,   181,  1186,
    1318,   601,  1318,    -1,   131,   181,  1186,  1318,    -1,   131,
     382,  1186,   649,    -1,   131,  1183,   551,   648,  1374,    -1,
     131,   567,  1186,  1181,   967,    -1,   131,   153,  1186,   649,
      -1,   131,   525,  1186,   649,    -1,   131,   502,   763,   774,
     775,    -1,   131,   261,   190,   764,   774,   775,    -1,   131,
     446,  1186,  1320,    -1,  1182,    -1,  1181,   595,  1182,    -1,
    1311,    -1,    -1,   270,    -1,  1185,    -1,  1184,   595,  1185,
      -1,  1312,    -1,    -1,   209,   156,    -1,    -1,   507,    -1,
      -1,    -1,   221,  1189,  1194,   966,  1196,  1190,  1198,  1214,
      -1,    -1,    -1,   415,  1192,  1195,  1196,  1193,  1198,    -1,
      -1,   268,    -1,   116,    -1,   198,    -1,  1223,    -1,   116,
      -1,   225,  1197,    -1,  1197,    -1,  1182,    -1,  1201,    -1,
     593,   594,  1201,    -1,   593,  1200,   594,  1201,    -1,    -1,
     448,  1199,  1205,    -1,  1200,   595,  1304,    -1,  1304,    -1,
     559,  1204,    -1,   560,  1204,    -1,    -1,   828,  1202,  1396,
      -1,    -1,   593,   828,   594,  1203,  1399,    -1,  1204,   595,
    1209,    -1,  1209,    -1,  1205,   595,  1206,    -1,  1206,    -1,
    1308,  1207,  1213,    -1,   147,    -1,   449,    -1,    -1,  1207,
      -1,    -1,   593,  1210,  1211,   594,    -1,    -1,  1212,    -1,
    1212,   595,  1213,    -1,  1213,    -1,  1042,    -1,   114,    -1,
      -1,    -1,   343,   134,  1215,   238,   548,  1221,    -1,    -1,
      -1,   548,  1217,  1223,   966,  1092,   448,  1219,  1218,  1135,
    1146,  1156,    -1,  1219,   595,  1220,    -1,  1220,    -1,  1308,
    1207,  1213,    -1,  1221,   595,  1222,    -1,  1222,    -1,  1308,
    1207,  1213,    -1,    -1,   268,    -1,    -1,   118,  1225,  1233,
    1226,    -1,    -1,   178,  1311,  1227,  1135,  1146,  1156,    -1,
      -1,  1230,  1228,   178,  1092,  1135,    -1,    -1,   178,  1184,
    1229,   555,  1092,  1135,    -1,  1231,    -1,  1230,   595,  1231,
      -1,  1318,  1232,  1133,    -1,  1318,   601,  1318,  1232,  1133,
      -1,    -1,   601,   588,    -1,    -1,  1234,  1233,    -1,   390,
      -1,   268,    -1,   210,    -1,   528,  1236,  1182,    -1,    -1,
     505,    -1,    -1,  1238,    -1,  1239,    -1,  1238,   595,  1239,
      -1,    89,    -1,   300,    -1,    42,   229,    -1,    84,   499,
      -1,   361,   165,    -1,   230,    -1,   498,    -1,   463,    -1,
      12,    -1,    -1,   175,   389,   338,    -1,    -1,   453,  1242,
    1243,    -1,    98,  1254,    -1,  1249,   501,  1248,  1254,    -1,
    1249,   524,  1248,  1254,    -1,   152,  1248,  1254,    -1,   505,
     483,  1248,  1254,    -1,   346,   501,  1248,  1254,    -1,  1249,
     371,    -1,   370,    -1,   145,   846,  1245,    -1,   145,    12,
    1245,    -1,  1249,    69,  1251,  1311,  1248,  1254,    -1,   327,
     285,   175,   457,   574,   273,   147,  1315,    16,   274,   147,
    1159,    16,   277,   147,  1157,    -1,  1246,   262,    -1,   457,
     200,    -1,    -1,    34,   152,  1252,  1253,  1244,  1151,    -1,
      34,   215,   175,  1159,    -1,   909,  1251,  1311,  1248,  1135,
      -1,    70,   529,    -1,   505,   529,    -1,  1247,   144,    -1,
      23,    -1,    86,    -1,   381,    -1,    88,   593,   588,   594,
     569,    -1,    88,   593,   588,   594,   149,    -1,   569,  1151,
      -1,   149,  1151,    -1,   386,    -1,   385,  1237,  1240,  1151,
      -1,  1250,   481,   483,  1254,    -1,  1332,   483,  1254,    -1,
     218,   483,    -1,   317,   483,    -1,  1249,   384,    -1,  1332,
     563,  1254,    -1,   883,  1254,    -1,    68,  1254,    -1,   189,
      -1,   189,   175,  1321,    -1,    90,    97,   838,  1318,    -1,
      90,   505,  1311,    -1,    90,   567,  1311,    -1,   285,   483,
      -1,   457,   483,    -1,    90,   382,   649,    -1,    90,   181,
     649,    -1,    90,   525,   649,    -1,   382,   483,  1254,    -1,
     181,   483,  1254,    -1,   504,    -1,   552,    -1,   382,    66,
     649,    -1,   181,    66,   649,    -1,    90,   153,   649,    -1,
     483,    -1,   317,    -1,   262,    -1,   285,    -1,    33,    -1,
      -1,   487,    -1,    -1,  1251,  1318,    -1,    -1,   179,    -1,
      -1,    57,    -1,   178,    -1,   228,    -1,    -1,   228,  1315,
      -1,    -1,   178,  1159,    -1,    -1,   250,  1315,    -1,   572,
    1042,    -1,    -1,  1258,  1311,  1256,  1260,    -1,    -1,  1258,
    1259,  1257,  1021,    -1,   119,    -1,   120,    -1,    -1,   159,
      -1,   366,    -1,    -1,  1299,    -1,  1318,    -1,    -1,   172,
    1003,  1262,  1263,    -1,  1263,   595,  1264,    -1,  1264,    -1,
      -1,  1344,  1265,  1266,    -1,   501,   574,   394,   260,    -1,
     389,    49,    -1,   200,    -1,   381,    -1,   262,    -1,   483,
      -1,   482,    -1,   457,    -1,   285,    -1,   121,    -1,   419,
      -1,   504,    -1,   552,    -1,    -1,  1181,    -1,    -1,   418,
    1268,  1269,    -1,  1269,   595,  1270,    -1,  1270,    -1,   457,
      -1,   285,    -1,   389,    49,    -1,    -1,   387,  1272,  1273,
      -1,  1246,   262,  1274,    -1,   521,  1315,    -1,    29,  1042,
      -1,   239,  1276,  1042,    -1,    -1,    79,    -1,   389,    -1,
     208,    -1,   554,  1318,    -1,    -1,   256,   100,  1279,  1280,
      -1,   256,   505,  1311,   178,   285,    -1,    -1,    -1,    -1,
    1285,  1284,   214,  1317,  1281,  1286,   225,   505,  1311,  1282,
     886,  1283,  1287,  1290,  1293,  1294,  1297,    -1,   178,   285,
      -1,    -1,   257,    -1,    -1,    77,    -1,   268,    -1,    -1,
     415,    -1,   210,    -1,    -1,    69,  1288,    -1,  1288,  1289,
      -1,  1289,    -1,   509,    47,  1299,    -1,   350,   140,    47,
    1299,    -1,   140,    47,  1299,    -1,   150,    47,  1299,    -1,
      -1,   253,  1291,    -1,  1291,  1292,    -1,  1292,    -1,   509,
      47,  1299,    -1,   478,    47,  1299,    -1,    -1,   210,   338,
     253,    -1,    -1,   593,  1295,   594,    -1,   593,   594,    -1,
    1295,   595,  1296,    -1,  1296,    -1,  1308,    -1,   600,  1320,
      -1,    -1,   448,  1221,    -1,   510,    -1,   322,    -1,   535,
     510,    -1,  1298,  1316,    -1,  1316,    -1,   197,    -1,    36,
      -1,   362,    -1,  1302,    -1,   587,  1303,    -1,   586,  1303,
      -1,  1298,    -1,  1303,    -1,   337,    -1,   163,    -1,   527,
      -1,   197,    -1,    36,    -1,   535,   197,    -1,   535,    36,
      -1,   104,  1298,    -1,   517,  1298,    -1,   514,  1298,    -1,
     338,    -1,   265,    -1,   532,    -1,   111,    -1,   170,    -1,
    1308,    -1,  1305,    -1,  1318,   601,   588,    -1,  1318,   601,
    1318,   601,   588,    -1,  1042,    -1,  1318,    -1,  1309,    -1,
    1318,    -1,  1309,    -1,  1318,   601,  1318,    -1,   601,  1318,
     601,  1318,    -1,  1318,   601,  1318,   601,  1318,    -1,  1318,
      -1,  1318,   601,  1318,   601,  1318,    -1,  1318,   601,  1318,
      -1,   601,  1318,    -1,  1318,    -1,  1318,   601,  1318,    -1,
     601,  1318,    -1,  1318,  1232,    -1,  1318,   601,  1318,  1232,
      -1,  1318,    -1,   205,    -1,   207,    -1,   510,    -1,   510,
      -1,   510,    -1,  1314,    -1,  1322,    -1,  1314,    -1,  1323,
      -1,  1318,    -1,  1315,    -1,   249,    -1,  1320,    -1,  1320,
     600,  1320,    -1,    94,  1041,    -1,  1323,    -1,    20,    -1,
      28,    -1,    30,    -1,    48,    -1,    49,    -1,    58,    -1,
      60,    -1,    64,    -1,    71,    -1,    73,    -1,    83,    -1,
     110,    -1,   130,    -1,   141,    -1,   155,    -1,   172,    -1,
     187,    -1,   193,    -1,   196,    -1,   199,    -1,   223,    -1,
     240,    -1,   270,    -1,   334,    -1,   346,    -1,   348,    -1,
     355,    -1,   359,    -1,   363,    -1,   367,    -1,   374,    -1,
     377,    -1,   409,    -1,   412,    -1,   418,    -1,   420,    -1,
     427,    -1,   428,    -1,   435,    -1,   439,    -1,   446,    -1,
     455,    -1,   460,    -1,   457,    -1,   461,    -1,   480,    -1,
     486,    -1,   528,    -1,   539,    -1,   540,    -1,   545,    -1,
     576,    -1,   579,    -1,   549,    -1,     5,    -1,     7,    -1,
       8,    -1,     9,    -1,    10,    -1,    11,    -1,    17,    -1,
      22,    -1,    23,    -1,    25,    -1,    24,    -1,    26,    -1,
      27,    -1,    34,    -1,    35,    -1,    39,    -1,    42,    -1,
      44,    -1,    43,    -1,    46,    -1,    52,    -1,    55,    -1,
      57,    -1,    62,    -1,    63,    -1,    65,    -1,    66,    -1,
      68,    -1,    69,    -1,    72,    -1,    74,    -1,    75,    -1,
      76,    -1,    77,    -1,    79,    -1,    81,    -1,    84,    -1,
      86,    -1,    89,    -1,    92,    -1,   100,    -1,    99,    -1,
     101,    -1,   104,    -1,   109,    -1,   115,    -1,   117,    -1,
     121,    -1,   123,    -1,   124,    -1,   125,    -1,   126,    -1,
     133,    -1,   134,    -1,   135,    -1,   142,    -1,   146,    -1,
     145,    -1,   144,    -1,   149,    -1,   151,    -1,   153,    -1,
     152,    -1,   154,    -1,   158,    -1,   159,    -1,   160,    -1,
     162,    -1,   165,    -1,   164,    -1,   176,    -1,   139,    -1,
     179,    -1,   167,    -1,   168,    -1,   169,    -1,   177,    -1,
     184,    -1,   183,    -1,   185,    -1,   189,    -1,   186,    -1,
     194,    -1,   200,    -1,   204,    -1,   206,    -1,   208,    -1,
     227,    -1,   211,    -1,   212,    -1,   215,    -1,   216,    -1,
     229,    -1,   230,    -1,   232,    -1,   233,    -1,   218,    -1,
     222,    -1,   237,    -1,   241,    -1,   244,    -1,   247,    -1,
     248,    -1,   254,    -1,   255,    -1,   257,    -1,   259,    -1,
     261,    -1,   262,    -1,   290,    -1,   285,    -1,   272,    -1,
     276,    -1,   273,    -1,   274,    -1,   286,    -1,   275,    -1,
     277,    -1,   271,    -1,   283,    -1,   279,    -1,   278,    -1,
     280,    -1,   281,    -1,   282,    -1,   288,    -1,   289,    -1,
     291,    -1,   293,    -1,   294,    -1,   295,    -1,   299,    -1,
     300,    -1,   301,    -1,   302,    -1,   303,    -1,   306,    -1,
     307,    -1,   311,    -1,   309,    -1,   313,    -1,   314,    -1,
     315,    -1,   316,    -1,   317,    -1,   319,    -1,   318,    -1,
     320,    -1,   323,    -1,   324,    -1,   328,    -1,   327,    -1,
     335,    -1,   329,    -1,   330,    -1,   340,    -1,   341,    -1,
     342,    -1,   344,    -1,   345,    -1,   360,    -1,   361,    -1,
     364,    -1,   365,    -1,   366,    -1,   368,    -1,   369,    -1,
     371,    -1,   370,    -1,   372,    -1,   373,    -1,   378,    -1,
     379,    -1,   381,    -1,   383,    -1,   384,    -1,   385,    -1,
     386,    -1,   388,    -1,   389,    -1,   390,    -1,   393,    -1,
     397,    -1,   398,    -1,   400,    -1,   399,    -1,   401,    -1,
     404,    -1,   405,    -1,   406,    -1,   408,    -1,   411,    -1,
     413,    -1,   416,    -1,   419,    -1,   422,    -1,   423,    -1,
     429,    -1,   430,    -1,   431,    -1,   432,    -1,   433,    -1,
     434,    -1,   436,    -1,   438,    -1,   444,    -1,   443,    -1,
     445,    -1,   456,    -1,   450,    -1,   454,    -1,   459,    -1,
     462,    -1,   463,    -1,   471,    -1,   470,    -1,   473,    -1,
     476,    -1,   479,    -1,   483,    -1,   487,    -1,   489,    -1,
     490,    -1,   491,    -1,   493,    -1,   492,    -1,   496,    -1,
     497,    -1,   498,    -1,   499,    -1,   501,    -1,   506,    -1,
     504,    -1,   502,    -1,   507,    -1,   508,    -1,   511,    -1,
     512,    -1,   523,    -1,   524,    -1,   514,    -1,   515,    -1,
     516,    -1,   517,    -1,   529,    -1,   530,    -1,   531,    -1,
     181,    -1,   533,    -1,   534,    -1,   537,    -1,   536,    -1,
     543,    -1,   547,    -1,   551,    -1,   552,    -1,   553,    -1,
     563,    -1,   567,    -1,   560,    -1,   569,    -1,   568,    -1,
     570,    -1,   575,    -1,   578,    -1,   582,    -1,    -1,   448,
    1326,  1325,  1327,    -1,    -1,   349,    -1,  1328,    -1,  1327,
     595,  1328,    -1,    -1,  1329,  1334,    -1,  1331,    -1,   186,
      -1,   257,    -1,   445,    -1,    -1,   344,    -1,    -1,   186,
      -1,   257,    -1,   445,    -1,    -1,   186,   601,    -1,   257,
     601,    -1,   445,   601,    -1,  1335,    -1,  1331,  1336,    -1,
    1330,  1338,  1207,  1341,    -1,  1330,   523,   232,   248,  1339,
      -1,   600,  1320,  1207,  1042,    -1,   600,   600,  1333,  1338,
    1207,  1341,    -1,   883,   888,    -1,   318,  1207,  1042,    -1,
     318,   885,   890,    -1,   368,  1207,  1340,    -1,   368,   175,
    1321,  1207,  1340,    -1,   162,   147,  1157,    -1,    35,   147,
    1159,   595,   277,   147,  1157,  1337,    -1,    -1,   574,   418,
      -1,  1318,    -1,  1318,   601,  1318,    -1,   114,   601,  1318,
      -1,   394,   533,    -1,   394,    72,    -1,   413,   394,    -1,
     443,    -1,   510,    -1,   368,   593,   510,   594,    -1,   342,
     593,   510,   594,    -1,  1042,    -1,   114,    -1,   343,    -1,
      12,    -1,    33,    -1,    -1,   260,  1344,  1343,  1345,    -1,
     505,    -1,   501,    -1,  1346,    -1,  1345,   595,  1346,    -1,
    1311,  1133,  1347,    -1,   394,    -1,   577,    -1,   268,   577,
      -1,   394,   257,    -1,    -1,   544,  1349,  1344,    -1,   193,
    1311,   346,  1133,    -1,   193,  1313,    64,    -1,    -1,   193,
    1313,   394,  1351,  1352,  1135,  1152,    -1,  1353,    -1,  1318,
    1354,    -1,   168,    -1,   328,    -1,   168,    -1,   328,    -1,
     379,    -1,   241,    -1,    -1,  1356,  1355,   593,  1212,   594,
      -1,   147,    -1,   182,    -1,   242,    -1,   192,    -1,   269,
      -1,   425,   648,  1358,    -1,  1362,   343,  1361,  1373,   178,
    1375,    -1,  1362,   343,   181,  1373,   178,  1375,    -1,  1362,
     343,   382,  1373,   178,  1375,    -1,    12,  1363,   595,   188,
     349,   178,  1375,    -1,   188,   648,  1360,    -1,  1362,   343,
    1361,  1373,   521,  1375,  1382,  1383,    -1,  1362,   343,   181,
    1373,   521,  1375,  1382,  1383,    -1,  1362,   343,   382,  1373,
     521,  1375,  1382,  1383,    -1,    -1,   505,    -1,  1364,    -1,
      12,  1363,    -1,    -1,   381,    -1,  1365,    -1,  1364,   595,
    1365,    -1,    -1,   440,  1366,  1379,    -1,    -1,   221,  1367,
    1379,    -1,    -1,   548,  1368,  1379,    -1,    -1,   402,  1369,
    1379,    -1,   118,    -1,   550,    -1,   213,    -1,    13,    -1,
      90,    -1,   131,    -1,   155,    -1,   408,    -1,   454,    -1,
     383,    -1,   167,    -1,   188,   349,    -1,   453,    98,    -1,
     496,    -1,    90,   507,   501,    -1,   260,   501,    -1,   416,
     457,    -1,   416,    63,    -1,    90,   567,    -1,   453,   567,
      -1,    90,   430,    -1,    13,   430,    -1,    90,   551,    -1,
     153,    -1,   525,    -1,    -1,    16,    -1,  1372,  1370,  1371,
      -1,  1372,    -1,   491,   510,    -1,   233,   510,    -1,    62,
     510,    -1,   588,    -1,  1318,   601,   588,    -1,   588,   601,
     588,    -1,  1311,    -1,  1321,    -1,  1374,   595,  1321,    -1,
    1378,    -1,  1375,   595,  1378,    -1,  1378,  1377,    -1,  1375,
     595,  1378,  1377,    -1,    -1,   427,  1320,    -1,  1321,   206,
      47,   510,    -1,  1321,   206,    47,   368,   510,    -1,  1321,
      -1,    -1,   593,  1380,   594,    -1,  1380,   595,  1381,    -1,
    1381,    -1,  1318,    -1,    -1,   417,  1371,    -1,   417,   477,
      -1,   417,   578,    -1,   417,   330,    -1,    -1,   574,  1384,
      -1,  1384,  1385,    -1,  1385,    -1,   188,   349,    -1,   289,
    1157,    -1,   293,  1157,    -1,   288,  1157,    -1,   294,  1157,
      -1,    -1,    30,  1387,  1388,    -1,    -1,   575,    -1,    -1,
      16,   334,    55,    -1,    16,    55,    -1,    -1,   407,    -1,
     334,   407,    -1,    -1,   435,    -1,    73,  1388,  1389,  1390,
      -1,   428,  1388,  1389,  1390,    -1,   428,  1388,   521,  1391,
    1318,    -1,   435,  1318,    -1,   407,   435,  1318,    -1,    -1,
    1397,    -1,    -1,   541,  1403,  1398,  1022,    -1,    -1,  1397,
      -1,  1400,    -1,    -1,  1401,  1402,    -1,  1147,  1151,    -1,
    1153,    -1,    -1,   127,    -1,    12,    -1,    -1,   440,  1406,
    1024,  1404,  1407,    -1,   593,  1406,  1023,  1404,  1407,   594,
      -1,    -1,    -1,  1413,  1409,    -1,  1412,  1410,    -1,  1414,
    1411,  1418,    -1,  1418,    -1,  1426,    -1,  1437,    -1,  1431,
      -1,   635,    -1,  1418,    -1,  1426,    -1,  1437,    -1,  1431,
      -1,  1430,    -1,   635,    -1,  1412,    -1,  1413,    -1,    -1,
     115,   147,  1321,    -1,  1415,    -1,  1415,  1416,    -1,  1416,
      -1,   354,   415,    -1,    11,   147,   534,    -1,    11,   147,
     301,    -1,    11,   147,   508,    -1,    -1,   475,   439,   115,
      -1,   475,   439,   227,    -1,    -1,  1417,   567,  1311,  1419,
    1420,    18,  1422,    -1,    -1,   593,  1421,   594,    -1,  1318,
      -1,  1421,   595,  1318,    -1,    -1,  1423,  1424,  1425,    -1,
     440,  1024,    -1,   593,  1023,   594,  1399,    -1,    -1,   574,
      61,   349,    -1,   574,    52,    61,   349,    -1,   574,   257,
      61,   349,    -1,    -1,    -1,    -1,   525,  1037,   649,   734,
     735,   343,  1037,  1427,  1311,   175,  1037,  1428,   136,   433,
    1429,   684,    -1,    10,  1037,   181,  1318,   423,   850,   461,
    1315,    -1,  1037,   181,  1318,   423,   850,   461,  1315,    -1,
      -1,    -1,    -1,    -1,    -1,  1037,   181,   649,   593,  1432,
     660,   594,  1433,   423,  1434,   861,  1435,   651,  1436,   684,
      -1,    -1,    -1,    -1,    -1,   382,  1037,   649,  1438,   593,
    1439,   664,   594,  1440,   651,  1441,   684,    -1,   579,  1444,
    1443,  1445,    -1,   579,   141,  1443,  1447,    -1,   579,   377,
    1443,    -1,   579,    73,  1443,  1446,    -1,   579,   428,  1443,
      -1,   579,   398,    -1,  1299,    -1,  1299,   595,  1299,    -1,
    1299,   595,  1299,   595,  1157,    -1,    30,    -1,   480,    -1,
      -1,   235,    -1,   422,    -1,    -1,   345,   369,    -1,    -1,
      -1,   497,  1448,  1449,    -1,    -1,   175,   303,    -1,   223,
     371,  1318,   461,  1315,    -1,   540,   371,  1318,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1546,  1546,  1559,  1558,  1583,  1590,  1592,  1596,  1597,
    1602,  1603,  1604,  1605,  1606,  1607,  1608,  1609,  1610,  1611,
    1612,  1613,  1614,  1615,  1616,  1617,  1618,  1619,  1620,  1621,
    1622,  1623,  1624,  1625,  1626,  1627,  1628,  1629,  1630,  1631,
    1632,  1633,  1634,  1635,  1636,  1637,  1638,  1639,  1640,  1641,
    1642,  1643,  1644,  1645,  1646,  1647,  1648,  1649,  1650,  1651,
    1652,  1656,  1666,  1667,  1671,  1681,  1688,  1699,  1698,  1709,
    1711,  1715,  1716,  1720,  1733,  1732,  1752,  1751,  1762,  1763,
    1767,  1771,  1775,  1779,  1783,  1787,  1792,  1796,  1800,  1804,
    1808,  1812,  1817,  1821,  1825,  1829,  1845,  1849,  1861,  1860,
    1894,  1893,  1905,  1903,  1916,  1914,  1926,  1925,  1938,  1937,
    1945,  1949,  1953,  1957,  1964,  1977,  1978,  1982,  1986,  1990,
    1994,  1998,  2002,  2006,  2014,  2013,  2045,  2044,  2051,  2058,
    2059,  2065,  2071,  2081,  2087,  2093,  2095,  2102,  2103,  2107,
    2113,  2122,  2123,  2131,  2131,  2189,  2190,  2191,  2192,  2193,
    2194,  2195,  2196,  2197,  2198,  2199,  2200,  2201,  2206,  2220,
    2236,  2255,  2256,  2260,  2261,  2266,  2268,  2270,  2272,  2274,
    2276,  2278,  2284,  2285,  2286,  2290,  2294,  2302,  2301,  2314,
    2316,  2319,  2321,  2325,  2329,  2336,  2338,  2342,  2343,  2348,
    2367,  2393,  2395,  2399,  2400,  2404,  2430,  2431,  2432,  2433,
    2437,  2438,  2442,  2443,  2448,  2451,  2478,  2477,  2542,  2558,
    2557,  2611,  2637,  2637,  2660,  2661,  2666,  2668,  2673,  2696,
    2704,  2721,  2722,  2726,  2730,  2739,  2746,  2753,  2763,  2778,
    2796,  2797,  2801,  2802,  2803,  2804,  2805,  2806,  2807,  2808,
    2809,  2810,  2811,  2812,  2813,  2818,  2817,  2824,  2824,  2881,
    2880,  2909,  2909,  2923,  2976,  3019,  3040,  3039,  3061,  3080,
    3082,  3083,  3087,  3107,  3130,  3132,  3148,  3130,  3167,  3169,
    3170,  3174,  3175,  3180,  3186,  3179,  3207,  3206,  3222,  3223,
    3227,  3228,  3233,  3237,  3232,  3258,  3262,  3257,  3281,  3291,
    3296,  3295,  3331,  3332,  3337,  3336,  3369,  3369,  3384,  3383,
    3419,  3431,  3433,  3430,  3460,  3459,  3480,  3482,  3487,  3489,
    3491,  3508,  3513,  3519,  3526,  3527,  3535,  3541,  3550,  3556,
    3562,  3563,  3567,  3567,  3572,  3573,  3574,  3578,  3579,  3580,
    3584,  3588,  3589,  3590,  3594,  3595,  3596,  3597,  3598,  3599,
    3600,  3601,  3605,  3609,  3610,  3611,  3615,  3616,  3617,  3618,
    3619,  3623,  3627,  3628,  3629,  3633,  3634,  3635,  3636,  3637,
    3638,  3639,  3643,  3647,  3648,  3649,  3653,  3654,  3655,  3660,
    3668,  3676,  3684,  3696,  3708,  3713,  3718,  3726,  3734,  3742,
    3750,  3758,  3766,  3774,  3787,  3800,  3813,  3815,  3819,  3824,
    3837,  3838,  3889,  3890,  3893,  3907,  3924,  3929,  3927,  3937,
    3939,  3938,  3945,  3944,  3977,  3978,  3983,  3982,  4015,  4014,
    4031,  4035,  4042,  4041,  4045,  4044,  4048,  4047,  4053,  4054,
    4059,  4060,  4064,  4065,  4069,  4080,  4095,  4111,  4112,  4128,
    4130,  4129,  4134,  4132,  4143,  4144,  4148,  4159,  4175,  4176,
    4192,  4193,  4216,  4217,  4222,  4221,  4246,  4257,  4277,  4292,
    4310,  4322,  4338,  4339,  4343,  4353,  4354,  4358,  4375,  4434,
    4446,  4473,  4474,  4479,  4478,  4516,  4521,  4522,  4526,  4527,
    4531,  4533,  4539,  4541,  4543,  4545,  4547,  4549,  4559,  4588,
    4558,  4602,  4603,  4607,  4608,  4612,  4613,  4617,  4618,  4622,
    4623,  4627,  4628,  4632,  4636,  4637,  4640,  4642,  4646,  4647,
    4651,  4652,  4653,  4657,  4662,  4669,  4674,  4679,  4684,  4689,
    4694,  4699,  4714,  4720,  4725,  4730,  4735,  4740,  4753,  4754,
    4755,  4760,  4765,  4770,  4772,  4774,  4776,  4782,  4790,  4808,
    4825,  4848,  4862,  4863,  4864,  4865,  4866,  4867,  4871,  4872,
    4873,  4877,  4878,  4882,  4883,  4884,  4885,  4889,  4890,  4894,
    4895,  4899,  4900,  4907,  4912,  4918,  4924,  4930,  4950,  4954,
    4960,  4962,  4966,  4970,  4971,  4975,  4980,  4979,  5002,  5003,
    5004,  5005,  5010,  5014,  5019,  5024,  5028,  5033,  5038,  5044,
    5049,  5055,  5059,  5064,  5069,  5071,  5073,  5075,  5088,  5090,
    5095,  5100,  5112,  5117,  5122,  5127,  5129,  5131,  5133,  5135,
    5137,  5139,  5141,  5144,  5143,  5148,  5147,  5151,  5153,  5162,
    5163,  5164,  5169,  5170,  5171,  5172,  5173,  5177,  5181,  5182,
    5186,  5187,  5191,  5192,  5193,  5194,  5195,  5199,  5200,  5201,
    5202,  5203,  5207,  5212,  5214,  5220,  5221,  5223,  5228,  5237,
    5238,  5242,  5243,  5247,  5248,  5249,  5253,  5254,  5255,  5256,
    5259,  5260,  5263,  5264,  5268,  5269,  5273,  5274,  5278,  5279,
    5280,  5281,  5288,  5289,  5295,  5301,  5307,  5313,  5314,  5330,
    5336,  5341,  5342,  5346,  5354,  5358,  5359,  5363,  5364,  5368,
    5377,  5381,  5382,  5386,  5397,  5398,  5402,  5403,  5407,  5408,
    5412,  5413,  5414,  5415,  5424,  5425,  5429,  5430,  5434,  5435,
    5436,  5445,  5448,  5450,  5455,  5454,  5467,  5468,  5472,  5479,
    5489,  5490,  5494,  5495,  5499,  5500,  5501,  5502,  5503,  5507,
    5508,  5509,  5510,  5511,  5515,  5519,  5520,  5524,  5525,  5529,
    5530,  5534,  5535,  5536,  5540,  5541,  5545,  5549,  5562,  5574,
    5575,  5579,  5580,  5584,  5585,  5589,  5590,  5594,  5595,  5599,
    5600,  5604,  5605,  5609,  5610,  5614,  5619,  5620,  5624,  5628,
    5629,  5642,  5643,  5644,  5648,  5649,  5653,  5659,  5673,  5674,
    5678,  5679,  5683,  5684,  5692,  5691,  5717,  5716,  5730,  5742,
    5741,  5760,  5759,  5778,  5777,  5796,  5790,  5810,  5809,  5842,
    5847,  5852,  5857,  5862,  5872,  5873,  5874,  5875,  5879,  5880,
    5892,  5893,  5897,  5898,  5901,  5903,  5904,  5905,  5907,  5909,
    5910,  5919,  5920,  5924,  5933,  5931,  5941,  5951,  5950,  5960,
    5958,  5968,  5975,  5979,  5986,  5990,  5995,  5994,  6010,  6012,
    6017,  6026,  6025,  6041,  6045,  6044,  6056,  6057,  6061,  6076,
    6077,  6081,  6090,  6091,  6095,  6100,  6099,  6107,  6116,  6106,
    6128,  6137,  6141,  6150,  6159,  6165,  6171,  6180,  6189,  6208,
    6229,  6234,  6238,  6246,  6247,  6251,  6252,  6256,  6257,  6258,
    6262,  6263,  6264,  6268,  6269,  6270,  6271,  6280,  6279,  6290,
    6298,  6297,  6307,  6316,  6325,  6326,  6333,  6333,  6339,  6340,
    6344,  6345,  6346,  6350,  6351,  6367,  6368,  6373,  6372,  6384,
    6383,  6395,  6394,  6404,  6405,  6406,  6411,  6410,  6423,  6424,
    6428,  6429,  6433,  6434,  6435,  6440,  6439,  6452,  6461,  6460,
    6478,  6479,  6483,  6484,  6488,  6489,  6490,  6491,  6492,  6493,
    6498,  6497,  6510,  6511,  6512,  6517,  6516,  6522,  6529,  6534,
    6542,  6543,  6547,  6560,  6569,  6570,  6574,  6583,  6584,  6589,
    6588,  6598,  6599,  6603,  6612,  6612,  6623,  6624,  6629,  6630,
    6639,  6648,  6649,  6653,  6683,  6688,  6687,  6707,  6715,  6707,
    6722,  6723,  6724,  6725,  6726,  6730,  6737,  6744,  6746,  6757,
    6758,  6762,  6763,  6770,  6771,  6772,  6773,  6779,  6785,  6791,
    6805,  6808,  6810,  6818,  6829,  6830,  6831,  6846,  6872,  6878,
    6884,  6885,  6889,  6890,  6891,  6892,  6893,  6897,  6898,  6903,
    6954,  6961,  7004,  7010,  7016,  7022,  7028,  7034,  7040,  7046,
    7050,  7056,  7062,  7068,  7074,  7080,  7084,  7090,  7100,  7106,
    7114,  7120,  7130,  7136,  7145,  7155,  7161,  7171,  7177,  7186,
    7190,  7196,  7202,  7208,  7214,  7220,  7226,  7232,  7238,  7244,
    7250,  7256,  7262,  7268,  7274,  7278,  7279,  7283,  7284,  7288,
    7289,  7293,  7294,  7298,  7299,  7300,  7301,  7302,  7303,  7307,
    7308,  7312,  7313,  7314,  7315,  7316,  7317,  7329,  7330,  7331,
    7332,  7333,  7339,  7343,  7349,  7355,  7361,  7367,  7369,  7376,
    7383,  7389,  7391,  7400,  7407,  7415,  7421,  7428,  7434,  7448,
    7455,  7471,  7477,  7483,  7491,  7497,  7503,  7509,  7515,  7530,
    7542,  7548,  7554,  7560,  7566,  7572,  7578,  7584,  7590,  7596,
    7602,  7608,  7614,  7620,  7626,  7632,  7638,  7646,  7667,  7674,
    7680,  7687,  7694,  7701,  7708,  7715,  7721,  7727,  7734,  7741,
    7747,  7754,  7760,  7766,  7772,  7778,  7784,  7802,  7812,  7818,
    7824,  7831,  7838,  7853,  7859,  7865,  7871,  7877,  7884,  7890,
    7896,  7902,  7908,  7920,  7926,  7932,  7938,  7944,  7956,  7962,
    7978,  7984,  7991,  7998,  8005,  8012,  8019,  8023,  8043,  8042,
    8115,  8157,  8159,  8164,  8165,  8169,  8170,  8174,  8175,  8179,
    8186,  8194,  8220,  8226,  8232,  8238,  8244,  8250,  8259,  8266,
    8268,  8265,  8276,  8278,  8275,  8282,  8284,  8281,  8288,  8290,
    8287,  8293,  8304,  8310,  8316,  8322,  8328,  8334,  8340,  8346,
    8352,  8359,  8358,  8377,  8376,  8391,  8401,  8409,  8425,  8426,
    8431,  8436,  8441,  8444,  8457,  8456,  8473,  8475,  8477,  8479,
    8481,  8483,  8485,  8487,  8489,  8491,  8493,  8498,  8499,  8503,
    8510,  8518,  8519,  8523,  8530,  8538,  8539,  8543,  8544,  8548,
    8556,  8566,  8567,  8576,  8587,  8588,  8593,  8594,  8614,  8616,
    8620,  8618,  8635,  8633,  8651,  8649,  8656,  8665,  8663,  8681,
    8680,  8690,  8701,  8699,  8718,  8717,  8728,  8739,  8740,  8741,
    8746,  8746,  8759,  8781,  8834,  8833,  8856,  8873,  8856,  8880,
    8884,  8917,  8918,  8923,  8927,  8928,  8929,  8933,  8934,  8939,
    8938,  8944,  8943,  8951,  8952,  8955,  8957,  8957,  8961,  8961,
    8966,  8967,  8971,  8973,  8978,  8979,  8983,  8994,  9007,  9008,
    9009,  9010,  9011,  9012,  9013,  9014,  9015,  9016,  9017,  9018,
    9022,  9023,  9042,  9043,  9044,  9045,  9046,  9047,  9048,  9049,
    9050,  9054,  9055,  9056,  9057,  9060,  9062,  9063,  9067,  9068,
    9076,  9078,  9082,  9084,  9083,  9097,  9100,  9099,  9114,  9120,
    9135,  9137,  9141,  9143,  9148,  9149,  9162,  9180,  9184,  9185,
    9189,  9202,  9204,  9209,  9208,  9243,  9245,  9250,  9251,  9252,
    9257,  9263,  9267,  9268,  9272,  9276,  9283,  9290,  9300,  9304,
    9310,  9316,  9326,  9330,  9339,  9340,  9341,  9342,  9343,  9344,
    9348,  9349,  9350,  9351,  9352,  9356,  9357,  9358,  9359,  9360,
    9364,  9365,  9366,  9367,  9371,  9376,  9377,  9380,  9383,  9382,
    9413,  9414,  9418,  9419,  9423,  9435,  9435,  9446,  9447,  9451,
    9470,  9503,  9502,  9515,  9523,  9514,  9525,  9537,  9549,  9548,
    9565,  9572,  9572,  9586,  9593,  9616,  9637,  9649,  9653,  9659,
    9665,  9672,  9677,  9682,  9692,  9693,  9697,  9705,  9706,  9710,
    9711,  9715,  9725,  9726,  9730,  9731,  9739,  9749,  9738,  9759,
    9766,  9758,  9776,  9788,  9789,  9794,  9798,  9799,  9807,  9808,
    9812,  9821,  9822,  9823,  9825,  9824,  9835,  9836,  9840,  9841,
    9843,  9842,  9846,  9845,  9851,  9852,  9856,  9857,  9861,  9871,
    9872,  9876,  9877,  9882,  9881,  9895,  9896,  9900,  9905,  9913,
    9914,  9922,  9924,  9924,  9932,  9941,  9931,  9963,  9964,  9968,
    9976,  9977,  9981,  9991,  9992,  9999,  9998, 10012, 10011, 10020,
   10019, 10027, 10026, 10036, 10037, 10041, 10053, 10068, 10069, 10073,
   10074, 10078, 10079, 10080, 10084, 10094, 10096, 10099, 10101, 10104,
   10105, 10108, 10112, 10116, 10120, 10124, 10128, 10132, 10136, 10140,
   10148, 10151, 10161, 10160, 10174, 10181, 10189, 10197, 10205, 10213,
   10221, 10229, 10236, 10238, 10240, 10249, 10262, 10266, 10271, 10270,
   10275, 10281, 10290, 10295, 10303, 10310, 10315, 10320, 10325, 10327,
   10329, 10331, 10333, 10335, 10342, 10344, 10352, 10364, 10376, 10378,
   10386, 10393, 10400, 10410, 10417, 10423, 10432, 10440, 10444, 10448,
   10455, 10462, 10468, 10475, 10482, 10489, 10496, 10506, 10516, 10524,
   10526, 10528, 10533, 10534, 10537, 10539, 10543, 10544, 10548, 10549,
   10553, 10554, 10558, 10559, 10563, 10564, 10568, 10569, 10572, 10574,
   10581, 10592, 10591, 10605, 10604, 10614, 10615, 10619, 10620, 10621,
   10625, 10626, 10627, 10642, 10641, 10653, 10654, 10659, 10658, 10661,
   10663, 10665, 10667, 10669, 10671, 10673, 10675, 10677, 10679, 10681,
   10683, 10685, 10690, 10691, 10696, 10695, 10705, 10706, 10710, 10711,
   10712, 10717, 10716, 10727, 10731, 10735, 10747, 10757, 10758, 10759,
   10760, 10766, 10778, 10777, 10790, 10808, 10819, 10829, 10807, 10833,
   10843, 10844, 10848, 10849, 10861, 10865, 10866, 10867, 10870, 10872,
   10876, 10877, 10881, 10886, 10893, 10898, 10905, 10907, 10911, 10912,
   10916, 10921, 10928, 10930, 10938, 10939, 10940, 10944, 10946, 10951,
   10952, 10961, 10962, 10968, 10992, 11004, 11015, 11034, 11042, 11054,
   11069, 11090, 11091, 11092, 11100, 11101, 11102, 11109, 11115, 11121,
   11127, 11133, 11162, 11190, 11191, 11192, 11196, 11206, 11216, 11222,
   11231, 11246, 11247, 11251, 11260, 11276, 11280, 11327, 11331, 11349,
   11353, 11432, 11457, 11488, 11489, 11505, 11515, 11519, 11525, 11531,
   11541, 11547, 11556, 11566, 11567, 11596, 11612, 11628, 11645, 11646,
   11657, 11658, 11669, 11670, 11671, 11675, 11690, 11710, 11725, 11726,
   11727, 11728, 11729, 11730, 11731, 11732, 11733, 11734, 11735, 11736,
   11737, 11738, 11739, 11740, 11741, 11742, 11743, 11744, 11745, 11746,
   11747, 11748, 11749, 11750, 11751, 11752, 11753, 11754, 11755, 11756,
   11757, 11758, 11759, 11760, 11761, 11762, 11763, 11764, 11765, 11766,
   11767, 11768, 11769, 11770, 11771, 11772, 11773, 11774, 11775, 11776,
   11777, 11778, 11779, 11789, 11790, 11791, 11792, 11793, 11794, 11795,
   11796, 11797, 11798, 11799, 11800, 11801, 11802, 11803, 11804, 11805,
   11806, 11807, 11808, 11809, 11810, 11811, 11812, 11813, 11814, 11815,
   11816, 11817, 11818, 11819, 11820, 11821, 11822, 11823, 11824, 11825,
   11826, 11827, 11828, 11829, 11830, 11831, 11832, 11833, 11834, 11835,
   11836, 11837, 11838, 11839, 11840, 11841, 11842, 11843, 11844, 11845,
   11846, 11847, 11848, 11849, 11850, 11851, 11852, 11853, 11854, 11855,
   11856, 11857, 11858, 11859, 11860, 11861, 11862, 11863, 11864, 11865,
   11866, 11867, 11868, 11869, 11870, 11871, 11872, 11873, 11874, 11875,
   11876, 11877, 11878, 11879, 11880, 11881, 11882, 11883, 11884, 11885,
   11886, 11887, 11888, 11889, 11890, 11891, 11892, 11893, 11894, 11895,
   11896, 11897, 11898, 11899, 11900, 11901, 11902, 11903, 11904, 11905,
   11906, 11907, 11908, 11909, 11910, 11911, 11912, 11913, 11914, 11915,
   11916, 11917, 11918, 11919, 11920, 11921, 11922, 11923, 11924, 11925,
   11926, 11927, 11928, 11929, 11930, 11931, 11932, 11933, 11934, 11935,
   11936, 11937, 11938, 11939, 11940, 11941, 11942, 11943, 11944, 11945,
   11946, 11947, 11948, 11949, 11950, 11951, 11952, 11953, 11954, 11955,
   11956, 11957, 11958, 11959, 11960, 11961, 11962, 11963, 11964, 11965,
   11966, 11967, 11968, 11969, 11970, 11971, 11972, 11973, 11974, 11975,
   11976, 11977, 11978, 11979, 11980, 11981, 11982, 11983, 11984, 11985,
   11986, 11987, 11988, 11989, 11990, 11991, 11992, 11993, 11994, 11995,
   11996, 11997, 11998, 11999, 12000, 12001, 12002, 12003, 12004, 12005,
   12006, 12007, 12008, 12009, 12010, 12011, 12012, 12013, 12014, 12015,
   12016, 12017, 12018, 12019, 12020, 12021, 12022, 12023, 12024, 12025,
   12026, 12027, 12028, 12029, 12030, 12031, 12032, 12033, 12034, 12035,
   12036, 12037, 12038, 12039, 12040, 12041, 12042, 12043, 12044, 12045,
   12046, 12047, 12048, 12049, 12050, 12051, 12052, 12053, 12054, 12061,
   12060, 12075, 12076, 12080, 12081, 12085, 12085, 12167, 12168, 12169,
   12170, 12174, 12175, 12179, 12180, 12181, 12182, 12186, 12187, 12188,
   12189, 12193, 12194, 12198, 12240, 12259, 12270, 12283, 12297, 12312,
   12331, 12365, 12375, 12384, 12392, 12393, 12396, 12423, 12466, 12480,
   12481, 12482, 12483, 12487, 12488, 12497, 12509, 12510, 12511, 12517,
   12523, 12535, 12534, 12550, 12551, 12555, 12556, 12560, 12572, 12573,
   12574, 12575, 12580, 12579, 12599, 12611, 12624, 12623, 12649, 12650,
   12654, 12655, 12659, 12660, 12661, 12662, 12664, 12663, 12676, 12677,
   12678, 12679, 12680, 12686, 12691, 12697, 12708, 12719, 12726, 12731,
   12738, 12750, 12764, 12766, 12770, 12771, 12778, 12780, 12784, 12785,
   12790, 12789, 12793, 12792, 12796, 12795, 12799, 12798, 12801, 12802,
   12803, 12804, 12805, 12806, 12807, 12808, 12809, 12810, 12811, 12812,
   12813, 12814, 12815, 12816, 12817, 12818, 12819, 12820, 12821, 12822,
   12823, 12824, 12825, 12829, 12830, 12834, 12835, 12839, 12849, 12859,
   12872, 12887, 12900, 12913, 12925, 12930, 12938, 12943, 12951, 12957,
   12967, 12970, 12986, 13013, 13015, 13021, 13025, 13029, 13030, 13034,
   13061, 13063, 13067, 13071, 13075, 13082, 13083, 13087, 13088, 13092,
   13093, 13099, 13105, 13111, 13121, 13120, 13130, 13131, 13136, 13137,
   13138, 13143, 13144, 13145, 13149, 13150, 13154, 13164, 13171, 13181,
   13190, 13204, 13205, 13210, 13209, 13250, 13251, 13252, 13256, 13256,
   13280, 13281, 13285, 13286, 13287, 13291, 13296, 13301, 13308, 13337,
   13372, 13374, 13376, 13381, 13382, 13383, 13384, 13385, 13389, 13390,
   13391, 13392, 13393, 13394, 13404, 13405, 13410, 13423, 13436, 13438,
   13440, 13445, 13450, 13452, 13454, 13460, 13461, 13463, 13469, 13468,
   13488, 13489, 13493, 13498, 13506, 13506, 13531, 13532, 13537, 13538,
   13540, 13542, 13560, 13566, 13571, 13553, 13639, 13657, 13682, 13721,
   13725, 13733, 13756, 13678, 13821, 13852, 13861, 13869, 13820, 13890,
   13899, 13903, 13907, 13911, 13915, 13922, 13929, 13936, 13946, 13947,
   13951, 13952, 13953, 13957, 13958, 13963, 13965, 13964, 13970, 13971,
   13975, 13985
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM",
  "ANY_SYM", "AS", "ASC", "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM",
  "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BINLOG_GROUP_ID_SYM", "BIN_NUM",
  "BIT_AND", "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM",
  "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM",
  "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM", "CHECKSUM_SYM",
  "CHECK_SYM", "CIPHER_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE",
  "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_SYM",
  "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM",
  "COMPLETION_SYM", "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM",
  "CONNECTION_SYM", "CONNECT_USING_GROUP_ID_SYM", "CONSISTENT_SYM",
  "CONSTRAINT", "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM",
  "CONTRIBUTORS_SYM", "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE",
  "CROSS", "CUBE_SYM", "CURDATE", "CURRENT_USER", "CURSOR_SYM", "CURTIME",
  "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME",
  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM",
  "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM",
  "DEALLOCATE_SYM", "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIRECTORY_SYM",
  "DISABLE_SYM", "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM",
  "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM",
  "DYNAMIC_SYM", "EACH_SYM", "ELSE", "ELSEIF_SYM", "ENABLE_SYM",
  "ENCLOSED", "END", "ENDS_SYM", "END_OF_INPUT", "ENGINES_SYM",
  "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM", "ERRORS", "ESCAPED",
  "ESCAPE_SYM", "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM", "EXECUTE_SYM",
  "EXISTS", "EXIT_SYM", "EXPANSION_SYM", "EXTENDED_SYM", "EXTENT_SIZE_SYM",
  "EXTRACT_SYM", "FAILOVER_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
  "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM",
  "FRAC_SECOND_SYM", "FROM", "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE",
  "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM",
  "GOOGLESTATS_SYM", "GRANT", "GRANTS", "GROUP_SYM", "GROUP_CONCAT_SYM",
  "GT_SYM", "HANDLER_SYM", "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM",
  "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM", "HOUR_MICROSECOND_SYM",
  "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT",
  "IDENTIFIED_SYM", "IDENT_QUOTED", "IDLE_SYM", "IF", "IGNORE_SYM",
  "IMPORT", "INDEXES", "INDEX_SYM", "INFILE", "INFO_SYM",
  "INITIAL_SIZE_SYM", "INNER_SYM", "INNOBASE_SYM", "INOUT_SYM",
  "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM",
  "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM",
  "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM",
  "LAST_SYM", "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM",
  "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM", "LINES",
  "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM",
  "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB",
  "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT",
  "MAPPED", "MASTER_CONNECT_RETRY_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MATCH", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM", "MICROSECOND_SYM",
  "MIGRATE_SYM", "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM",
  "MINUTE_SYM", "MIN_ROWS", "MIN_SYM", "MODE_SYM", "MODIFIES_SYM",
  "MODIFY_SYM", "MOD_SYM", "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT",
  "MULTIPOLYGON", "MUTEX_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMERIC_SYM", "NVARCHAR_SYM", "OFFSET_SYM",
  "OLD_PASSWORD", "ON", "ONE_SHOT_SYM", "ONE_SYM", "OPEN_SYM", "OPTIMIZE",
  "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM", "ORDER_SYM",
  "OR_OR_SYM", "OR_SYM", "ORDERED_CHECKSUM_SYM", "OUTER", "OUTFILE",
  "OUT_SYM", "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PARAM_MARKER",
  "PARSER_SYM", "PARTIAL", "PARTITIONING_SYM", "PARTITIONS_SYM",
  "PARTITION_SYM", "PASSWORD", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM",
  "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION",
  "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES",
  "PROCEDURE", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM",
  "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM",
  "RELAY_THREAD", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME",
  "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESOURCES", "RESTORE_SYM",
  "RESTRICT", "RESUME_SYM", "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT",
  "ROLE_SYM", "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_FORMAT_SYM", "ROW_SYM", "RTREE_SYM", "SAVEPOINT_SYM",
  "SCHEDULE_SYM", "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM",
  "SELECT_SYM", "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM",
  "SERIAL_SYM", "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET",
  "SET_VAR", "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SMALLINT", "SNAPSHOT_SYM",
  "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM",
  "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM",
  "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM",
  "SQL_THREAD", "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATS_SERVER_SYM", "STATS_SERVERS_SYM", "STATUS_SYM", "STDDEV_SAMP_SYM",
  "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM", "SUBPARTITION_SYM",
  "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM",
  "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY",
  "TABLE_STATS_SYM", "TABLE_SYM", "TABLE_CHECKSUM_SYM", "TEMPORARY",
  "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM",
  "THEN_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM",
  "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING",
  "TRANSACTION_SYM", "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM",
  "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM",
  "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNORDERED_CHECKSUM_SYM", "UNSIGNED", "UNTIL_SYM",
  "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USER_STATS_SYM",
  "USE_FRM", "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM",
  "UTC_TIME_SYM", "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR",
  "VARIABLES", "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIEW_SYM",
  "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM",
  "WITH", "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM",
  "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'",
  "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'",
  "'{'", "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "master_file_def",
  "create", "$@5", "$@6", "$@7", "$@8", "$@9", "$@10", "server_def",
  "server_options_list", "server_option", "event_tail", "$@11",
  "ev_schedule_time", "$@12", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@13", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@14", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@15", "$@16", "sp_cursor_stmt", "$@17",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "opt_value", "sp_hcond", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt", "sp_proc_stmt_if", "$@18", "sp_proc_stmt_statement",
  "$@19", "sp_proc_stmt_return", "$@20", "sp_proc_stmt_unlabeled", "$@21",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@22", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@23", "$@24", "$@25", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "$@26", "$@27",
  "searched_case_stmt", "$@28", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "$@29", "$@30",
  "searched_when_clause", "$@31", "$@32", "else_clause_opt",
  "sp_labeled_control", "$@33", "sp_opt_label", "sp_labeled_block", "$@34",
  "sp_unlabeled_block", "$@35", "sp_block_content", "$@36",
  "sp_unlabeled_control", "$@37", "$@38", "$@39", "trg_action_time",
  "trg_event", "change_tablespace_access", "change_tablespace_info",
  "tablespace_info", "opt_logfile_group_name", "alter_tablespace_info",
  "logfile_group_info", "alter_logfile_group_info", "add_log_file",
  "change_ts_option_list", "$@40", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create2",
  "create2a", "$@41", "create3", "$@42", "$@43", "opt_partitioning",
  "partitioning", "$@44", "partition_entry", "$@45", "partition",
  "part_type_def", "$@46", "$@47", "$@48", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_func", "sub_part_func",
  "opt_no_parts", "opt_sub_part", "$@49", "$@50", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_no_subparts", "part_defs",
  "part_def_list", "part_definition", "$@51", "part_name",
  "opt_part_values", "part_func_max", "max_value_sym", "part_range_func",
  "part_list_func", "part_list_item", "part_bit_expr", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@52", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@53", "$@54", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "field_list", "field_list_item", "column_def", "key_def",
  "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "$@55", "type", "$@56", "$@57",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "now_or_signed_literal", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "opt_binary", "opt_bin_mod", "opt_bin_charset",
  "opt_primary", "references", "$@58", "opt_ref_list", "ref_list",
  "opt_on_delete", "opt_on_delete_list", "opt_on_delete_item",
  "delete_option", "normal_key_type", "constraint_key_type",
  "key_or_index", "opt_key_or_index", "keys_or_index", "opt_unique",
  "fulltext", "spatial", "init_key_options", "key_alg",
  "normal_key_options", "fulltext_key_options", "spatial_key_options",
  "normal_key_opts", "spatial_key_opts", "fulltext_key_opts",
  "key_using_alg", "all_key_opt", "normal_key_opt", "spatial_key_opt",
  "fulltext_key_opt", "btree_or_rtree", "key_list", "key_part",
  "opt_ident", "opt_component", "string_list", "alter", "$@59", "$@60",
  "$@61", "$@62", "$@63", "$@64", "$@65",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "$@66", "$@67", "$@68",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "$@69", "add_part_extra", "reorg_partition_rule", "$@70",
  "reorg_parts_rule", "$@71", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "$@72", "$@73", "$@74",
  "opt_column", "opt_ignore", "opt_restrict", "opt_place", "opt_to",
  "slave", "$@75", "$@76", "start", "start_transaction_opts",
  "slave_thread_opts", "$@77", "slave_thread_opt_list", "slave_thread_opt",
  "slave_until", "slave_until_opts", "restore", "$@78", "backup", "$@79",
  "checksum", "$@80", "opt_checksum_type", "repair", "$@81",
  "opt_mi_repair_type", "mi_repair_types", "mi_repair_type", "analyze",
  "$@82", "binlog_base64_event", "check", "$@83", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "$@84",
  "opt_no_write_to_binlog", "rename", "$@85", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "keycache_list",
  "assign_to_keycache", "key_cache_name", "preload", "$@86",
  "preload_list", "preload_keys", "cache_keys_spec", "$@87",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_init2", "$@88", "select_part2", "$@89", "$@90",
  "select_into", "select_from", "select_options", "select_option_list",
  "select_option", "select_lock_type", "select_item_list", "select_item",
  "remember_name", "remember_end", "select_item2", "select_alias",
  "optional_braces", "expr", "bool_pri", "predicate", "bit_expr", "or",
  "and", "not", "not2", "comp_op", "all_or_any", "simple_expr",
  "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@91", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@92", "$@93", "$@94", "$@95", "$@96", "$@97", "$@98",
  "$@99", "$@100", "variable", "$@101", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "in_sum_expr", "$@102",
  "cast_type", "opt_expr_list", "expr_list", "ident_list_arg",
  "ident_list", "opt_expr", "opt_else", "when_list", "table_ref",
  "join_table_list", "esc_table_ref", "derived_table_list", "join_table",
  "$@103", "$@104", "$@105", "$@106", "$@107", "$@108", "$@109",
  "normal_join", "table_factor", "$@110", "select_derived", "$@111",
  "select_derived2", "$@112", "$@113", "get_select_lex",
  "select_derived_init", "opt_outer", "index_hint_clause",
  "index_hint_type", "index_hint_definition", "$@114", "$@115",
  "index_hints_list", "opt_index_hints_list", "$@116",
  "opt_key_definition", "$@117", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "interval_time_st", "date_time_type", "table_alias", "opt_table_alias",
  "opt_all", "where_clause", "$@118", "having_clause", "$@119",
  "opt_escape", "group_clause", "group_list", "olap_opt",
  "alter_order_clause", "alter_order_list", "alter_order_item",
  "opt_order_clause", "order_clause", "$@120", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_clause", "$@121", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@122",
  "select_var_list", "select_var_ident", "into", "$@123",
  "into_destination", "$@124", "$@125", "do", "$@126", "drop", "$@127",
  "table_list", "table_name", "opt_mapped", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "insert", "$@128",
  "$@129", "replace", "$@130", "$@131", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@132", "fields", "insert_values", "$@133", "$@134", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@135", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@136", "update", "$@137", "$@138", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@139", "single_multi", "$@140", "$@141", "$@142", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@143", "show_param",
  "$@144", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "opt_changed", "from_or_in", "binlog_in",
  "binlog_from", "wild_and_where", "describe", "$@145", "$@146",
  "describe_command", "opt_extended_describe", "opt_describe_column",
  "flush", "$@147", "flush_options", "flush_option", "$@148",
  "opt_table_list", "reset", "$@149", "reset_options", "reset_option",
  "purge", "$@150", "purge_options", "purge_option", "kill", "kill_option",
  "use", "load", "$@151", "load_data", "$@152", "$@153", "$@154",
  "opt_local", "load_data_lock", "opt_duplicate", "opt_field_term",
  "field_term_list", "field_term", "opt_line_term", "line_term_list",
  "line_term", "opt_ignore_lines", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "$@155", "opt_option", "option_value_list", "option_type_value",
  "$@156", "option_type", "option_type2", "opt_var_type",
  "opt_var_ident_type", "ext_option_value", "sys_option_value",
  "option_value", "reset_master", "internal_variable_name",
  "isolation_types", "text_or_password", "set_expr_or_default", "lock",
  "$@157", "table_or_tables", "table_lock_list", "table_lock",
  "lock_option", "unlock", "$@158", "handler", "$@159",
  "handler_read_or_scan", "handler_scan_function", "handler_rkey_function",
  "$@160", "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@161", "$@162", "$@163",
  "$@164", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "grant_list_with_opt_role",
  "opt_role", "grant_user", "opt_column_list", "column_list",
  "column_list_id", "require_clause", "grant_options", "grant_option_list",
  "grant_option", "begin", "$@165", "opt_work", "opt_chain", "opt_release",
  "opt_savepoint", "commit", "rollback", "savepoint", "release",
  "union_clause", "union_list", "$@166", "union_opt",
  "union_order_or_limit", "$@167", "order_or_limit", "union_option",
  "take_first_select", "subselect", "subselect_start", "subselect_end",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@168",
  "view_list_opt", "view_list", "view_select", "$@169", "view_select_aux",
  "view_check_option", "trigger_tail", "$@170", "$@171", "$@172",
  "udf_tail", "sf_tail", "$@173", "$@174", "$@175", "$@176", "$@177",
  "sp_tail", "$@178", "$@179", "$@180", "$@181", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@182", "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   124,    38,    45,    43,    42,    47,
      37,    94,   126,    40,    41,    44,    33,   123,   125,    59,
      64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   603,   604,   605,   604,   604,   606,   606,   607,   607,
     608,   608,   608,   608,   608,   608,   608,   608,   608,   608,
     608,   608,   608,   608,   608,   608,   608,   608,   608,   608,
     608,   608,   608,   608,   608,   608,   608,   608,   608,   608,
     608,   608,   608,   608,   608,   608,   608,   608,   608,   608,
     608,   608,   608,   608,   608,   608,   608,   608,   608,   608,
     608,   609,   610,   610,   611,   612,   612,   614,   613,   615,
     615,   616,   616,   617,   619,   618,   621,   620,   622,   622,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   624,   624,   624,   624,   626,   625,
     627,   625,   628,   625,   629,   625,   630,   625,   631,   625,
     625,   625,   625,   625,   632,   633,   633,   634,   634,   634,
     634,   634,   634,   634,   636,   635,   638,   637,   637,   639,
     639,   639,   639,   640,   640,   641,   641,   642,   642,   643,
     643,   644,   644,   646,   645,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   648,   649,
     649,   650,   650,   651,   651,   652,   652,   652,   652,   652,
     652,   652,   653,   653,   653,   654,   654,   656,   655,   657,
     657,   658,   658,   659,   659,   660,   660,   661,   661,   662,
     663,   664,   664,   665,   665,   666,   667,   667,   667,   667,
     668,   668,   669,   669,   670,   670,   672,   671,   671,   673,
     671,   671,   675,   674,   676,   676,   677,   677,   678,   679,
     679,   680,   680,   681,   681,   681,   681,   681,   682,   682,
     683,   683,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   686,   685,   688,   687,   690,
     689,   692,   691,   693,   694,   695,   697,   696,   698,   699,
     699,   699,   700,   700,   702,   703,   704,   701,   705,   705,
     705,   706,   706,   708,   709,   707,   711,   710,   712,   712,
     713,   713,   715,   716,   714,   718,   719,   717,   720,   720,
     722,   721,   723,   723,   725,   724,   727,   726,   729,   728,
     730,   731,   732,   730,   733,   730,   734,   734,   735,   735,
     735,   736,   737,   738,   739,   739,   740,   740,   741,   742,
     743,   743,   745,   744,   746,   746,   746,   747,   747,   747,
     748,   749,   749,   749,   750,   750,   750,   750,   750,   750,
     750,   750,   751,   752,   752,   752,   753,   753,   753,   753,
     753,   754,   755,   755,   755,   756,   756,   756,   756,   756,
     756,   756,   757,   758,   758,   758,   759,   759,   759,   760,
     761,   762,   763,   764,   765,   765,   765,   766,   767,   768,
     769,   770,   771,   772,   773,   774,   775,   775,   776,   776,
     777,   777,   778,   778,   778,   778,   779,   780,   779,   781,
     782,   781,   783,   781,   784,   784,   786,   785,   788,   787,
     789,   790,   791,   790,   792,   790,   793,   790,   794,   794,
     795,   795,   796,   796,   797,   798,   799,   800,   800,   801,
     802,   801,   803,   801,   804,   804,   805,   806,   807,   807,
     808,   808,   809,   809,   811,   810,   812,   813,   813,   813,
     814,   814,   815,   815,   816,   817,   817,   818,   819,   820,
     820,   821,   821,   823,   822,   824,   825,   825,   826,   826,
     827,   827,   827,   827,   827,   827,   827,   827,   829,   830,
     828,   831,   831,   832,   832,   833,   833,   834,   834,   835,
     835,   836,   836,   837,   838,   838,   839,   839,   840,   840,
     841,   841,   841,   842,   842,   842,   842,   842,   842,   842,
     842,   842,   842,   842,   842,   842,   842,   842,   842,   842,
     842,   842,   842,   842,   842,   842,   842,   842,   843,   844,
     845,   846,   847,   847,   847,   847,   847,   847,   848,   848,
     848,   849,   849,   850,   850,   850,   850,   851,   851,   852,
     852,   853,   853,   854,   854,   854,   854,   854,   854,   854,
     855,   855,   856,   857,   857,   858,   860,   859,   861,   861,
     861,   861,   861,   861,   861,   861,   861,   861,   861,   861,
     861,   861,   861,   861,   861,   861,   861,   861,   861,   861,
     861,   861,   861,   861,   861,   861,   861,   861,   861,   861,
     861,   861,   861,   862,   861,   863,   861,   861,   861,   864,
     864,   864,   864,   864,   864,   864,   864,   865,   866,   866,
     867,   867,   868,   868,   868,   868,   868,   869,   869,   869,
     869,   869,   870,   870,   870,   871,   871,   871,   872,   873,
     873,   874,   874,   875,   875,   875,   876,   876,   876,   876,
     877,   877,   878,   878,   879,   879,   880,   880,   881,   881,
     881,   881,   881,   881,   881,   881,   881,   881,   881,   882,
     882,   883,   883,   884,   884,   885,   885,   886,   886,   887,
     887,   888,   888,   889,   890,   890,   891,   891,   892,   892,
     893,   893,   893,   893,   893,   893,   894,   894,   895,   895,
     895,   895,   896,   896,   898,   897,   899,   899,   900,   900,
     901,   901,   902,   902,   903,   903,   903,   903,   903,   904,
     904,   904,   904,   904,   905,   906,   906,   907,   907,   908,
     908,   909,   909,   909,   910,   910,   911,   912,   913,   914,
     914,   915,   915,   916,   916,   917,   917,   918,   918,   919,
     919,   920,   920,   921,   921,   922,   923,   923,   924,   925,
     925,   926,   926,   926,   927,   927,   928,   928,   929,   929,
     930,   930,   931,   931,   933,   932,   934,   932,   932,   935,
     932,   936,   932,   937,   932,   938,   932,   939,   932,   932,
     932,   932,   932,   932,   940,   940,   940,   940,   941,   941,
     942,   942,   943,   943,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   945,   944,   944,   946,   944,   947,
     944,   944,   944,   948,   949,   949,   951,   950,   952,   952,
     952,   954,   953,   955,   956,   955,   957,   957,   958,   959,
     959,   960,   961,   961,   961,   962,   961,   963,   964,   961,
     961,   961,   961,   961,   961,   961,   961,   961,   961,   961,
     961,   961,   961,   965,   965,   966,   966,   967,   967,   967,
     968,   968,   968,   969,   969,   969,   969,   971,   970,   970,
     972,   970,   970,   973,   974,   974,   976,   975,   977,   977,
     978,   978,   978,   979,   979,   980,   980,   982,   981,   984,
     983,   986,   985,   987,   987,   987,   989,   988,   990,   990,
     991,   991,   992,   992,   992,   994,   993,   995,   997,   996,
     998,   998,   999,   999,  1000,  1000,  1000,  1000,  1000,  1000,
    1002,  1001,  1003,  1003,  1003,  1005,  1004,  1004,  1006,  1006,
    1007,  1007,  1008,  1009,  1010,  1010,  1011,  1012,  1012,  1014,
    1013,  1015,  1015,  1016,  1018,  1017,  1019,  1019,  1020,  1020,
    1021,  1022,  1022,  1023,  1023,  1025,  1024,  1027,  1028,  1026,
    1029,  1029,  1029,  1029,  1029,  1030,  1030,  1031,  1031,  1032,
    1032,  1033,  1033,  1033,  1033,  1033,  1033,  1033,  1033,  1033,
    1033,  1034,  1034,  1034,  1035,  1035,  1035,  1036,  1037,  1038,
    1039,  1039,  1040,  1040,  1040,  1040,  1040,  1041,  1041,  1042,
    1042,  1042,  1042,  1042,  1042,  1042,  1042,  1042,  1042,  1042,
    1043,  1043,  1043,  1043,  1043,  1043,  1044,  1044,  1044,  1044,
    1044,  1044,  1044,  1044,  1044,  1044,  1044,  1044,  1044,  1044,
    1045,  1045,  1045,  1045,  1045,  1045,  1045,  1045,  1045,  1045,
    1045,  1045,  1045,  1045,  1045,  1046,  1046,  1047,  1047,  1048,
    1048,  1049,  1049,  1050,  1050,  1050,  1050,  1050,  1050,  1051,
    1051,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,
    1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,
    1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,
    1052,  1053,  1053,  1053,  1053,  1053,  1053,  1053,  1053,  1053,
    1053,  1053,  1053,  1053,  1053,  1053,  1053,  1053,  1053,  1053,
    1053,  1053,  1053,  1053,  1053,  1053,  1053,  1053,  1054,  1054,
    1054,  1054,  1054,  1054,  1054,  1054,  1054,  1054,  1054,  1054,
    1054,  1054,  1054,  1054,  1054,  1054,  1054,  1054,  1054,  1054,
    1054,  1054,  1054,  1055,  1055,  1055,  1055,  1055,  1055,  1055,
    1055,  1055,  1055,  1055,  1055,  1055,  1055,  1055,  1055,  1055,
    1056,  1056,  1056,  1056,  1056,  1056,  1056,  1056,  1058,  1057,
    1057,  1059,  1059,  1060,  1060,  1061,  1061,  1062,  1062,  1063,
    1063,  1064,  1065,  1065,  1065,  1065,  1065,  1065,  1065,  1066,
    1067,  1065,  1068,  1069,  1065,  1070,  1071,  1065,  1072,  1073,
    1065,  1065,  1065,  1065,  1065,  1065,  1065,  1065,  1065,  1065,
    1065,  1074,  1065,  1076,  1075,  1077,  1077,  1077,  1078,  1078,
    1079,  1079,  1080,  1080,  1082,  1081,  1083,  1083,  1083,  1083,
    1083,  1083,  1083,  1083,  1083,  1083,  1083,  1084,  1084,  1085,
    1085,  1086,  1086,  1087,  1087,  1088,  1088,  1089,  1089,  1090,
    1090,  1091,  1091,  1092,  1093,  1093,  1094,  1094,  1095,  1095,
    1096,  1095,  1097,  1095,  1098,  1095,  1095,  1099,  1095,  1100,
    1095,  1095,  1101,  1095,  1102,  1095,  1095,  1103,  1103,  1103,
    1105,  1104,  1104,  1104,  1107,  1106,  1109,  1110,  1108,  1111,
    1112,  1113,  1113,  1114,  1114,  1114,  1114,  1115,  1115,  1117,
    1116,  1118,  1116,  1119,  1119,  1120,  1121,  1120,  1123,  1122,
    1124,  1124,  1125,  1125,  1126,  1126,  1127,  1127,  1128,  1128,
    1128,  1128,  1128,  1128,  1128,  1128,  1128,  1128,  1128,  1128,
    1129,  1129,  1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,
    1130,  1131,  1131,  1131,  1131,  1132,  1132,  1132,  1133,  1133,
    1134,  1134,  1135,  1136,  1135,  1137,  1138,  1137,  1139,  1139,
    1140,  1140,  1141,  1141,  1142,  1142,  1142,  1143,  1144,  1144,
    1145,  1146,  1146,  1148,  1147,  1149,  1149,  1150,  1150,  1150,
    1151,  1151,  1152,  1152,  1153,  1154,  1154,  1154,  1155,  1155,
    1155,  1155,  1156,  1156,  1157,  1157,  1157,  1157,  1157,  1157,
    1158,  1158,  1158,  1158,  1158,  1159,  1159,  1159,  1159,  1159,
    1160,  1160,  1160,  1160,  1161,  1162,  1162,  1163,  1164,  1163,
    1165,  1165,  1166,  1166,  1167,  1169,  1168,  1170,  1170,  1171,
    1171,  1173,  1172,  1175,  1176,  1174,  1174,  1174,  1178,  1177,
    1179,  1180,  1179,  1179,  1179,  1179,  1179,  1179,  1179,  1179,
    1179,  1179,  1179,  1179,  1181,  1181,  1182,  1183,  1183,  1184,
    1184,  1185,  1186,  1186,  1187,  1187,  1189,  1190,  1188,  1192,
    1193,  1191,  1194,  1194,  1194,  1194,  1195,  1195,  1196,  1196,
    1197,  1198,  1198,  1198,  1199,  1198,  1200,  1200,  1201,  1201,
    1202,  1201,  1203,  1201,  1204,  1204,  1205,  1205,  1206,  1207,
    1207,  1208,  1208,  1210,  1209,  1211,  1211,  1212,  1212,  1213,
    1213,  1214,  1215,  1214,  1217,  1218,  1216,  1219,  1219,  1220,
    1221,  1221,  1222,  1223,  1223,  1225,  1224,  1227,  1226,  1228,
    1226,  1229,  1226,  1230,  1230,  1231,  1231,  1232,  1232,  1233,
    1233,  1234,  1234,  1234,  1235,  1236,  1236,  1237,  1237,  1238,
    1238,  1239,  1239,  1239,  1239,  1239,  1239,  1239,  1239,  1239,
    1240,  1240,  1242,  1241,  1243,  1243,  1243,  1243,  1243,  1243,
    1243,  1243,  1243,  1243,  1243,  1243,  1243,  1243,  1244,  1243,
    1243,  1243,  1243,  1243,  1243,  1243,  1243,  1243,  1243,  1243,
    1243,  1243,  1243,  1243,  1243,  1243,  1243,  1243,  1243,  1243,
    1243,  1243,  1243,  1243,  1243,  1243,  1243,  1243,  1243,  1243,
    1243,  1243,  1243,  1243,  1243,  1243,  1243,  1243,  1243,  1245,
    1245,  1245,  1246,  1246,  1247,  1247,  1248,  1248,  1249,  1249,
    1250,  1250,  1251,  1251,  1252,  1252,  1253,  1253,  1254,  1254,
    1254,  1256,  1255,  1257,  1255,  1258,  1258,  1259,  1259,  1259,
    1260,  1260,  1260,  1262,  1261,  1263,  1263,  1265,  1264,  1264,
    1264,  1264,  1264,  1264,  1264,  1264,  1264,  1264,  1264,  1264,
    1264,  1264,  1266,  1266,  1268,  1267,  1269,  1269,  1270,  1270,
    1270,  1272,  1271,  1273,  1274,  1274,  1275,  1276,  1276,  1276,
    1276,  1277,  1279,  1278,  1278,  1281,  1282,  1283,  1280,  1280,
    1284,  1284,  1285,  1285,  1285,  1286,  1286,  1286,  1287,  1287,
    1288,  1288,  1289,  1289,  1289,  1289,  1290,  1290,  1291,  1291,
    1292,  1292,  1293,  1293,  1294,  1294,  1294,  1295,  1295,  1296,
    1296,  1297,  1297,  1298,  1298,  1298,  1298,  1299,  1299,  1299,
    1300,  1301,  1301,  1301,  1302,  1302,  1302,  1302,  1302,  1302,
    1302,  1302,  1302,  1302,  1302,  1302,  1303,  1303,  1303,  1303,
    1303,  1304,  1304,  1305,  1305,  1306,  1307,  1307,  1308,  1308,
    1309,  1309,  1309,  1310,  1310,  1310,  1310,  1311,  1311,  1311,
    1312,  1312,  1313,  1314,  1314,  1315,  1316,  1317,  1318,  1318,
    1319,  1319,  1320,  1320,  1320,  1321,  1321,  1321,  1322,  1322,
    1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,
    1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,
    1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,
    1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,
    1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,
    1322,  1322,  1322,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1325,
    1324,  1326,  1326,  1327,  1327,  1329,  1328,  1330,  1330,  1330,
    1330,  1331,  1331,  1332,  1332,  1332,  1332,  1333,  1333,  1333,
    1333,  1334,  1334,  1335,  1335,  1336,  1336,  1336,  1336,  1336,
    1336,  1336,  1336,  1336,  1337,  1337,  1338,  1338,  1338,  1339,
    1339,  1339,  1339,  1340,  1340,  1340,  1341,  1341,  1341,  1341,
    1341,  1343,  1342,  1344,  1344,  1345,  1345,  1346,  1347,  1347,
    1347,  1347,  1349,  1348,  1350,  1350,  1351,  1350,  1352,  1352,
    1353,  1353,  1354,  1354,  1354,  1354,  1355,  1354,  1356,  1356,
    1356,  1356,  1356,  1357,  1358,  1358,  1358,  1358,  1359,  1360,
    1360,  1360,  1361,  1361,  1362,  1362,  1363,  1363,  1364,  1364,
    1366,  1365,  1367,  1365,  1368,  1365,  1369,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1370,  1370,  1371,  1371,  1372,  1372,  1372,
    1373,  1373,  1373,  1373,  1374,  1374,  1375,  1375,  1376,  1376,
    1377,  1377,  1378,  1378,  1378,  1379,  1379,  1380,  1380,  1381,
    1382,  1382,  1382,  1382,  1382,  1383,  1383,  1384,  1384,  1385,
    1385,  1385,  1385,  1385,  1387,  1386,  1388,  1388,  1389,  1389,
    1389,  1390,  1390,  1390,  1391,  1391,  1392,  1393,  1393,  1394,
    1395,  1396,  1396,  1398,  1397,  1399,  1399,  1399,  1401,  1400,
    1402,  1402,  1403,  1403,  1403,  1404,  1405,  1405,  1406,  1407,
    1408,  1408,  1408,  1409,  1409,  1409,  1409,  1409,  1410,  1410,
    1410,  1410,  1410,  1410,  1411,  1411,  1412,  1413,  1414,  1414,
    1414,  1415,  1416,  1416,  1416,  1417,  1417,  1417,  1419,  1418,
    1420,  1420,  1421,  1421,  1423,  1422,  1424,  1424,  1425,  1425,
    1425,  1425,  1427,  1428,  1429,  1426,  1430,  1430,  1432,  1433,
    1434,  1435,  1436,  1431,  1438,  1439,  1440,  1441,  1437,  1442,
    1442,  1442,  1442,  1442,  1442,  1443,  1443,  1443,  1444,  1444,
    1445,  1445,  1445,  1446,  1446,  1447,  1448,  1447,  1449,  1449,
    1450,  1451
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     4,     1,     2,     0,     4,     0,
       2,     3,     1,     2,     0,     3,     0,     5,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     1,     3,     3,     3,     3,     0,     7,
       0,    12,     0,    12,     0,    12,     0,     6,     0,     3,
       5,     4,     3,     2,    10,     1,     3,     2,     2,     2,
       2,     2,     2,     2,     0,    13,     0,     6,     2,     0,
       1,     3,     1,     0,     2,     0,     2,     0,     1,     3,
       4,     0,     2,     0,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
       1,     0,     2,     0,     2,     2,     2,     2,     2,     3,
       3,     1,     1,     1,     2,     3,     3,     0,     4,     0,
       3,     0,     1,     3,     1,     0,     1,     3,     1,     0,
       3,     0,     1,     3,     1,     4,     0,     1,     1,     1,
       0,     3,     2,     3,     0,     3,     0,     5,     5,     0,
       7,     5,     0,     2,     1,     1,     1,     3,     1,     1,
       3,     0,     1,     1,     1,     1,     2,     1,     1,     3,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     5,     0,     2,     0,
       3,     0,     2,     2,     2,     2,     0,     6,     2,     0,
       2,     1,     1,     3,     0,     0,     0,     7,     0,     2,
       2,     1,     1,     0,     0,     8,     0,     6,     1,     2,
       1,     2,     0,     0,     6,     0,     0,     6,     0,     2,
       0,     5,     0,     1,     0,     5,     0,     2,     0,     5,
       4,     0,     0,     8,     0,     7,     1,     1,     1,     1,
       1,     2,     4,     5,     0,     4,     4,     4,     3,     3,
       2,     2,     0,     2,     1,     2,     3,     1,     1,     1,
       1,     1,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     3,     1,     1,     1,     2,
       2,     2,     1,     1,     1,     1,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     4,     0,     1,     1,     1,
       1,     1,     2,     3,     2,     4,     5,     0,     5,     0,
       0,     5,     0,     7,     0,     1,     0,     3,     0,     3,
       5,     5,     0,     4,     0,     3,     0,     3,     0,     1,
       0,     1,     1,     3,     1,     5,     5,     0,     2,     0,
       0,     7,     0,     9,     1,     3,     1,     1,     0,     2,
       0,     3,     1,     3,     0,     6,     1,     0,     4,     5,
       1,     1,     1,     3,     3,     1,     3,     1,     1,     0,
       3,     1,     3,     0,     4,     1,     0,     1,     2,     1,
       3,     4,     3,     3,     3,     4,     4,     3,     0,     0,
       6,     0,     1,     0,     1,     1,     2,     1,     1,     0,
       1,     1,     2,     1,     0,     3,     0,     1,     1,     2,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     5,     1,     1,
       3,     4,     4,     2,     2,     2,     3,     3,     4,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     3,     1,
       1,     2,     2,     7,     8,     8,     8,     8,     2,     2,
       0,     1,     2,     0,     1,     2,     0,     4,     3,     3,
       3,     1,     2,     1,     1,     3,     2,     3,     2,     2,
       1,     3,     3,     2,     3,     1,     1,     2,     1,     1,
       2,     1,     1,     1,     2,     3,     2,     3,     2,     2,
       3,     3,     3,     0,     6,     0,     6,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     2,     1,     2,     3,     2,     1,     1,     1,
       1,     1,     1,     1,     2,     0,     1,     1,     5,     0,
       1,     2,     1,     1,     1,     1,     3,     3,     3,     3,
       0,     1,     0,     1,     0,     1,     2,     1,     1,     2,
       2,     4,     1,     3,     2,     1,     2,     2,     2,     2,
       1,     2,     1,     1,     1,     1,     1,     0,     2,     1,
       1,     1,     1,     1,     0,     2,     1,     1,     0,     1,
       0,     2,     1,     2,     3,     2,     0,     1,     0,     1,
       1,     2,     0,     1,     0,     4,     1,     4,     3,     1,
       0,     1,     2,     1,     3,     3,     2,     2,     2,     1,
       1,     2,     2,     2,     1,     2,     2,     1,     1,     0,
       1,     1,     1,     1,     0,     1,     1,     1,     0,     1,
       2,     0,     1,     0,     1,     0,     1,     1,     2,     1,
       2,     1,     2,     2,     2,     3,     1,     1,     1,     1,
       3,     1,     1,     1,     4,     2,     1,     4,     0,     1,
       0,     2,     1,     3,     0,     6,     0,     5,     7,     0,
       5,     0,     5,     0,     5,     0,     4,     0,    10,     3,
       4,     3,     3,     7,     0,     3,     1,     4,     0,     3,
       0,     2,     0,     1,     0,     2,     2,     2,     2,     1,
       1,     1,     3,     4,     0,     6,     4,     0,     5,     0,
       6,     4,     1,     2,     1,     1,     0,     5,     0,     3,
       2,     0,     5,     0,     0,     6,     1,     3,     1,     1,
       3,     2,     3,     2,     4,     0,     6,     0,     0,     8,
       4,     4,     3,     3,     2,     2,     6,     5,     3,     5,
       1,     1,     1,     0,     1,     0,     1,     0,     1,     1,
       0,     2,     1,     0,     1,     1,     1,     0,     5,     3,
       0,     5,     3,     3,     0,     3,     0,     2,     1,     3,
       0,     1,     1,     0,     2,     1,     3,     0,     6,     0,
       6,     0,     5,     0,     1,     1,     0,     6,     0,     1,
       1,     2,     1,     1,     1,     0,     5,     2,     0,     5,
       0,     1,     1,     2,     1,     1,     1,     1,     1,     2,
       0,     5,     0,     1,     1,     0,     4,     4,     3,     5,
       1,     3,     3,     5,     1,     3,     2,     1,     1,     0,
       6,     1,     3,     3,     0,     2,     0,     4,     0,     2,
       1,     2,     4,     2,     3,     0,     3,     0,     0,     6,
       2,     1,     1,     2,     2,     8,     4,     0,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     2,     4,     3,     1,     1,     4,     0,     0,
       1,     1,     0,     2,     2,     1,     1,     0,     2,     3,
       3,     3,     2,     3,     4,     3,     4,     3,     4,     1,
       3,     4,     3,     3,     6,     1,     5,     6,     5,     7,
       6,     8,     5,     6,     4,     4,     5,     3,     4,     1,
       3,     3,     3,     3,     3,     3,     5,     5,     3,     3,
       3,     3,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     3,     2,     2,     2,     2,     3,     3,     5,     6,
       4,     4,     7,     2,     6,     5,     6,     6,     4,     4,
       5,     4,     6,     2,     4,     4,     4,    10,     6,     8,
       6,     4,     4,     6,     4,     4,     4,     6,     4,     7,
       7,     7,     6,     6,     6,     6,     3,     4,     6,     8,
       2,     2,     4,     8,     8,     6,     6,     2,     4,     6,
       6,     8,     8,     6,     8,     6,     2,     4,     8,     8,
       2,     2,     2,     4,     4,     4,     4,     3,     8,     4,
       6,     4,     4,     4,     6,     8,     6,     4,     6,     1,
       6,     4,     4,     4,     4,     4,     6,     4,     0,     5,
       6,     2,     3,     0,     4,     0,     3,     0,     1,     1,
       3,     4,     4,     5,     4,     4,     4,     5,     4,     0,
       0,     7,     0,     0,     6,     0,     0,     6,     0,     0,
       6,     4,     5,     4,     5,     4,     4,     4,     4,     4,
       5,     0,     8,     0,     3,     3,     1,     4,     0,     1,
       0,     2,     0,     1,     0,     3,     2,     3,     2,     1,
       2,     1,     2,     1,     1,     1,     2,     0,     1,     1,
       3,     1,     3,     1,     3,     0,     1,     0,     2,     4,
       5,     1,     1,     1,     1,     4,     1,     3,     3,     3,
       0,     6,     0,     6,     0,     8,     4,     0,     8,     0,
      10,     6,     0,     8,     0,    10,     6,     1,     2,     2,
       0,     4,     3,     6,     0,     3,     0,     0,     5,     0,
       1,     0,     1,     0,     2,     3,     3,     1,     1,     0,
       7,     0,     7,     1,     2,     0,     0,     2,     0,     2,
       0,     1,     1,     1,     1,     3,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     1,     1,     0,     2,
       0,     1,     0,     0,     3,     0,     0,     3,     2,     0,
       0,     4,     4,     2,     0,     2,     2,     3,     3,     1,
       2,     0,     1,     0,     4,     4,     2,     0,     1,     1,
       0,     1,     0,     1,     2,     1,     3,     3,     1,     1,
       1,     1,     0,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     0,     6,
       0,     1,     3,     1,     3,     0,     2,     3,     1,     2,
       1,     0,     3,     0,     0,     7,     2,     1,     0,     3,
       6,     0,     6,     4,     6,     4,     4,     5,     5,     4,
       4,     5,     6,     4,     1,     3,     1,     0,     1,     1,
       3,     1,     0,     2,     0,     1,     0,     0,     8,     0,
       0,     6,     0,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     3,     4,     0,     3,     3,     1,     2,     2,
       0,     3,     0,     5,     3,     1,     3,     1,     3,     1,
       1,     0,     1,     0,     4,     0,     1,     3,     1,     1,
       1,     0,     0,     6,     0,     0,    11,     3,     1,     3,
       3,     1,     3,     0,     1,     0,     4,     0,     6,     0,
       5,     0,     6,     1,     3,     3,     5,     0,     2,     0,
       2,     1,     1,     1,     3,     0,     1,     0,     1,     1,
       3,     1,     1,     2,     2,     2,     1,     1,     1,     1,
       0,     3,     0,     3,     2,     4,     4,     3,     4,     4,
       2,     1,     3,     3,     6,    16,     2,     2,     0,     6,
       4,     5,     2,     2,     2,     1,     1,     1,     5,     5,
       2,     2,     1,     4,     4,     3,     2,     2,     2,     3,
       2,     2,     1,     3,     4,     3,     3,     2,     2,     3,
       3,     3,     3,     3,     1,     1,     3,     3,     3,     1,
       1,     1,     1,     1,     0,     1,     0,     2,     0,     1,
       0,     1,     1,     1,     0,     2,     0,     2,     0,     2,
       2,     0,     4,     0,     4,     1,     1,     0,     1,     1,
       0,     1,     1,     0,     4,     3,     1,     0,     3,     4,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     0,     3,     3,     1,     1,     1,
       2,     0,     3,     3,     2,     2,     3,     0,     1,     1,
       1,     2,     0,     4,     5,     0,     0,     0,    17,     2,
       0,     1,     0,     1,     1,     0,     1,     1,     0,     2,
       2,     1,     3,     4,     3,     3,     0,     2,     2,     1,
       3,     3,     0,     3,     0,     3,     2,     3,     1,     1,
       2,     0,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     2,     2,     2,     1,     1,     1,     1,
       1,     1,     1,     3,     5,     1,     1,     1,     1,     1,
       3,     4,     5,     1,     5,     3,     2,     1,     3,     2,
       2,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       4,     0,     1,     1,     3,     0,     2,     1,     1,     1,
       1,     0,     1,     0,     1,     1,     1,     0,     2,     2,
       2,     1,     2,     4,     5,     4,     6,     2,     3,     3,
       3,     5,     3,     8,     0,     2,     1,     3,     3,     2,
       2,     2,     1,     1,     4,     4,     1,     1,     1,     1,
       1,     0,     4,     1,     1,     1,     3,     3,     1,     1,
       2,     2,     0,     3,     4,     3,     0,     7,     1,     2,
       1,     1,     1,     1,     1,     1,     0,     5,     1,     1,
       1,     1,     1,     3,     6,     6,     6,     7,     3,     8,
       8,     8,     0,     1,     1,     2,     0,     1,     1,     3,
       0,     3,     0,     3,     0,     3,     0,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     3,     2,     2,     2,     2,     2,     2,     2,
       2,     1,     1,     0,     1,     3,     1,     2,     2,     2,
       1,     3,     3,     1,     1,     3,     1,     3,     2,     4,
       0,     2,     4,     5,     1,     0,     3,     3,     1,     1,
       0,     2,     2,     2,     2,     0,     2,     2,     1,     2,
       2,     2,     2,     2,     0,     3,     0,     1,     0,     3,
       2,     0,     1,     2,     0,     1,     4,     4,     5,     2,
       3,     0,     1,     0,     4,     0,     1,     1,     0,     2,
       2,     1,     0,     1,     1,     0,     5,     6,     0,     0,
       2,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     3,     1,     2,
       1,     2,     3,     3,     3,     0,     3,     3,     0,     7,
       0,     3,     1,     3,     0,     3,     2,     4,     0,     3,
       4,     4,     0,     0,     0,    16,     8,     7,     0,     0,
       0,     0,     0,    15,     0,     0,     0,     0,    12,     4,
       4,     3,     4,     3,     2,     1,     3,     5,     1,     1,
       0,     1,     1,     0,     2,     0,     0,     3,     0,     2,
       5,     3
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2356,   932,     0,  2304,     0,     0,     0,     0,     0,
       0,  2306,   108,    62,  1535,  1655,  1656,  1448,  1474,     2,
       0,   932,   158,     0,    74,  1476,     0,  1697,     0,     0,
     932,   408,     0,  1691,     0,     0,   932,  1479,  1684,     0,
     158,  2306,     0,   967,  2131,  1572,     0,     0,     0,  1555,
       0,  2192,  1524,     0,     0,     0,     0,     3,     8,    20,
       0,    39,    25,    29,    15,    19,    14,    37,    10,    53,
      54,    46,    12,    17,    43,    11,    13,    16,    35,    42,
      36,    38,    50,   960,    23,    24,    30,    44,    58,    21,
      55,    52,    22,  1657,    26,    45,    40,    32,    59,    33,
      51,    34,    57,    28,    47,    27,     9,    18,    48,    49,
      41,    60,    31,    56,     0,   802,     0,     0,   866,     0,
       0,     0,     0,     0,   785,  2354,  2355,  2356,   934,   933,
       0,  2184,  2183,   899,  2306,  1795,   917,     0,  1863,  1864,
    1865,  1866,  1867,  1868,  1869,  1809,  1870,  1871,  1873,  1872,
    1874,  1875,  1810,  1811,  1876,  1877,  1878,  1879,  1881,  1880,
    1882,  1812,  1813,  1883,  1884,  1885,  1814,  1815,  1886,  1887,
    1816,  1888,  1889,  1890,  1891,  1817,  1892,  1818,  1893,  1894,
    1895,  1896,  1897,  1898,  1819,  1899,  1900,  1901,  1902,  1904,
    1903,  1905,  1906,  1907,  1820,  1908,  1909,  1910,  1911,  1912,
    1913,  1914,  1821,  1915,  1916,  1917,  1934,  1822,  1918,  1921,
    1920,  1919,  1922,  1923,  1925,  1924,  1926,  1823,  1927,  1928,
    1929,  1930,  1932,  1931,  1936,  1937,  1938,  1824,  1933,  1939,
    1935,  2110,  1941,  1940,  1942,  1944,  1825,  1943,  1826,  1945,
    1827,  1828,  1946,  1947,  1793,  1948,  1794,  1949,  1951,  1952,
    1953,  1954,  1959,  1960,  1829,  1950,  1955,  1956,  1957,  1958,
    1961,  1830,  1962,  1963,  1964,  1965,  1966,  1967,  1968,  1969,
    1970,  1971,  1831,  1981,  1974,  1976,  1977,  1979,  1975,  1980,
    1984,  1983,  1985,  1986,  1987,  1982,  1973,  1978,  1988,  1989,
    1972,  1990,  1991,  1992,  1993,  1994,  1995,  1996,  1997,  1998,
    1999,  2000,  2002,  2001,  2003,  2004,  2005,  2006,  2007,  2009,
    2008,  2010,  2011,  2012,  2014,  2013,  2016,  2017,  1832,  2015,
    2018,  2019,  2020,  2021,  2022,  1833,  1834,  1835,  1836,  2023,
    2024,  1837,  2025,  2026,  2027,  1838,  2028,  2029,  2031,  2030,
    2032,  2033,  1839,  1840,  2034,  2035,  2036,  2037,  2038,  2039,
    2040,  2041,  2042,  2043,  2044,  2045,  2046,  2048,  2047,  2049,
    2050,  2051,  2052,  2053,  1841,  2054,  1842,  2055,  2056,  1843,
    2057,  1844,  2058,  2059,  1845,  1846,  2060,  2061,  2062,  2063,
    2064,  2065,  1847,  2066,  2067,  1848,  2069,  2068,  2070,  1849,
    2072,  2073,  1850,  2071,  1852,  2074,  1851,  1853,  2075,  2076,
    2078,  2077,  2079,  2080,  2081,  1854,  2082,  1855,  2083,  2084,
    2085,  2086,  2088,  2087,  2089,  2090,  2091,  2092,  2093,  2096,
    2095,  2094,  2097,  2098,  2099,  2100,  2103,  2104,  2105,  2106,
    2101,  2102,  1856,  2107,  2108,  2109,  2111,  2112,  2114,  2113,
    1857,  1858,  2115,  1859,  2116,  1862,  2117,  2118,  2119,  2122,
    2120,  2121,  2124,  2123,  2125,  2126,  1860,  2127,  1861,  2128,
     177,  1798,   160,  1799,  1808,     0,   901,   918,  2307,  2308,
     494,   736,     0,  1468,     0,   737,     0,   493,   735,  2356,
     113,     0,   490,   491,     0,     0,     0,     0,  1549,     0,
    1472,  1472,  1472,     0,     0,  1472,  1472,     0,  1475,  1472,
    1472,     0,     0,    67,  1663,     0,     0,     0,     0,  1792,
       0,  1482,     0,  1698,  1700,  1699,     0,  1702,     0,     0,
    2181,     0,     0,     0,     0,     0,   158,   935,     0,  1533,
       0,   897,     0,  2308,  2319,   961,   965,   977,  2132,  2129,
    1638,   886,   886,   886,   884,   886,  1556,     0,     0,     0,
    1533,  1701,  2408,     0,     0,     0,  2404,     0,  2409,     0,
     967,     0,     0,     1,     5,     0,     0,  1928,  2027,  1653,
    1651,  1787,     0,   776,   803,     0,   781,     0,   779,  1804,
    1803,  1802,     0,   792,   791,   789,     0,   372,     0,     0,
    2365,   783,   915,     0,  2305,     0,   944,   954,   179,     0,
      76,     0,     0,     0,  2311,     0,     0,     0,     0,   112,
       0,     0,   109,   998,   998,  2356,  2358,  2360,   494,   492,
       0,     0,     0,   158,  1553,  1552,  1551,     0,  1549,  1864,
    1809,  1875,     0,  1760,     0,     0,     0,  1255,     0,  1814,
       0,  1888,  1890,  1819,     0,     0,  1007,  1007,  1007,     0,
       0,     0,  1906,  1907,  1769,     0,     0,     0,  1757,  1770,
    1941,  1942,     0,  1945,  1759,  1947,     0,     0,     0,     0,
    1966,  1767,     0,     0,  1997,  1999,     0,     0,  2003,  2004,
    2005,  2006,  1744,  1062,     0,  1007,  1756,  1766,  2020,  1835,
    1750,  2028,  2032,  2033,     0,  2041,     0,     0,     0,  2064,
    2067,     0,     0,  2085,     0,     0,  1007,  1743,  2103,  2104,
    2105,  2106,     0,  1758,  1856,  1768,     0,  1859,  2117,  1007,
    1007,  1007,     0,     0,     0,  2125,  2128,     0,     0,     0,
       0,  1061,     0,  1223,     0,  1249,  1019,  1025,  1039,     0,
    1054,  1072,  1073,  1075,  1169,  1074,  1080,  1079,  1449,  1754,
    1078,  1077,  1755,  1071,  1777,  1798,  1776,     0,     0,     0,
       0,     0,     0,     0,     0,  1634,     0,     0,   158,  1472,
      69,     0,  2226,  2241,  2242,  2238,  2243,  2261,  2244,  2248,
       0,  2240,  2232,     0,  2247,  2236,  2245,     0,  2230,     0,
    2246,  2251,  2262,  2234,  2239,  2218,     0,  2224,  2228,  1789,
    1355,  2195,  2196,     0,    75,  1484,  1485,  1483,   865,     0,
    1696,  1712,     0,     0,     0,   930,   418,   409,     0,  1633,
    1632,     0,  1692,  2320,     0,     0,   906,  1487,  1534,     0,
    1486,  1689,     0,  1688,  1685,  1687,     0,  2226,  2213,     0,
    2314,  2311,  2321,   990,   983,   982,   985,   986,   989,   987,
     988,   984,   981,   998,   978,   980,  2135,  1595,     0,  1641,
     672,     0,  1648,     0,  1596,     0,     0,  1648,     0,  1390,
    1636,  1639,     0,  2144,  1612,   733,   732,     0,   731,  2145,
    1632,     0,     0,     0,  1581,  1597,     0,  1557,  1602,  2146,
       0,  1635,  1624,     0,  1625,  1390,  1648,     0,  1573,     0,
       0,     0,     0,     0,   880,   890,   882,   877,     0,   883,
     879,  1554,  1466,  2421,  2193,   865,  1749,  1748,  1796,  2405,
    1747,  2413,  2415,  2401,  2403,  2410,   963,     0,  2325,     6,
      61,     0,  1660,  2363,  2364,  2362,   688,     0,  1007,  1805,
    2357,   161,   790,     0,   373,   161,     0,     0,     0,     0,
       0,   374,   375,   311,   774,   787,     0,     0,   786,  2365,
       0,     0,  1464,     0,     0,   946,   956,   181,   178,   159,
       0,   903,   920,  2310,     0,     0,  2312,  2316,  1060,  1059,
       0,   106,   111,     0,     0,     0,  2361,   998,   998,   998,
    2353,     0,  2341,  2348,  2349,  2352,  2351,  2350,  2347,     0,
    2340,  2343,  2344,  2346,  2345,  2365,  2359,     0,   738,   738,
     738,     0,     0,  1536,  1539,  1543,  1547,  1550,     0,     0,
    1360,  1093,  1360,  1360,  1360,  1256,     0,     0,     0,     0,
       0,     0,     0,     0,  1360,     0,  1130,  1103,     0,  1131,
       0,     0,     0,     0,     0,  1763,     0,     0,     0,     0,
       0,     0,  1228,  1208,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1251,  1253,  1776,  1360,     0,     0,  1360,
       0,     0,     0,     0,     0,  1012,     0,  1137,     0,  1202,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1360,  1360,     0,     0,  1360,     0,  1146,     0,  1765,     0,
       0,     0,  1764,     0,     0,  1762,  1761,  1745,  1205,     0,
    1150,  1152,  1151,     0,  1360,  1360,     0,     0,  1083,  1082,
    1084,  2338,     0,     0,     0,     0,     0,     0,  1058,  1057,
    1056,  1055,     0,     0,     0,  1063,     0,  1064,  1065,     0,
    1066,  1067,  1068,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1085,     0,     0,     0,  1746,  1178,     0,  1473,
    1453,  1459,  1455,     0,  1634,  1456,  1463,   386,     0,  1460,
     867,     0,     0,     0,    68,  1678,  1671,  1673,  1677,  1672,
       0,  1679,  1676,  1675,  1674,  2184,  1680,  1681,  1664,  1666,
    1667,  2227,  2225,  2259,  2258,     0,  2260,  2256,  2249,  2285,
    2253,  2285,  2255,  2254,  2285,  2250,  2257,  2285,  2222,     0,
    1356,  1357,     0,  2194,     0,  1788,     0,     0,  1713,     0,
    1714,  1703,  1710,   949,     0,  1355,  2182,  2185,     0,   419,
     416,   414,   427,     0,     0,    64,    65,     0,   937,     0,
     936,   940,     0,     0,     0,  1490,  1480,  1489,  1690,     0,
       0,  2225,  2222,  2315,     0,  2317,  2332,   966,  2322,   996,
     968,   995,     0,   979,  2130,  2133,  2141,  1644,     0,   671,
       0,     0,  1611,  1592,     0,   494,     0,     0,     0,     0,
       0,     0,  1574,     0,     0,   531,     0,  1601,  1391,  1642,
    1643,  1648,     0,     0,  1648,     0,  1606,  1617,  1607,     0,
    1636,     0,  1648,  1569,     0,     0,  1561,  1566,  1562,     0,
    1568,  1567,  1570,  1558,  1559,  1587,  1618,  1636,  1593,  1600,
    1610,     0,  1586,  1594,     0,  1580,  1608,  1636,  1636,     0,
    1648,  1648,   893,   892,   891,   887,   888,   893,     0,  1290,
       0,     0,  2402,  2416,  2400,  2411,  2412,  2399,   964,  2326,
     962,  2327,     0,     7,     4,  1654,  1652,  1661,  1662,   689,
     688,   485,   488,   487,     0,     0,  1807,     0,   782,     0,
    1634,   780,     0,     0,  1634,   322,  1634,   376,   688,   794,
       0,     0,   784,   916,     0,     0,   948,   943,   947,   945,
     728,   727,     0,   955,     0,   182,   184,    92,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    77,    78,    93,   905,   904,   902,
     928,   927,   925,     0,   926,   924,   919,   921,   922,  2309,
    2313,   495,   688,  1634,     0,   314,     0,     0,     0,   494,
       0,     0,  2342,    98,   739,     0,     0,     0,  2284,     0,
     110,  2280,  1541,  1469,  1537,  1471,  1787,     0,     0,     0,
    1355,     0,     0,  1361,  1360,     0,  1234,     0,     0,     0,
       0,  1257,     0,     0,     0,     0,     0,     0,     0,  1199,
       0,  1234,  1008,     0,  1157,     0,     0,     0,     0,     0,
    2338,     0,  1329,  1330,  1331,  1332,  1342,  1333,  1334,  1335,
    1344,  1349,  1336,  1337,  1345,  1346,  1347,  1338,  1348,  1343,
    1339,  1350,     0,  1328,     0,  1353,  1351,  1354,  1352,     0,
    1229,  1221,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1360,     0,     0,     0,  1360,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1360,     0,     0,     0,  1341,     0,  1340,     0,
       0,     0,     0,     0,     0,     0,     0,  1126,     0,  1779,
    1778,     0,     0,     0,     0,   967,     0,  1087,     0,  1086,
       0,  2147,  1224,  1226,     0,  1010,  1009,  1011,  1022,  1015,
    1020,  1013,  1017,     0,  1069,  1869,  1023,     0,     0,  1051,
       0,  1369,  1052,  1037,  1042,  1043,     0,  1040,  1041,     0,
    1045,     0,  1044,  1048,  1049,  1050,  1053,     0,     0,     0,
       0,  1076,  1081,  1250,   998,  1780,     0,  1451,   386,   389,
     388,  1461,   387,  1511,   869,   868,  1458,  2274,  1457,   867,
       0,    70,    72,  1670,     0,     0,  1682,  2252,     0,  2233,
    2237,  2231,  2235,     0,     0,  2223,     0,  2229,  1359,  1937,
    2013,     0,  1362,  2198,  1477,  2420,  1709,  1711,     0,     0,
    1704,     0,     0,   931,     0,     0,     0,   429,   412,     0,
      66,     0,     0,  1693,     0,     0,     0,     0,   908,  1488,
       0,  1686,     0,     0,     0,     0,     0,  2318,  2334,  2333,
    2323,   998,  1381,   999,  1001,  1000,  1776,  2135,  2138,  2139,
    2142,  2140,     0,  2137,  2136,  2151,     0,  1646,     0,  1649,
    1650,     0,     0,  1628,  1620,  1619,  1615,  1621,  1616,  1631,
    1630,  1629,  1583,  1582,  1400,  1401,  1399,  1394,  1395,  1398,
    1577,  1637,  1627,  1623,  1613,     0,  1648,  1626,  1622,  1563,
    1564,  1565,     0,  1390,     0,  1648,  1636,     0,  1648,  1648,
    1648,  1605,  1609,     0,   881,   890,   878,   885,  1300,  1299,
       0,  1264,     0,  1266,  1263,  1262,  1261,     0,  1299,  2406,
    2414,  2418,     0,  1390,  2331,  2329,   486,  1511,  1511,     0,
    1806,     0,     0,     0,     0,     0,     0,     0,   162,   171,
       0,     0,   320,   321,  1511,   319,   362,   363,   366,   367,
     368,     0,     0,     0,     0,     0,     0,     0,     0,   115,
     369,  1511,  1511,   316,   342,   343,   346,   347,   348,   349,
     350,   312,     0,   317,   863,   863,     0,  1511,  1511,   863,
    1511,     0,     0,  1511,  1511,     0,     0,  1511,     0,     0,
     863,     0,  1511,   861,     0,     0,  1511,  1511,  1511,  1511,
     863,     0,     0,  1511,   406,  1511,     0,     0,   873,     0,
       0,  1511,     0,     0,  1511,  1511,  1511,   810,   860,   498,
     518,   519,   775,   809,   811,   822,   404,     0,   839,   862,
       0,   796,   798,  2366,  2367,  2368,   900,  1465,  1320,   180,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   929,   923,
     107,   688,  1511,  1511,  1511,  1511,   318,   351,   352,   355,
     356,   357,   358,   361,   359,   360,     0,     0,  1634,     0,
    2394,     0,     0,     0,   160,   496,     0,     0,   740,     0,
       0,     0,     0,     0,     0,  2278,     0,     0,  1362,     0,
    1790,  1544,  1290,  1548,  1547,  1545,     0,  1153,     0,  1192,
       0,  1194,  1195,  1196,     0,     0,     0,     0,     0,  1154,
       0,  1101,  1155,  1156,     0,     0,     0,     0,  1198,     0,
    1132,     0,     0,  1104,  1105,  1098,  1090,     0,  1171,     0,
       0,  1209,  1106,     0,     0,     0,     0,     0,  1172,  1252,
       0,  1254,  1780,     0,  1213,  1159,  1111,     0,  1211,     0,
    1112,  1173,  1174,  1175,  1138,  1161,  1203,  1162,     0,  1177,
       0,  1163,     0,     0,     0,     0,  1114,  1217,  1215,     0,
       0,     0,     0,  1219,  1147,  1116,     0,     0,     0,  1115,
       0,     0,     0,     0,     0,     0,     0,  1118,     0,  1206,
    1099,  1216,  1218,  1167,     0,  1127,  2335,  2335,     0,  1091,
       0,     0,     0,     0,     0,  1781,  1016,  1021,  1014,  1018,
       0,     0,     0,     0,     0,  1035,  1034,     0,     0,     0,
       0,  1369,  1038,     0,     0,  1188,  1189,  1247,     0,  1454,
    1452,  1462,  1509,  1510,  1512,     0,     0,  1450,    73,     0,
       0,  1665,  1683,  1668,  2289,     0,  2288,  2270,  2273,  1787,
       0,     0,     0,  2208,  2202,  2209,  2211,  2205,  2210,  2212,
    2203,  2204,  2199,  2206,  1363,  1392,     0,     0,   950,   951,
     954,     0,  2188,  2189,  2187,  2186,   998,   417,   415,  1425,
    1426,  1411,  1412,  1410,  1413,   428,  1414,  1424,     0,   440,
       0,   420,  1695,  1694,     0,   938,   941,   942,   913,   912,
     914,   907,   909,   910,   478,  1494,     0,     0,     0,  1500,
    1481,  1491,   898,     0,     0,     0,     0,     0,   994,  1290,
    1441,   991,   972,  1392,  1382,   971,  1002,     0,  2134,     0,
    2101,  2166,     0,     0,     0,     0,     0,     0,     0,  2152,
    1645,     0,  1588,  1418,  1419,  1417,  1415,  1416,  1590,     0,
    1614,     0,     0,     0,  1579,     0,  1603,  1560,  1578,  1362,
    1636,  1575,  1576,  1604,   895,   894,   889,  1299,  1290,     0,
       0,  1287,  1301,     0,  1301,  1290,  1290,     0,  1290,  1355,
    1296,     0,     0,  2417,  1383,  2330,     0,     0,   778,   165,
     168,   166,     0,   167,     0,     0,   371,   370,     0,  1634,
     364,   119,   118,   120,   121,  1408,  1409,  1405,  1406,  1404,
    1407,   123,   122,   117,   793,     0,     0,     0,  1634,   344,
     323,   324,   327,   328,   329,   864,   768,   932,   843,     0,
     560,   768,   724,   729,   729,   841,     0,   932,     0,     0,
       0,     0,     0,   932,     0,     0,     0,  1511,     0,   854,
     805,     0,     0,     0,     0,     0,   855,     0,   806,  1511,
       0,     0,     0,     0,     0,   932,     0,     0,     0,     0,
     932,   823,   876,   875,   874,     0,   932,   932,     0,   524,
     525,   523,     0,     0,     0,   499,   688,   807,   405,   808,
     563,     0,   870,   560,   566,  1783,     0,     0,     0,   129,
    2370,  1323,     0,  1324,  1321,  1322,   183,    84,    80,    94,
      95,    82,    83,    87,    86,    88,    89,    90,    85,    91,
      81,    96,    97,    79,     0,     0,     0,     0,  1634,   353,
       0,     0,  1511,   313,   330,   331,   334,   335,   336,   337,
     338,   341,   339,   340,     0,     0,   307,   306,     0,   124,
    2388,     0,     0,   563,    99,   404,   497,   500,   761,   763,
     762,   754,   753,   100,   102,   104,     0,  2280,  2281,  1470,
    1547,  1290,  1381,  1788,  1362,     0,  1355,     0,     0,  1193,
    1235,     0,  1258,     0,  1095,   650,   650,  1245,  1243,   635,
     650,  1239,  1244,  1241,     0,   674,     0,   673,     0,     0,
       0,  1200,  1197,     0,     0,     0,     0,  1232,     0,     0,
       0,     0,  1100,     0,  1183,  1214,  1212,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1220,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2339,  2339,  1088,  2148,  2149,  2150,   770,
    1225,     0,  1032,  1028,     0,  1026,  1368,  1047,  1046,     0,
       0,     0,  1036,   999,  1179,   998,     0,  1248,  1782,   385,
     530,  2275,    71,  1669,  2286,     0,     0,     0,     0,     0,
       0,     0,     0,  2197,  1393,  1521,  1797,  1705,     0,   958,
    2190,  2191,     0,   418,     0,   410,   413,     0,   421,   422,
     424,     0,   911,   977,     0,  1513,  1498,  1505,  1499,     0,
       0,     0,  1497,  1772,  1771,  1778,  2321,     0,     0,     0,
       0,  2324,  1362,  1362,  1435,     0,     0,   969,   974,   970,
     973,     0,   997,  1006,  1005,  1773,  1780,     0,     0,     0,
       0,     0,     0,   676,   675,   684,     0,     0,     0,  2147,
       0,   680,   682,   681,  2157,   679,  1647,  1390,  1599,  1598,
    1397,  1396,     0,  1571,  1591,  1648,     0,  2328,  1294,     0,
    1289,  1288,  1302,     0,  1290,  1301,  1301,     0,  1269,  1268,
    1525,  1528,     0,  1267,  1318,  1292,   977,  2407,  2419,     0,
     687,   686,   529,   683,   528,   170,   169,   175,   176,   391,
     377,   390,   365,   116,   378,   379,   345,     0,   325,   565,
     769,   826,     0,     0,     0,   729,   559,   768,   558,   561,
     738,   730,   768,   768,     0,     0,   510,   507,   845,   513,
     824,   817,   825,   836,   838,     0,   509,   526,     0,     0,
     515,   768,   812,   852,   853,   867,   503,     0,   539,   540,
     538,   520,   527,   505,   506,   847,     0,  1377,  1379,  1387,
     512,   511,   407,   508,     0,   858,   831,     0,   537,   535,
     532,   534,   533,   536,   516,   514,   504,  1682,   863,   863,
     840,     0,   547,   549,   550,  1786,     0,   872,   842,     0,
     551,   552,     0,     0,     0,   139,     0,     0,   795,     0,
     132,   130,   141,     0,     0,   957,     0,   384,   383,   382,
     381,   354,     0,     0,     0,  1634,   332,     0,  2395,   310,
     308,   309,     0,     0,   185,   545,   546,   544,   543,     0,
     394,     0,  1838,   392,     0,     0,  1715,   688,   501,     0,
       0,     0,     0,  2282,  2279,     0,  1362,  1402,  1791,  1540,
    1546,     0,  1128,  1259,     0,     0,   651,  1236,   690,     0,
    1246,   637,   636,  1238,  1240,  1242,  1094,  1102,  1170,  1097,
    1096,     0,     0,     0,  1135,  1136,  1230,  1233,  1210,     0,
       0,  1108,     0,  1110,     0,     0,  1185,  1160,  1204,  1176,
    1139,  1164,     0,  1113,  1089,     0,  1140,     0,  1145,  1143,
       0,  1117,     0,     0,  1124,     0,  1122,     0,  1123,     0,
    1125,  1166,  1207,  1168,  2336,     0,     0,  1227,  1024,     0,
    1033,  1030,     0,  1027,  1002,  1190,  1180,  2287,  2272,  2271,
    2290,  2276,  2290,  2290,     0,  1364,     0,  1478,  1715,   952,
       0,   953,   999,   437,     0,   444,     0,   442,   411,     0,
     939,   998,  1495,  1507,     0,  1515,     0,     0,  1492,  1502,
       0,     0,     0,  1501,     0,  2215,  2216,  2214,  1392,  1370,
       0,     0,  1447,     0,  1442,   992,     0,  1004,  1003,     0,
    2168,     0,  2167,  2179,  2180,  2177,  2178,  2176,  2153,     0,
    2162,     0,  2159,  2158,     0,     0,     0,  2173,  2160,     0,
       0,  1589,     0,  1584,   896,     0,  1290,  1265,  1290,  1276,
       0,     0,  1290,  1272,  1270,  1274,     0,  1362,     0,  1291,
    1315,   998,  1775,  1384,  1387,   326,   828,   562,   768,   725,
     726,   738,     0,   738,   738,     0,     0,   816,     0,   920,
       0,   821,   684,   521,   851,   850,   522,     0,   814,     0,
    1388,  1389,  1380,   813,   833,   819,     0,   844,   563,   871,
     704,   631,   580,   571,   650,   574,   573,   617,   588,   585,
     635,   633,   603,   635,   635,   610,   609,   627,   613,   593,
     690,   690,   592,   630,   690,   614,   612,   616,     0,   618,
     635,   623,   611,   615,   632,   608,   605,   629,   650,   650,
     586,   589,   628,   690,     0,   621,   650,   654,   591,   690,
     696,     0,     0,   650,   652,  1785,   140,   128,     0,     0,
     797,   799,     0,     0,   800,  2372,     0,  2374,  1325,     0,
     315,   380,   333,     0,   196,   998,     0,     0,   186,   188,
     189,     0,     0,     0,   496,  1717,  1716,   393,   481,   502,
       0,     0,     0,  2283,  1547,  1542,     0,  1538,     0,  1260,
       0,     0,     0,     0,   696,   698,   692,   696,     0,  1237,
       0,  1201,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1092,     0,  1181,     0,     0,     0,     0,     0,     0,
    1121,  1119,  1120,  2337,   771,  1029,     0,  1191,     0,     0,
    2295,  2295,  2295,  1520,  1519,     0,  1518,  1522,     0,   959,
       0,     0,     0,     0,   441,     0,   423,   479,     0,     0,
       0,  1516,  1504,  2325,  1493,  1496,  1780,  2217,   976,     0,
    1365,  1446,  1443,     0,  1436,  1438,  1440,     0,  1774,     0,
       0,  2172,  2154,     0,   685,     0,     0,     0,     0,  2155,
       0,  1355,  1295,     0,  1261,  1290,  1290,     0,  1261,     0,
       0,     0,  1527,  1381,  1529,  1319,     0,  1297,     0,  1386,
       0,     0,   827,     0,     0,     0,     0,     0,   857,     0,
     870,   818,   837,   859,   654,   932,  1378,   832,   834,   908,
     517,   548,   710,   579,   572,   590,   639,   634,     0,   639,
     639,   599,   617,   594,     0,   690,   607,   598,   619,   622,
     624,   626,   639,     0,   690,   587,   596,   583,   639,   662,
       0,     0,     0,   658,     0,   703,     0,   665,   567,   655,
     657,     0,     0,   620,   690,   576,   697,   696,   578,   690,
     696,   639,     0,   653,   639,     0,   126,   131,   142,   143,
     788,  2371,     0,  2369,     0,     0,     0,   199,   197,   198,
       0,   192,   194,   189,  2382,     0,  2389,     0,     0,  2387,
     395,   397,   404,   482,     0,     0,  1387,   766,     0,     0,
    1403,  1129,   648,   646,   649,   647,   691,   699,   700,     0,
     695,   693,   696,     0,  1133,  1134,  1231,  1222,  1158,     0,
    1109,  1182,     0,     0,  1165,  1141,  1144,  1142,  1148,  1149,
    1031,     0,     0,  2294,  2292,     0,  2293,  2291,  2263,  2277,
       0,  2220,  2221,  2219,  2207,     0,     0,     0,   425,   998,
     430,     0,   447,   446,   443,  1392,  1506,  1508,  1514,  1503,
       0,  1366,  1381,   677,  1439,     0,   993,  2170,  2169,  2171,
       0,  2161,     0,     0,     0,     0,  1293,  1277,     0,  1281,
    1286,  1282,     0,  1273,  1271,     0,  1402,  1307,  1308,     0,
       0,  1313,  1317,  1392,  1387,   830,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   856,  1751,   846,
     848,   815,     0,   820,     0,     0,     0,   705,   706,   711,
     713,   643,   644,   645,   600,   640,   642,     0,   602,   570,
     595,   625,   601,     0,   597,   584,   668,   667,  1007,   660,
     670,     0,     0,   666,   656,   664,   659,   575,   577,   581,
     582,   568,     0,   569,  1784,   133,   801,   247,  2373,   967,
       0,  2378,   114,  2386,  2396,   196,     0,     0,   137,     0,
     187,   190,  2325,  1715,     0,   400,   741,     0,   765,     0,
     743,   745,   701,   694,     0,     0,  1184,  1186,  2269,  2268,
    2267,  2264,     0,     0,     0,     0,     0,     0,  2296,  2298,
    1517,     0,     0,     0,   438,     0,   434,   436,     0,   466,
     480,   991,   541,  1374,  1387,     0,  1392,     0,  1444,  1437,
       0,  2175,  2174,  2156,     0,     0,     0,     0,     0,     0,
    1326,  1526,  1303,  1303,  1314,  1298,  1385,   829,     0,     0,
     741,     0,     0,  1753,  1752,   870,     0,   716,   717,   718,
       0,     0,     0,   709,   712,   641,     0,   772,     0,   669,
    1007,   663,     0,   135,   273,     0,   259,   245,     0,     0,
       0,   249,   144,   147,   145,     0,   146,   152,     0,   153,
     154,   155,   156,   157,   148,   271,   272,   151,   149,   150,
       0,  1800,     0,  1801,  2376,     0,     0,  2375,   163,   193,
       0,     0,   129,   138,  2390,   398,   396,     0,  2321,  1511,
     101,   742,   757,   756,   747,  1387,     0,     0,   103,   744,
     759,   751,   105,   746,   758,   749,   638,  1107,  2265,  2299,
    2302,  2300,  2301,  2303,  2297,     0,  1706,   999,     0,   431,
     432,     0,     0,     0,  1511,     0,     0,  1511,  1511,  1511,
    1511,   459,   467,   469,     0,   542,     0,     0,  1371,  1373,
    1367,  1427,   678,  1718,  2164,     0,  1278,     0,  1283,     0,
    1275,     0,     0,  1311,  1309,     0,   741,   553,   743,   745,
     849,     0,   720,     0,   719,     0,   714,   715,   710,     0,
     690,     0,   690,   661,   134,     0,   127,     0,     0,   258,
     261,     0,     0,   264,   254,   253,   255,     0,   248,   247,
     247,   301,   252,   298,   297,   290,  2325,     0,     0,     0,
    2397,   195,   998,   141,     0,   402,   401,     0,   748,   764,
     767,     0,   752,   750,  1523,  1531,     0,   677,     0,   439,
     438,   435,     0,     0,     0,  1511,  1511,     0,     0,     0,
       0,     0,   445,   468,  1511,  1375,  1376,  1387,     0,   975,
       0,  1726,     0,  2163,     0,     0,     0,  1327,     0,  1304,
       0,     0,     0,   557,   556,   554,   555,     0,   722,   723,
     721,   707,   708,   604,   773,   606,   136,   274,   285,   288,
     280,   260,     0,     0,     0,   250,   247,     0,   234,   232,
     233,   239,   240,   241,   242,   243,   244,   235,   238,   236,
     237,   247,     0,   204,     0,     0,  2377,     0,  2379,     0,
     173,   172,   164,     0,   247,  2383,     0,  2391,  2325,   755,
     760,     0,     0,  1707,   426,   433,     0,   455,   457,   458,
     452,     0,   448,   450,   451,   477,     0,     0,  1422,  1420,
    1421,   473,  1423,   474,   472,   470,   463,     0,   461,     0,
    1372,  1428,     0,     0,     0,     0,  1719,  1721,     0,  1445,
    2165,     0,  1280,  1285,  1306,  1305,  1320,     0,   835,     0,
       0,   247,   281,     0,   256,     0,     0,     0,     0,   202,
     304,     0,   200,   292,   292,  2380,  2381,   174,  2398,     0,
     143,   163,   403,  1530,  1532,  1718,   449,     0,  1993,     0,
     475,   476,     0,   460,     0,   471,     0,     0,     0,     0,
       0,  1720,     0,     0,  1727,  1729,     0,     0,     0,   282,
     288,   278,   286,   247,     0,     0,   246,   265,   300,   203,
       0,   302,     0,   247,     0,   291,   293,   295,     0,   125,
    2392,  1726,   456,   453,   454,   466,   465,   462,   998,  1724,
    1725,     0,  1722,     0,     0,  1728,     0,  1312,  1310,     0,
     279,     0,     0,   277,   257,   262,   247,     0,   247,   215,
     214,     0,   206,   228,   299,     0,   205,  2384,   247,  1732,
     464,     0,     0,  1431,  1433,  1723,  1731,  1730,     0,   283,
       0,   247,     0,   247,     0,   247,     0,     0,     0,     0,
       0,   201,   247,  2393,     0,  1734,   999,  1429,   998,  1585,
       0,   275,   247,   263,   268,   305,     0,   209,   229,   230,
       0,   212,  2385,     0,     0,  1741,  1434,  1432,   247,   247,
     264,   267,   303,     0,     0,   207,   221,   208,   219,   211,
       0,  1733,  1736,     0,     0,  1738,  1739,     0,  1708,   247,
     247,   269,   227,   225,   247,   216,   223,   218,     0,   224,
     231,   222,     0,   213,  1740,  1735,     0,  1742,     0,   210,
     226,   220,  1737,   217
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   565,  1364,    57,    58,    59,    60,    61,  1245,
      62,   770,  1184,  1661,  1662,    63,   510,    64,   970,  1424,
    1425,  1426,    65,  1965,  2829,  2830,  2831,  1442,   479,   480,
    1838,  1839,   990,  2813,  2788,  3525,  2792,  3633,  3766,  3672,
    1911,  3114,  3526,  3527,  3642,   505,  1963,  1378,  3790,  1818,
    3892,  1819,    66,   598,   968,  1404,  1405,  3127,  3128,  3358,
    3129,  3350,  3351,  3352,  3353,  4013,  3866,  3962,  4014,  4078,
    4113,  4119,  4120,  4051,  4134,  4135,  4136,  4142,  4137,  4052,
    4115,  3867,  3868,  3773,  3869,  3645,  3870,  3777,  3871,  3648,
    3872,  3873,  3874,  3875,  4005,  3876,  3772,  4044,  3863,  3864,
    4046,  4094,  4111,  3877,  3655,  3767,  3949,  3656,  3768,  4000,
    3859,  4001,  4039,  4090,  3860,  3950,  4042,  3953,  3878,  3884,
    4015,  3879,  3885,  3880,  3660,  3784,  3883,  3782,  3882,  4048,
    4010,  2438,  2812,   583,   584,   609,  1958,   585,   982,   942,
    1380,  1851,  1852,  2310,  2311,  2423,  2424,  2425,  1843,  1844,
    1845,  1946,  1947,  1948,  1825,  1826,  1827,  1384,  1822,  1823,
     586,   943,   953,  1846,  1847,  1848,  2429,  1950,  1951,  1952,
    1953,  1849,  1651,  1850,  2690,  2444,  2823,  3542,  3137,  3678,
    3898,  2377,  2378,  2358,    67,   522,   817,  1242,  2180,  1695,
    1694,  1243,  2587,  2588,  2589,  2167,  3420,  1697,  2179,  3574,
    3810,  3575,  3576,  2932,  3709,  2585,  2936,  2937,  3203,  3422,
    3579,  3912,  3913,  3914,  3906,  3907,  3908,  3822,  3927,  3928,
    3982,  4025,  3721,  3722,  3723,  2199,  2593,  3425,  3364,  1940,
    1370,  1371,   481,   482,   483,   606,  2445,  1898,  2446,  2447,
    1900,  1901,  2559,  1294,  2764,  2741,  3580,  2819,  2771,  2772,
    2773,  2774,  2708,  2709,  2319,  2320,  2383,  2782,  3097,  3288,
    3303,  3098,  3099,  3100,  3101,  3102,  3103,  3104,  2850,  2851,
    3494,  3495,  3496,  2846,  2847,  3334,  3318,  3319,  3320,  3509,
    3158,  2634,  2635,  3588,  2643,  2644,  2681,  2982,  2682,  1374,
    3159,  3328,  3380,  3321,  2781,  3282,  3487,  3622,  3488,  3489,
    3490,  3756,  2321,  2707,  2322,  2712,   897,   484,  2323,  2324,
    1454,  1455,  3680,  3688,  3692,  3681,  3693,  3689,  3682,  3683,
    3684,  3695,  3691,  2451,  3365,  3366,  2699,  2907,  3626,    68,
    1388,   936,   945,   941,   959,   590,  1389,  1912,  2389,  3340,
     573,  1902,  3275,  3029,  3279,  1903,  2721,  1904,  3016,  3262,
    1905,  3044,  3277,  3482,  2722,  2723,  1906,  1907,  1908,  3028,
    3037,  3615,  2325,   123,  1656,  2778,  2365,    69,  1347,  1342,
      70,   909,   904,   905,  1345,  1346,  1784,  2255,    71,   836,
      72,   593,    73,   601,  1429,    74,  1253,  2191,  2192,  2193,
      75,   960,    76,    77,   602,  1436,  1437,  1438,    78,  1238,
     130,    79,   825,  1248,  1250,  1251,    80,   595,   596,  1397,
      81,  1689,  2158,  2159,   965,   966,  1403,  2931,    82,    83,
     562,   535,   842,   536,   537,  1722,  2211,  3581,   853,   854,
     855,  2617,  1270,  1271,  1272,  2216,  1723,  2622,  1036,   735,
     736,   737,   738,  1133,  1134,  3322,   739,  1143,  1617,   740,
     741,   742,   743,   744,   745,  1644,  2875,  2876,  3173,  2114,
    2115,  2116,   746,  2007,  2861,  1557,  2508,  1586,  2531,  1532,
    2498,  2020,   747,  1126,  1602,  1531,  3165,  2866,  1475,  1990,
    2484,  2556,  2088,  1062,  1063,  1026,  1997,  1481,  1791,  1792,
    1793,  1794,  1795,  3250,  3249,  3251,  3595,  3448,  3597,  3452,
    2266,  1796,  1797,  2657,  2996,  2675,  2676,  3463,  2257,  1798,
    2663,  3743,  3460,  3461,  3842,  3841,  3462,  3255,  3256,  3009,
    3010,  2392,  2393,  2394,  3599,  1522,  1577,  1523,  1529,  1222,
    1223,  1476,  2155,  2572,  3432,  3585,  2105,  3220,  3583,  3728,
    1909,  2747,  2748,  2213,  2214,  2679,  3013,  3042,  1297,  3582,
    2574,  1757,  1758,  3147,  4118,  2691,  2238,  3921,  2176,  2177,
    3829,  3986,  4062,  4063,  4064,  2962,  2963,  3224,  3225,  2215,
    2614,  2964,  3433,  3733,    84,   489,    85,  2120,  2132,   962,
     487,  1462,  1463,   758,   502,    86,   511,  2156,    87,   529,
    1710,   808,   829,  1256,  1257,  2200,  2594,  2601,  2201,  2606,
    3213,  2596,  2942,  2943,  2124,  2125,  2597,  2945,  3210,  3195,
    3196,  2927,  3416,    88,   550,  3007,  2670,  2671,  3804,  3805,
     830,    89,   488,  1013,  1978,  1468,  1977,  1014,  1015,  1980,
     627,   628,    90,   547,  1322,  1323,  1324,  1773,    91,   540,
     898,  2647,  1752,   821,  1178,  1301,   901,   902,  1302,  1737,
    2232,  1282,    92,   932,   931,    93,   569,  1366,    94,   771,
    1198,  1199,  1666,  2133,    95,   530,   834,   835,    96,   524,
     822,  1703,    97,   516,    98,    99,   811,  1231,  2928,  3807,
    3975,  1688,  1232,  3138,  3831,  3936,  3937,  3939,  3994,  3995,
    4085,  4105,  4124,  4125,  4128,   749,   919,   750,  3477,   751,
     752,  2602,  2603,  3014,   753,  3806,   754,  2700,   912,  1465,
     508,   461,   580,   920,  2577,   756,  3662,   939,  1458,   463,
     464,   100,   856,   539,  1274,  1275,  1276,  1732,  1733,   903,
    2093,  1734,  1735,  2229,  3833,  2222,  3232,  2988,  2978,   101,
     814,  1200,  1236,  1237,  2164,   102,   549,   103,  1224,  1682,
    1683,  2152,  2571,  2153,   104,   838,   105,   795,  1676,   796,
    1202,   797,   798,  1214,  1209,  1217,  1211,  3562,  3407,  3408,
    2140,  1658,  1459,  1460,  1975,  2921,  1669,  2135,  2136,  3190,
    3411,  3568,  3569,   106,   134,   469,   604,   977,  1264,   107,
     108,   109,   110,  1267,  1359,  2207,  1360,  1361,  1362,  1805,
    1720,  2533,  1124,  1596,  2904,   612,  1000,   992,   124,   125,
     126,   615,   616,   127,   957,   958,  2390,  2794,  3116,  3343,
    3344,  3531,  3667,   994,  3537,  3969,  4082,   995,   996,  2814,
    3539,  3794,  3971,  4058,   997,  2435,  3124,  3668,  3894,   111,
     921,   559,  1357,  1352,  1354,  1801,  2273,   112,   113
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3115
static const int yypact[] =
{
    4185,  2621,   916,   622, -3115,  -139,   146, 40609,   125,   622,
     622,  -149,  2037, -3115, -3115, -3115, -3115, -3115,  3091, -3115,
   40609,   916, -3115, 22728, -3115, -3115,    88,   855,   241,   622,
     916, -3115, 40609, -3115,   405,  1010,   916, -3115, -3115,   622,
   -3115,  -149, 40609, -3115,   563, -3115,  1441,  1019,   544,   577,
     738, -3115, -3115, 40609,  1516,  -151,  1191,  1120, -3115, -3115,
     951, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, 23308, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115,  1192, 40609,  1226, 40609, -3115,  1212,
   40609, 34849, 40609,   931,  1345, -3115, -3115,  1428, -3115, -3115,
     622, -3115, -3115, -3115,  -149, -3115, -3115, 22728, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115,   968, -3115, -3115,  1061, -3115, -3115, -3115,  1620,
    1400, -3115,  1443, -3115, 34849, -3115, 40609, -3115, -3115,   790,
   -3115,  1176, -3115,  1142,  1478,  1511,  1514,  1224,  1130, 11532,
    1533,  1533,  1533, 40609,  1590,  1533,  1533, 40609, -3115,  1533,
    1533,  1275,   622, -3115, -3115,  3198, 40609,  1464,   171,   -99,
   34849,  1144, 40609, -3115, -3115, -3115, 11532, -3115,  1608, 22728,
   -3115,   622,  1816,  1688,   800, 40609, -3115, -3115,   622,   743,
    1248, -3115,  3931,   122, -3115, -3115, -3115,  1994, -3115, -3115,
    5364, -3115, -3115, -3115,  1306, -3115, -3115, 22728, 40609,   622,
    1616, -3115, -3115,   163,   163,   163, -3115,   163, -3115,   163,
   -3115,  -151,  1302, -3115, -3115,  1332, 40609,   437,   575, -3115,
   -3115,  1347,   859, -3115,  1402, 31969, -3115, 40609, -3115, -3115,
   -3115, -3115,  1622, -3115, -3115, -3115,  2220, -3115, 22728, 40609,
    1481, -3115, -3115, 22728, -3115,   -28, -3115, -3115,  1383, 40609,
   -3115, 22728, 22728,   187,  1016,  1669, 40609, 40609,  1823, -3115,
    1982,  1597, -3115,   203,  1261,  1428,  2020, -3115,  1400, -3115,
   40609, 40609, 40609, -3115, -3115, -3115, -3115, 36577,  1130,  1412,
    1444,  1458, 15114, -3115,  1465,  1469,  1479, 11532,  1539,  1546,
    1563,  1580,  1587,  1589,  1601,  1609,  1611,  1611,  1615,  1629,
    1634,  1636,  1052,  1642, -3115,  1645,  1656,  1664, -3115, -3115,
    1668,  1671,  1680,  1682, -3115,  1694,  1711,  1713, 12129,  1715,
    1717, -3115, 19824,  1720,  1725,  1727,  1735,  1737,  1739,  1741,
    1751,  1764, -3115, -3115, 11532,  1772, -3115, -3115,  1776,  1778,
   -3115,  1782,  1785,  1789,  1810,  1822,  1825,  1833,  1837,  1841,
    1846,  1853,  1856,  1864,  1866,  1885,  1888, -3115,  1231,  1910,
    1920,  1753,  1926, -3115,  1932, -3115,   207,  1934,  1950,  1611,
    1611,  1611,  1961,  1977,  1990,  1997,  2003, 15114, 15114, 15114,
    8547, -3115, 40609, -3115, 40609,  1217,  1871, -3115,  2514, 15114,
     155, -3115, -3115, -3115, -3115, -3115, -3115, -3115,  1483,  1574,
   -3115, -3115, -3115, -3115, -3115,  2012,  1508,  1972, 40609, 40609,
   40609,  1763, 40609, 40609, 34849,  1683, 40609, 22728, -3115,  1533,
    1562,  3056,  1796,  1757,  1334, -3115, -3115, -3115, -3115, -3115,
    1940, -3115, -3115,  1879, -3115, -3115, -3115,   141, -3115,    36,
   -3115, -3115, -3115, -3115, -3115, -3115,  2052,  1847, -3115, -3115,
     111, -3115, -3115, 40609, -3115, -3115, -3115, -3115,  2199,  1993,
    1217,  1211,  2569,  2443, 22728, -3115,  1365, -3115,   496, -3115,
   -3115,  2363, -3115, -3115, 31969, 22728, -3115, -3115, -3115, 20404,
   -3115, -3115,  2588, -3115,  2046, -3115, 22728,  1796, -3115,  2302,
    2212,  1016,  2108, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115,  2089,  1994, -3115, -3115, -3115,   750, -3115,
   -3115,  2231,   -18,  2158, -3115,  2095,  1880,   -18, 32545,  2447,
    1456, -3115,   232, -3115,  2524, -3115, -3115,  2218, -3115, -3115,
    2219,  2221,  2418,  2210, -3115, -3115,   259,  2592, -3115, -3115,
     620, -3115, -3115,   609, -3115,  2447,   -18,  1456, -3115,  2453,
    2575,   837,  2239,   967, -3115,  1011, -3115, -3115,  2641, -3115,
   -3115, -3115, -3115, -3115, -3115,  2199, -3115, -3115, -3115,  2131,
   -3115,  2382,  2232, -3115, -3115,   683, -3115,  2136,   780,  2600,
   -3115,   599, 33121, -3115, -3115, -3115,  2630,  2648,  1611,  2155,
   -3115, -3115, -3115,  2750, -3115, -3115,  2164,  2659,  2659,  2659,
    2755, -3115, -3115, -3115, -3115, -3115,  2322,  2195, -3115,  1481,
   22728,   605, -3115, 37153, 22728, -3115,  1654, 11532, -3115, -3115,
    3674,   186,   199, -3115,  2708,  2359, -3115, -3115, -3115, -3115,
    2611, -3115, -3115,  2750,  2668,  2659, -3115, -3115, -3115, -3115,
   -3115,  1592, -3115, -3115, -3115, -3115, -3115, -3115, -3115,  1593,
   -3115, -3115, -3115, -3115, -3115,  1481, -3115, 22728, -3115, -3115,
   -3115, 31969, 22728, -3115,  2175, -3115,  2170, -3115, 11532, 11532,
     293,  2706,  2762,  2762,  2762,  1217,  2204, 11532, 11532, 11532,
   11532, 11532, 11532, 11532,   344,  2183, -3115, -3115,  9144, -3115,
    2187, 11532, 11532,  2278, 11532,  1574, 11532, 23888,   778,  4006,
   11532,   340,  2663, -3115, 11532, 11532, 11532,  8547,  2550, 11532,
   11532, 23888,  2785,  2200, -3115,  2196,  1023, 11532, 11532,  1075,
   11532, 11532, 11532, 11532, 11532, -3115,  9144, -3115, 11532, -3115,
   11532, 11532, 11532, 15114, 11532, 11532, 11532, 11532, 11532, 11532,
    2762,  2762, 11532, 11532,  1373,  9144, -3115, 11532,  1574,  2877,
    2877, 11532,  1574,  7353, 11532, -3115, -3115, -3115, -3115,  2216,
   -3115, -3115, -3115, 23888,  2762,  2762, 11532, 11532,  2706,  2706,
    2706, -3115,  8547,   129,  2227, 11532, 25048,  2203, -3115, -3115,
   -3115, -3115, 11532, 11532, 11532, -3115, 15114, -3115, -3115,  2341,
   -3115, -3115, -3115, 12726, 15114, 15114,  2213, 15114, 15114, 15114,
   15114, 15114,  2562, 15114, 15114, 15711, 16308, 15114, 15114, 15114,
   15114,   718,  2706, 34849, 15114, 11532, -3115, -3115, 40609, -3115,
   -3115, -3115,  2223, 22728,  1683, -3115, -3115,   -31,  2680, -3115,
     136, 31969, 22728,  2230, -3115, -3115, -3115, -3115, -3115, -3115,
    2764, -3115, -3115, -3115, -3115,  2258, -3115, -3115,  2243, -3115,
   -3115, -3115, -3115, -3115, -3115,  2342, -3115, -3115, -3115,  2249,
   -3115,  2249, -3115, -3115,  2249, -3115, -3115,  2249,   640,  4521,
   -3115, -3115, 40609, -3115, 41185, -3115, 20404,  -139, -3115,  2559,
   -3115, -3115,  2590, -3115,  2563,   223,  2255, -3115, 22728, -3115,
   -3115, -3115,  2485,  1188, 34849, -3115, -3115,   147,  2262,  2338,
    2272, -3115,  2350, 22728, 22728, -3115, -3115, -3115, -3115,  1248,
     236,  2281,   717, -3115, 40609, -3115,  1391, -3115, -3115, -3115,
    2282, -3115, 11532, -3115,  2283, -3115,   793,  2645,  2712, -3115,
    -139, 11532, -3115, -3115,  2295,  1400, 40609, 40609, 40609, 22728,
   40609, 22728, -3115,   771,   771, -3115,   940, -3115, -3115, -3115,
   -3115,   -18, 40609, 40609,   -18, 31969, -3115, -3115, -3115,  2715,
    1456, 40609,   -18, -3115,  2664,  2395, -3115, -3115, -3115,  2731,
   -3115, -3115,  2723,  2305, -3115, -3115, -3115,  1456, -3115, -3115,
   -3115, 22728, -3115, -3115,  1456, -3115, -3115,  1456,  1456,  2419,
     -18,   -18,  2358, -3115, -3115,  2311, -3115,  2358,  2449,   602,
     163,  2543, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115,    48, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
      80, -3115, -3115, -3115,  1875,  2790, -3115, 34849,  2333,  -124,
     891,  2333,  2146,  -139,   348, -3115,   348, -3115,  3167,  2581,
     959, 22728, -3115,  2330,  -139, 22728, -3115, -3115, -3115, -3115,
   -3115, -3115,  2334, -3115,  2337,  2331,  1217, -3115,  2781,  2788,
    2789,  2792,  2794,  2796,  2799,  2801,  2802,  2803,  2804,  2805,
    2807,  2808,  2811,  2812,  2365, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115,  2388, -3115, -3115, -3115, -3115,  1978, -3115,
   -3115, -3115,    91,  1697,  2385,  2409,  2783, 40609, 40609,  1400,
   40609, 40609, -3115, -3115,  1360,  2624,  2626,  2628,  2766,  2380,
   -3115,  -132,  2383, -3115, -3115, -3115,  1385, 40609,  2813, 27361,
     118,   202,   997, -3115,  2762,  2391, -3115,  2398,  2399,  2402,
   11532,    47,  1095,  1004,  1214,  1384,  1008,   271,   159, -3115,
    2403,  2401, -3115,  1032, -3115,   350,   375,  1050,  1060,  2410,
   -3115,  2411, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115,  2829, -3115,  1453, -3115, -3115, -3115, -3115,  2384,
   -3115, -3115, 11532,  1062,   407,   414,   204,  2421,   434,  1460,
    1505,  2420, 23888, 40609,  2762,  2422,  1068,  1078,  2762,  2423,
     458,  1124,  1513,  1535,  1549,  1132,  1139, 11532,  1143,   536,
    1560,  2105,  1163,   644,   705,   719,   761,  1168,  2424,  2425,
     774,   265,  2762,  2428,  1173,   278, -3115,  2417, -3115,  2430,
    1178,  9741, 10338, 10935,   315,   795, 11532, -3115,  2432, -3115,
    2196,  2434,  2436,   302,  1198, -3115,  -151, -3115, 11532, -3115,
     195,  1171, -3115,  2565, 40609,  2174,   157, -3115, -3115, -3115,
   -3115, -3115, -3115,  1228, -3115,  2438, -3115,  2441,  1695,  2444,
    8547,   913,  2444,  3097,   746,   746, 15114,  3171,  2332, 12129,
    1161, 12129,  1161,  2444,  2444,  2444, -3115, 15114,  2445, 15114,
   15114, -3115,  2706,  1217,  2442,  1093, 40609, -3115,   -31, -3115,
   -3115, -3115, -3115,   313, -3115, -3115, -3115, -3115,  2450,   136,
   34849,  2451, -3115, -3115,  2646,  3056, 22728, -3115, 40609, -3115,
   -3115, -3115, -3115, 20984, 20984, -3115, 20984, -3115, -3115,   777,
     846,  2929,  2467, -3115, -3115, -3115, -3115, -3115,  2830, 22728,
   -3115,   303, 22728,  2330,  2454,  2454,  1190,  2522, -3115,  2458,
   -3115, 11532,  -139, -3115, 31969, 31969, 22728, 22728,   696, -3115,
    1891, -3115,  -139,  2864, 20984, 20984, 20984, -3115, -3115, -3115,
   -3115, -3115,  1174, -3115,  1217, -3115,  2452, -3115, -3115, -3115,
   -3115, -3115, 37729,   835, -3115, -3115,  -139,  2878,  1006, -3115,
    1217,  2464, 40609, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,  -129, -3115,
   -3115, -3115, -3115, -3115, -3115,  2602,   -18, -3115, -3115, -3115,
   -3115, -3115,  2671,  2447,  2592,   -18,  1456, 22728,   -18,   -18,
     -18, -3115, -3115,  1521, -3115,  1011, -3115, -3115, -3115, -3115,
   40609,  1339,  2616, -3115,  2474, -3115, -3115, 22728, -3115,  2476,
   -3115,  2897,  3026,  2447, -3115, -3115, -3115,   313,   313,  2756,
   -3115,  -139,  2599,  2603,  2604,  2607,  2608,  2638, -3115, -3115,
    -139,  -139, -3115, -3115,   313, -3115,  1729, -3115, -3115, -3115,
   -3115,  -139,  -139,  -139,  -139,  1340,  -139,  -139,  1630, -3115,
   -3115,   313,   313, -3115,  1344, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115,   190, -3115,  2653,  3014,  2718,   313,   313,  3014,
     313,  2719,  2722,   313,   313,  2566,  2968,   313,  2856,  2591,
    1821,  2858,   313, -3115,  2594,  2987,   313,   313,   313,   313,
    3014,  2740,  3067,   313, -3115,   313,  2748,  2751,   113,  2752,
    2757,   313,   131, 40609,   313,   313,   313, -3115, -3115,  4659,
   -3115, -3115, -3115, -3115, -3115, -3115,   587, 21566, -3115, -3115,
     154, -3115,  2717, -3115, -3115, -3115, -3115, -3115, 38305, -3115,
   11532,  1340,  -139,  -139,  1006,  -139,  1340,  -139,  -139,  -139,
    -139,  -139,  1340,  1340,  -139,  -139,  1340,  3674, -3115, -3115,
   -3115,   112,   313,   313,   313,   313, -3115,  2197, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, 34849,  2857,  1646, 40609,
   -3115,  1617, 40609,  2532,  -150,  2720,   390,   390, -3115, 22728,
   22728, 22728,  3081, 31969, 34849, -3115, 40609,  2574,  2467, 27361,
   -3115, -3115,   602, -3115,  2535, -3115, 13323, -3115,  2544, -3115,
   11532, -3115, -3115, -3115,   368, 11532, 11532,  2996,  2394, -3115,
   33697, -3115, -3115, -3115, 11532, 33697,  2394, 11532, -3115,  2545,
   -3115,  2916,  2917, -3115, -3115, -3115, -3115, 11532, -3115, 11532,
   11532,  1483, -3115, 11532, 11532, 11532, 11532, 11532, -3115, -3115,
   15114, -3115,  2541,  2549, -3115, -3115, -3115,  2551, -3115, 11532,
   -3115, -3115, -3115, -3115, -3115, -3115,  1483, -3115, 11532, -3115,
   11532, -3115, 11532, 11532, 11532, 11532, -3115, -3115, -3115, 13920,
   11532, 11532,  2552, -3115, -3115, -3115, 11532, 11532, 11532, -3115,
   11532,   331, 11532,  1259, 11532,  1524, 11532, -3115, 11532,  1483,
   -3115, -3115, -3115, -3115, 11532, -3115, -3115, -3115,  1637, -3115,
    2546,  2547,  2548, 34849, 11532, -3115, -3115, -3115, -3115, -3115,
     778, 15114,   320,  2556, 15114, -3115,  3097,  2550,  2550,  1802,
    8547,   913,  3097, 11532,  2560,  2558, -3115, 11532, 40609, -3115,
   -3115, -3115, -3115, -3115, -3115, 34849, 31969, -3115, -3115,  2230,
    2884, -3115,  2330, -3115, -3115,  1661, -3115,  2554, -3115,  2555,
    2636,  2637,  2640, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115,  2447,  1891,  2652,  2570, -3115,
   -3115,  2587,  2909, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,  3120,  2576,
    2454, 40609,  1217, -3115,  2647, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115,    26, -3115, -3115,  2579,  2579, 18662, -3115,
   -3115, -3115, -3115,  2825,  2997,  2998,  3000,   599, -3115,   151,
   -3115,  1155,  2961,  2447, -3115,  3011, 35425, 27937, -3115,  2601,
    2959,  2605,   313,  3053,  3057, 30241,   281, 25627, 30817, -3115,
   -3115,  1006, -3115, -3115, -3115, -3115, -3115, -3115, -3115,    32,
   -3115,   940,   940,  2629, -3115,  2870, -3115, -3115, -3115,  2467,
    1456, -3115, -3115, -3115, -3115,  2619, -3115, -3115,   932,  2980,
    2983, -3115,  2863,   883,  2863,   932,   932, 23888,   602,  3821,
   -3115,  1340,  2918, -3115, -3115, -3115, 34273, 31393, -3115, -3115,
   -3115, -3115,  3124, -3115,  3129,  1154, -3115, -3115,  2326,   891,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115,  2146,  2326,  2326,   348, -3115,
     108, -3115, -3115, -3115, -3115, -3115, 24468,   916, -3115,   272,
     301, 24468, -3115,  1654,  1654, -3115, 24468,   916,  1006,  1340,
   24468,  1340, 38881,   916,  -139,  -139,  2182,   313,  1340, -3115,
   -3115,  2992, 40609,  2995, 24468, 24468, -3115, 34849, -3115,   313,
     984,  1340,  1006,  1006, 24468,   916, 23888,    79,  1816,  -139,
     916, -3115, -3115, -3115, -3115, 22728,   916,   916,  1378, -3115,
   -3115, -3115,  1340, 34849,  2649, -3115,  5264, -3115, -3115, -3115,
   18082, 40609,   270,   160, -3115,  2639,  1263,   257,  2724,  1112,
    2650, -3115,  2655, -3115,  2644, -3115,  1217, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115,  -139,  1190,  2326,  2326,  1697, -3115,
    2893,  3062,   313, -3115,  2021, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115,  2824,  2660, -3115, -3115,   275, -3115,
   -3115,  1138, 22728, 17502, -3115,  2888, -3115,  2373, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115,   531,   476, -3115, -3115,
    2661,   602,  2908,  1455,  2467,  2676,   118, 12129,  1219, -3115,
    1217, 11532,  1217,  1761, -3115,  2675,  2675, -3115, -3115,  2677,
    2675,  3047, -3115,  3049,  2682, -3115,  2683, -3115,  1225,  2686,
    2688,  1483, -3115, 11532, 11532,  1227,  1252,  -119,  2689,   826,
     847,   333, -3115,  1257,  2984, -3115, -3115,  1301,  2691,  1380,
    1393,  1409,   853,  1442,  1696, 12129,  1450,   961,   337, -3115,
    1466,   876,   908,  1489, 11532,  1491, 11532,  1493, 11532,  1551,
    1578,  2693,  1584, -3115, -3115, -3115, -3115, -3115, -3115,  2692,
    1217,  2695, -3115, -3115, 11532, -3115,   155, -3115, -3115, 15114,
     387,  2696, -3115,  1217, -3115, -3115,  2700,  1483, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, 40609,  2707, 28513, 31969, 31969,
   31969,  2704, 11532, -3115, -3115,  2957, -3115, -3115, 22728,  3092,
   -3115, -3115, 15114,  3055,  2934, -3115, -3115,  2711,  2714, -3115,
   -3115, 31969, -3115,  1994, 23888, -3115,  2716, -3115,  2716,  1117,
    2725,  1700, -3115, -3115, -3115,  2713,  2108,  3139, 31969, 31969,
   31969, -3115,  2467,  2467,   120,  2772,  3093, -3115, -3115, -3115,
   -3115, 39457, -3115, -3115, -3115, -3115,  1323, 40609,  3074, 40609,
    7950,  1006,  1340, -3115, -3115,  3256, 11532, 31969,   985,  1171,
     313, -3115, -3115, -3115, -3115, -3115, -3115,  2447, -3115, -3115,
   -3115, -3115,  3051, -3115, -3115,   -18,  1521,  -199, -3115,  1076,
   -3115, -3115, -3115,  3090,   932,  2863,  2863,  3098,  2989,   -55,
    2732, -3115,   313, -3115, -3115, -3115,  1994, -3115, -3115, 11532,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115,   190, -3115, -3115,
   -3115, -3115, 11532,  3099,  3100,  1654, -3115, 24468, -3115, -3115,
   -3115, -3115, 24468, 24468,    96, 38881, -3115, -3115, -3115, -3115,
   -3115, -3115,  2749, -3115, -3115,  1190, -3115, -3115, 31393,  -139,
   -3115, 24468,  2749, -3115, -3115,   156, -3115,  -139, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, 38881,  2753, -3115,  1328,
   -3115, -3115, -3115, -3115, 38881, -3115, -3115, 38881, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, 22728,  1081,  1791,
   -3115,  1758, -3115, -3115, -3115, -3115, 40609, -3115, -3115, 22728,
   -3115, -3115,  5272, 40609,  2967, -3115, 11532, 11532,  3003, 40609,
    3006, -3115,  3283, 40609,  3337, -3115, 38305, -3115, -3115, -3115,
   -3115, -3115,  2765, 40609,  2326,  1646, -3115,  1138, -3115, -3115,
   -3115, -3115,  3016,  3017, 40609, -3115, -3115, -3115, -3115,  2896,
   -3115, 22728,  3315, -3115,  2923,  1765,   119,  3134, -3115,  2771,
    2773,  2775,  2859, -3115, -3115, 27361,  2467,  3119, -3115, -3115,
   -3115,  2550, -3115,  1217, 11532,   907, -3115, -3115,   349,   991,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115,  2779,  2550,  2550, -3115, -3115,  2932, -3115, -3115, 11532,
   11532, -3115, 11532, -3115,   196,  2782,  2809, -3115, -3115, -3115,
   -3115, -3115, 11532, -3115, -3115,  2550, -3115, 11532, -3115, -3115,
   11532, -3115, 11532, 11532, -3115,  1599, -3115,  1603, -3115,  1648,
   -3115, -3115, -3115, -3115, -3115,  2787, 40609, -3115, -3115,  1767,
   -3115, -3115, 11532, -3115, 35425, -3115, -3115, -3115, -3115, -3115,
    -143, -3115,  -143,  -143, 14517,  1217,  3241, -3115,   617, -3115,
    3133, -3115, -3115,  3097,  1386, -3115,  1769, -3115, -3115, 40609,
   -3115,  2089,  2793, -3115,   313, 14517,  2579,  2923, -3115, -3115,
    1117, 23888, 27937, -3115, 31969,  2795,  2795,  2795,  2447,  3192,
    2652,  2652, -3115, 26206, -3115, -3115,  2935, -3115, -3115, 29089,
   -3115,  1485, -3115, -3115, 15114,  1645, -3115,  1217, -3115,  2798,
   -3115, 34273, -3115,  1217,   313,  2791,  2806, -3115, -3115, 40033,
   11532, -3115,  3240, -3115, -3115,  2797,   602, -3115,   932, -3115,
    3160,  3161,   932, -3115, -3115, -3115, 23888,  2467, 14517, -3115,
     251,  2089,  1217,  2810,  1328, -3115,  -114,  1217, 24468, -3115,
   -3115, -3115,  2820, -3115, -3115,  3284,  3287, -3115, 24468,  1978,
   40609, -3115,  3256, -3115, -3115, -3115, -3115,  5272, -3115, 23888,
   -3115, -3115, -3115, -3115, 40609, -3115,  2822, -3115, 18082, -3115,
   -3115, -3115,  2675,  2675,  2675, -3115, -3115, -3115, -3115, -3115,
    2677,  3027, -3115,  2677,  2677, -3115, -3115, -3115, -3115, -3115,
     349,   211, -3115, -3115,   349, -3115, -3115, -3115,    66,   385,
    2677, -3115, -3115, -3115, -3115, -3115, -3115, -3115,  2675,  2675,
   -3115, -3115, -3115,   349,  2675, -3115,  2675,  2999, -3115,   399,
     100,  2675,  2675,  2675,  2833,  2821, -3115,  1217,  2550,  3331,
   -3115, -3115,  2966,  -139,  3297, -3115,  1806, -3115, -3115,  2146,
   -3115, -3115, -3115,  2970,   170, -3115,  3004,  2840,  2844, -3115,
   -3115,  -139,  2848,  2850,  4659, -3115, -3115, -3115,  3428, -3115,
   40609, 40609, 40609, -3115,  2535, -3115,   940, -3115,  -230,  1217,
    2855,  2861,  2862,  2868,  3417,   150, -3115,  3417, 33697, -3115,
    1817, -3115,  2871,  2872,   163,  2873,  1698,   936,  1828,  3142,
    3212, -3115,  3064, -3115,  1723,  -219,  1787,  1814,  1844,  1849,
   -3115, -3115, -3115, -3115, -3115, -3115,  1867, -3115,   483, 31969,
    2895,  2895,  2895,  1645,  1217,  1897, -3115, -3115,  3245, -3115,
    2882,  2879,  2889, 40609, -3115,  2934, -3115,  2282, 23888, 14517,
    2883,  2876, -3115,   780, -3115, -3115,  2880,  2795, -3115,  3440,
    3294, -3115, -3115, 34849,  2900, -3115, -3115,  3181, -3115,   166,
    3107, -3115, -3115,  3214, -3115,   985,  2982,  2993,   313,  1217,
    -139,  2076,  2474,  3175,  2938,   932,   932,  3183,  2950, 11532,
   11532,  2913, -3115,  2908, -3115, -3115,   262,  2282, 11532, -3115,
    1190,  2934, -3115,  2914,  2915, 40609,  2919,  2922, -3115,  2463,
     270, -3115, -3115, -3115,  2999,   916, -3115, -3115,  2749,    26,
   -3115, -3115,   684, -3115, -3115, -3115,  -128, -3115,  2924,  -128,
    -128, -3115,  2231, -3115,  2946,   349, -3115, -3115,  2951, -3115,
   -3115, -3115,  -128,  2927,   349, -3115, -3115, -3115,  -128, -3115,
   34849,  -139,  2898, -3115,  2973, -3115,  3408,  3285, -3115,  2999,
   -3115,  3286,  3188, -3115,   349, -3115, -3115,  3417, -3115,   349,
    3417,  -128,  3190, -3115,  -128, 40609, -3115, -3115, -3115, -3115,
   -3115, -3115, 40609, -3115,   970,  1899,  -139, -3115, -3115, -3115,
    2937,  2941, -3115, -3115, -3115,   257, -3115, 40609,  5272, -3115,
   -3115, -3115,  2888, -3115,  1072,  1915,  1328,  2939,  1917,  1927,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, 33697,
   -3115, -3115,  3417,  3195, -3115, -3115, -3115, -3115, -3115, 11532,
   -3115, -3115,  3233,  3385, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115,  3034,  3036, -3115, -3115,  3037, -3115, -3115,   103, -3115,
    1594, -3115, -3115, -3115, -3115, 14517,  3312,  3048, -3115, -3115,
   -3115, 40609,  3008, -3115, -3115,  1299, -3115, -3115, -3115, -3115,
   11532, -3115,  2908,  2182, -3115, 26206, -3115, -3115, -3115, -3115,
    3405, -3115,  2960,  2962,  7950,  3539, -3115, -3115,  3007, -3115,
   -3115, -3115,  3028,  1217,  1217, 40609,  3119, -3115, -3115,  1654,
    1654, -3115,   262,  1299,  1328, -3115,  1935, 40609, 40609,  1939,
   40609, 40609,   671,   671,   671,  1100,  1100, -3115, -3115, -3115,
   -3115, -3115,  3333, -3115,   760,    62, 40609, -3115, -3115,  1264,
   -3115, -3115, -3115, -3115, -3115,  -128, -3115,   163, -3115, -3115,
   -3115, -3115, -3115,   163, -3115, -3115, -3115, -3115,  1611, -3115,
   -3115,  3226,  3022, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115,  2990, -3115, -3115,  3084, -3115, 46369, -3115, -3115,
    -151,  3010, -3115, -3115, -3115,    95, 40609, 22728,  3003,  3164,
   -3115, -3115,   780,   119,  2923, -3115,   346, 40609, -3115,  3250,
     245,  3352, -3115, -3115,  3001,  1861, -3115, -3115, -3115, -3115,
   -3115, -3115,   674,  3242,  1340,  1340,  1340,  1340,  1594, -3115,
   -3115,  3042, 22728, 15114,  3102,  1941, -3115, -3115,  1512,  1923,
   -3115,  1155, -3115,  1073,  1328, 11532,  2447, 31393, -3115, -3115,
    1340, -3115, -3115, -3115,  3318, 11532,  3009, 11532,  3012,  1943,
   -3115, -3115,  3422,  3422, -3115, -3115, -3115, -3115,  1952,  1954,
     346,  1956,  1974, -3115, -3115,   270,  3018, -3115, -3115, -3115,
     986,   986,  1981, -3115, -3115, -3115,  1986, -3115,  1999, -3115,
    1611, -3115, 11532,  3454,  3032, 40609,    99, -3115, 47521, 47521,
   40609, -3115, -3115, -3115, -3115,  4800, -3115, -3115,   655, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
    3574, -3115,  3005, -3115, -3115,  3019,  1577, -3115, -3115, -3115,
    5272,  3435,  1112, -3115, -3115, -3115, -3115,  3021,  2108,   313,
   -3115,   346, -3115, -3115, -3115,  1328,  3023,  3249, -3115,   245,
   -3115, -3115, -3115,  3352, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, 23888, -3115, -3115,  1190, -3115,
   -3115, 40609,  3025,  3108,   313,  3496,  3501,   313,   313,   313,
     313,  3033,  1923, -3115,  3480, -3115,   423, 11532, -3115, -3115,
    1217,  3247, -3115,  3558,  3058,  3483,  1217, 40609,  1217, 40609,
   -3115, 40609,    81, -3115, -3115,  3229,   346, -3115,   245,  3352,
   -3115,  2934, -3115,  3629, -3115,   237, -3115, -3115,  1264, 40609,
     349,   163,   349, -3115,  1217, 11532, -3115, 11532,  3066, -3115,
   -3115,  3457, 40609, -3115, -3115, -3115, -3115, 11532, -3115, 46369,
   46369, -3115, -3115, -3115, -3115,  3609,   780,  3580,  3295,  3582,
    2406, -3115, -3115,  3283,  5272, -3115, -3115,  1340, -3115, -3115,
   -3115,  1647, -3115, -3115,  3050, -3115,   313,  2182,  3052, -3115,
    3102, -3115, 15114,   -71,  -139,   313,   313,  1283,  1283,  1190,
   34849,  3154, -3115, -3115,   313, -3115, -3115,  1328, 40609, -3115,
     739,  3395,  3231, -3115,  1006,  2014,  2017, -3115,  3603, -3115,
    3606,  3063,  3068, -3115, -3115, -3115, -3115,  2029, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115,  1217,  1217, -3115,    52,
   -3115, -3115,  3430,  3516, 11532,  1217, 43489,  3060, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, 46945, 11532, -3115,   655,  3574, -3115,  3311, -3115,  3313,
   -3115, -3115, -3115,  3543, 46369, -3115,  3536, -3115,   780, -3115,
   -3115, 23888, 14517, -3115, -3115, -3115,  2034, -3115, -3115,  3097,
   -3115, 16905, -3115, -3115, -3115, -3115,  -139,  -139, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115,  2041, -3115, 34849,
   -3115, -3115,  3620,  3621,  3530,  3625,   739, -3115,  1276, -3115,
   -3115,  3658, -3115, -3115, -3115, -3115, 38305, 38305, -3115,  3105,
   11532, 46369, -3115,  3537, -3115,  3468,  1894,  3412,  3094, -3115,
    3078,   992,  3576, 47521, 47521, -3115, -3115, -3115, -3115,  3554,
   -3115, -3115, -3115, -3115, -3115,  3558, -3115, 15114,  3101,  3106,
   -3115, -3115, 34849, -3115,  3154, -3115,  3103,   163,   163,  3644,
     163, -3115,  3645,  3652,  1276, -3115,  3424,  3109,  2057, -3115,
      60, -3115,  1217, 44065,  3649, 40609, -3115, -3115, -3115, -3115,
   11532, -3115, 36001, 44641,  3110, -3115, -3115, -3115,  3272, -3115,
    2406,  3395, -3115, -3115, -3115,  1923, -3115, -3115,  3112, -3115,
   -3115,   163, -3115,   163,   163, -3115,  3560, -3115, -3115, 11532,
   -3115,  3569,  3199, -3115,  3116, -3115, 46369,  1975, 46369, -3115,
   -3115,  3520,  3121,  1406, -3115,  3115, -3115, -3115, 46369,  3505,
   -3115, 11532,  3123,  3125, -3115, -3115, -3115, -3115,  1340,  1217,
    3665, 46369, 40609, 41761,  3307, 45217,  3547, 40609,  5272,  3549,
    3550, -3115, 46369, -3115,  3388,  3135,  1217, -3115, -3115, -3115,
    3216, -3115, 42337, -3115,  2348, -3115,  3158, -3115, -3115,  3613,
      75, -3115, -3115,  3482, 19242,  3288, -3115, -3115, 46369, 46369,
   -3115, -3115, -3115, 29665, 11532, -3115,  3173, -3115, -3115, -3115,
     599, -3115, -3115, 34849,  2059, -3115, -3115, 23888, -3115, 42913,
   45793, -3115, -3115, -3115, 26785, -3115, -3115, -3115,  3562, -3115,
    1217, -3115,  1574, -3115, -3115, -3115, 22146,  3050, 29665, -3115,
   -3115, -3115, -3115, -3115
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3115, -3115, -3115, -3115, -3115,    94, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115,  1612, -3115, -3115, -3115, -3115, -3115,
    1803, -1690, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
     623,  1438,  3130, -3115,   392, -3115,    73, -3115, -3115, -3115,
   -2682,   -44,  -220, -3115, -3115,    82,    20,  2818,  -218, -2919,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,   398,
     410, -3115, -3115,   220, -3115, -3115, -2259, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115,  -384,  -332, -3115, -3115, -3115,
   -3115,    97,   242, -3115,   243, -3115,   244, -3115,   246, -3115,
     247,   248,   249,   250, -3115,   252, -3115, -3115,  -338, -3115,
   -3115, -3115, -3115,   253, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115,  -222, -3115, -3115,   -78, -3115, -3115,  -217,   255, -3115,
    -180,   258, -3115,   260, -3115,   -95, -3115,   -98, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
    2823, -3115, -3115, -3115, -2109, -3115, -3115, -2233,  2405, -3115,
   -1616, -3115, -3115, -1797, -3115, -3115, -1643,   747, -3115, -3115,
    1204,   379, -3115, -1320, -1762, -1760, -3115, -3115, -3115, -1861,
   -1846,  -735,  2144, -1132, -2104, -3115, -3115, -3115,   261, -3115,
   -3115, -2363,  2407, -3115, -3115, -3115,  1435, -3115, -3115, -3115,
   -3115,  1213, -3115, -3115,   866, -1513, -3115, -3115, -3115, -3115,
   -3115, -3115,    83,   234,    -1, -3115, -3114,   610, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115,  -167,   -94, -3115, -3115,  -166,
   -3115, -3115,  -206, -3115,   101, -2144, -3115, -3115, -3115, -3115,
    2389, -1229, -3115,  3339, -3115,  -516,   698,  1936, -2032, -1319,
    -873,  -869, -2307, -3115, -3115, -3115,   370,  1027,  1404,   788,
    1938, -1780,  1477,  1530, -3115, -3115,   833, -3115, -2964, -3115,
   -3115, -3115,   797, -3115,   798, -3115, -3115, -3115,  -764,   762,
    -749, -3115,   369, -2216, -2356, -3115,   596, -3115,   553, -3115,
    -536, -1948, -2224,    68, -3115, -3115,   566,   845,   897, -3115,
   -2928, -2893, -3115, -3115,   134, -3115, -3115, -3115,   124, -3115,
     391,   263, -3115, -3115,  -944, -2033, -3115, -3115,  3871,  3873,
    -981, -2494, -2702,   140,   142, -3115, -3115, -3115,  2435,  -819,
     209,   200,   208,  1929,  -758,   352, -2193, -3115,   395, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115,  1995,  -510, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -2253,   875, -3115, -3115,  1531, -3115,
   -3115, -3115, -1759,   584, -1600, -3055, -3115, -3115, -3115, -3115,
   -3115, -3115,  1553, -3115, -3115,  2123,  2564, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115,   630,  1738, -3115,
   -3115, -3115, -3115, -3115, -3115,   881,  2478, -3115, -3115, -3115,
     -12, -3115, -3115, -3115, -3115,  2226, -3115, -3115,  2969, -3115,
   -3115, -3115, -3115,  1358,  1781, -3115, -3115, -3115,  -923,  1731,
    -547, -1561, -3115,  3382, -3115, -3115, -3115, -1545, -2284, -3115,
    3111,   378, -1340,  2240,  -608, -2511, -3115,  1037,  -636,  3421,
   -3115, -1085,  -996, -3115, -3115,  -603, -3115, -3115, -3115,  -560,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115,  1407, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,  1795, -3115,
    1960, -3115,  -424, -3115,  2906, -3115, -3115, -3115, -2149, -1804,
    1701,   974, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -2194, -3115, -3115, -3115, -3115, -3115, -3115, -1606, -3115,
   -2069,   371, -3115,   509, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115,    27,  1180,    25, -1778, -1027,  2881,  1370, -3115, -3115,
   -1202,  2943, -1917, -3115, -3115, -3115,  1868, -3115, -3115, -3115,
   -3115, -3115,   941, -2386, -1307, -3115, -3115, -2898,  -863, -2112,
    -831, -3115, -2143,   526, -1696, -1670, -1888,   165, -1156, -3115,
   -3115, -3115, -3115, -3115,  -104, -3115, -3115, -3115,   550,  1774,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,  -475,  -452,
    3969, -3115,  2013,  1980, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115,  2767,  2734,  1834, -3115, -3115, -2411, -3115,
   -3115,  1798, -3115,   784, -2178, -1557,  1051, -3115, -3115,  1054,
   -2927, -3115, -3115, -3115, -3115, -3115, -3115,   994,  -126,   105,
    3458, -3115, -3115, -3115, -3115, -3115, -3115, -3115,  2537,  -993,
    3379, -3115, -3115, -3115, -3115, -3115,  2235, -3115, -3115, -3115,
   -3115, -3115,  2721,  3470,  -537, -1233, -3115, -3115,  -741, -3115,
   -3115,  -817, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115,  2347, -3115,  1246, -3115, -3115, -3115,  2758, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115,  1086,    43, -3115,    84,    -2, -3115,    29,
   -3115, -3115, -3115,  -122, -3115,  -633,  -925, -1257,   713, -1849,
    -810,  1077,  2754, -3052,  -569, -1103, -1098, -1819,    14, -3115,
   -3115,  2770,    86,  -748,  -292,    -7, -2313,  -101,  -534, -3115,
   -1923, -3115, -3115, -3115, -3115,  2300, -3115, -3115, -3115, -3115,
    1390, -3115, -3115, -3115, -3115,  1041, -3115,   799,   588, -3115,
   -3115,  2367, -3115,  2343, -3115, -3115, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115,  2774,  3507,
    3196, -3115,  2826, -3115, -3115, -3115, -3115, -3115,   475, -3115,
     351, -3115,    30, -3115,  1583,  -990,   865, -3115,  1476,  -240,
    -506, -3115,   479, -3115, -3115,   314,  3510,  3203, -3115, -3115,
   -3115, -3115, -3115, -2544,  -825, -3115, -2601, -3115, -3115, -3115,
   -3115,  1963,  -980,  2931,  1519, -3115, -3115, -3115,    39,  3575,
    3578, -3115, -3115,  -171, -3115,   -84, -3115, -3115, -3115, -3115,
   -3115, -3115, -3115,  3434, -3115, -3115, -3115, -3115,  3441, -3115,
   -3115, -3115, -3115, -3115,  3445, -3115, -3115, -3115, -3115, -3115,
    1534, -3115, -3115, -3115, -3115, -3115, -3115, -3115, -3115
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2366
static const yytype_int16 yytable[] =
{
     462,  1166,   980,   900,   896,   991,   999,  1367,  1365,   504,
    1588,  1037,  1039,   503,   927,  1589,   509,  1268,   521,  1045,
     582,  1461,  1402,  1470,   528,   523,  2175,   460,  1456,  1457,
    1177,  1537,  1329,  1691,  2086,   534,  2400,   507,  1298,  1759,
    2736,   940,  2914,  2573,  2630,  1652,   551,  2636,  2638,  1077,
    1292,  1608,  2486,  2684,  2600,  1803,  2995,  2489,  1616,  2127,
    1828,  2462,  2953,  1372,  1298,   748,  2766,  1373,  1501,  1899,
    1096,  2668,  1021,  3274,  2318,  1098,  2837,  1766,  1102,  1330,
    2824,  3254,  2826,  1110,  1111,  1112,   571,  1561,  2384,  2732,
    2313,   136,  2314,  2254,  1775,   911,  2326,  2430,  2650,  2651,
    2330,  2619,  1007,  1064,  1778,  1779,  3110,   570,   574,  2659,
     462,  2345,  2431,   462,   581,   587,  3259,  2669,   961,  3561,
    2848,  2354,   532,  1949,  2853,  3298,   971,   972,  2710,  1220,
     571,  2362,  1841,  3326,  1215,  1161,  1220,   576,   603,  2301,
     578,  1806,  3291,  3296,  1128,  1129,  3297,  3466,  1618,  1619,
    2419,   597,  1622,  1623,  1624,  1625,  1331,  1627,  1628,  1630,
    1632,  1633,  1634,  1635,  1636,  3306,   591,  1118,  1119,  1120,
    3377,  3325,  1128,  1129,  1128,  1129,  1701,  2212,  2464,  1162,
    3620,  2648,  2168,  2290,  1995,  2188,  2295,  1654,  2948,  3951,
    2295,  2806,  2270,  2750,  1369,  2667,  2427,  3951,  2428,   916,
     963,  2698,  2694,  2695,  1212,  1369,  3464,  1654,   860,   861,
    1128,  1129,  2241,   987,  1841,  3479,  3022,  1128,  1129,  1128,
    1129,  2702,  1163,  -777,  3910,  2397,  1369,  3025,  2309,  2386,
    2402,  3154,  1280,  1802,  -483,   801,  2408,  2409,  3437,  3169,
    2412,  1220,   973,  1105,  3155,  2296, -2266, -1787,  1830,  2296,
    2276,  2277,  3260,  2960, -1358,  -484,  1430,  2369,  1221,  3156,
    2363,  3376,  -399,  2852,  3381,  1221,  2263,  2288,  1985,   860,
    3292,  3838,  2297,  2441,  3188,  1820,  2297,  3770,  2776,  2786,
    1128,  1129,  3427,  2612,  2306,  2307,  1128,  1129,  3004,   560,
    1249,  2713,  1180,  1128,  1129,  1974, -1358,  1166,  1303,  1296,
    2328,  2329,  1376,  2331,  1649,  1473,  2334,  2335,   617,  2941,
    2338,  1955,  2799,  2800,  3347,  2347,  3839,  1128,  1129,  2350,
    2351,  2352,  2353,  3348,  1824,  1311,  2357,  3491,  2359,  3135,
    1128,  1129,  2654,  2702,  2368,  1128,  1129,  2372,  2373,  2374,
    2298,   517,  1266,  2646,  2298,  1427,  1128,  1129,  1128,  1129,
    1166,  3849,  1128,  1129,  1166,   533,  1473,  2026,  1431,   137,
     917,  1260,  2702,  1432,  3371,  1128,  1129,  3500,  2026,  3154,
    1221,   135,  1841,   608,  1433,  3395,  3504,  1255,  3584,  1446,
    1447,  1448,  3155,  1128,  1129,  2414,  2415,  2416,  2417,  3347,
    1128,  1129,  3011,  2809,  3541, -2325,  3517,  3156,  3348,  1842,
    1802,  3519,  1128,  1129,  1106,  2613,  1824,   860,   861,   804,
     465,  2787,  1821,  2299,  1712,  2828,  2189,  2299,  3492,  3154,
    1474,  3200,  1128,  1129, -1316,  1799,   468,  3771,  2122,  1128,
    1129,  2370,  3155,  3840,  3518,  3457,  2448,  3520,  2777,  1648,
    2716,  1525,   561,  2060,  1526,  1006,  2703,  3156,   594,  1128,
    1129,   599,  3189,  3349,   518,  3493,  2637,   860,   861,   512,
    2122, -1316,  2990, -2276,  2743,  2744,  2242,   581,  3548,   587,
    2999,  1489,  3458,  1128,  1129,  -564,  1165,  2961,  1499,  3261,
    1130,  1842,  3679,  1131,  1760,  1393,   761,  1763,  3570,  3553,
     587, -1358,  1064,  2076,  3008,  1768,  2810,  1372,  1434,   799,
    3005,  1373,   803,   581,  3032,   809,  1828,  2714,  1164,  2524,
    1130,  2718,   571,  1131,  3021,  3825,  1652,  3170,   823,  3023,
    3024,   974,  3911,  1781,  1782,  2734,  2735,  3264,  3349,   993,
    1001,  1804,  2312,   813,  3136,  2745,  1613,  1650,  3034,  3214,
     571,   913,  4116,  2249,  3026,  3401,  1130,  2839,  2313,  1131,
    2314,  1128,  1129,  1130,  1281,  1130,  1131,  1655,  1131,   930,
    3750,  2384,  2779,  2430,  1824,   802,  3606,   964,   581,  1372,
     944,  2161,  3122,  1373,  3850,  2677,  1428,  1655,  2431,  2190,
    1899,   571,   462,  3679,  2449,   988,   571,  1621,  3015,  1435,
    2387,  1788,   969,  1777,   571,   571,  3000,  3001,  1213,   981,
     944,  2649,   954,  1216,  1642,  1484,  1485,  2300,   824,   955,
    3621,  2300,  3429,  1008,  1009,  1010,  1130, -1358,  1996,  1131,
    1016,  2801,  1130,  3858,  2384,  1131,  1524,  1949,  3299,  1130,
    2106,  3999,  1131,  2717,  2364,  2719,  1539,  3847,  2426,  1842,
    2103,  2109,  2730,   840,  2112,  1829,  2692,  1657,  1552,  1553,
    1554,  2658,  2704,  1130,  1005,  2742,  1131,  2836,  1560,  1128,
    1129,  2751,  2427,  1176,  2428,  1065,  1130,  2586,  1702,  1131,
    2620,  1130,  3020,   918,  1131,  3827,  2765, -2266,   956,  -777,
    3133,  -564,  1130,  1649,  1130,  1131,  3729,  1131,  1130,  3378,
    -483,  1131,  2696,  2845,  1830,  2958,  2959,  2162,  3285,  3438,
    3121,  1130, -2266,  2697,  1131,  1011,  3791,  1659,  1954,  1132,
   -1358,  -484,  1806, -1358,  2005,  1304,  3402,  1107,  -399,  1130,
    1128,  1129,  1131,  1597,  1598,  1125,  1130,  1127,   989,  1131,
    2123,  1395,  3304,  3305,  1128,  1129,  3401,  1132,  1130,  1132,
    3308,  1131,  1312,  2979,  1789,  2798,   519,  3331,  1790,  1637,
    3157,  1170,   462,  1172,  2006,   944,   462,   581,  1130,   462,
     571,  1131,  2123,  1693,  -191,  1130,  3209,  1295,  1131,  1742,
   -2365,  1764,  3293,  3095,  1255,  1132,  1128,  1129,  1708,  1171,
    2729,  1395,  1132,  1175,  1132,  1130,  1179,  3799,  1131,  1128,
    1129,  3278,  2737,  2089,  1395,  3139,  1225,  1986,  1597,  2025,
   -1358,   114,  1255,  2600,  3244, -1316,  3235,   571,  3248,  1130,
    1128,  1129,  1131,  3403,  2705,  1955,  3459,   581,   571,  3687,
    1325,  1673,   571,  2811,  2450,  3263,  2433,  3135,  1235,   571,
    3897,  1395,  3853,   819,  3855,   891,  3283,  3284,  1808,  1252,
     525,  1128,  1129,  -564,  2852,  1132,  3218,  2852,  2852,  3243,
    1181,  1132,  3826,  3247,  1527,  2188,  3673,  1528,  1132,   827,
    2061,   581,  1128,  1129,  2852,  2804,  2004,  3456,  1128,  1129,
    2223,  3891,  2065,  2066,  1145,  1392,  1966, -1658,  3307,  3932,
    2163,  2471,  1132,  3324,  3327,  3329,  3330,  1130,  3157,  3933,
    1131,  1128,  1129,   860,   861,  1132,  2083,  2084,  1714,  2832,
    1132,  1967,  1277,  1974,  1246,   116,  1334,  3402,  3747,  2077,
    2246,  1132,   538,  1132,  2543,  2544,  1650,  1132,  1355,  3145,
   -2200,  1452,  3779,  1128,  1129,  1368,  2344,  2871,  2872,  3930,
    1132,  2889,  2890,  1962,   513,  2313,  2980,  2314,  3157,  3617,
    2275,  3675,  1298,  1917,  2430,  2011,  1638,  3300,  1132,  2244,
    3301,  1128,  1129,   571,  1884,  1132,  1398,   571,  2248,  2431,
    3404,  2251,  2252,  2253,  3323,  1278,  2994,  1132,  1639,  1828,
    2012,  3484,  1298,  2031,  3405,  3974,  1128,  1129,   597,  1728,
    1163,  2911,  2912,  2457,  1759,  1759,   983,  1132,  2318, -2201,
    2312,  2466,  2845,   682,  1132,  1130,  1887,  2224,  1131,  3543,
     571,   545,  2023,  3370,   581,  1466,   135,  1128,  1129,  2024,
    2345,   828,  1128,  1129,  1132, -1659,  2542,  2655,  3150,  1128,
    1129,  1453,  1674,  1128,  1129,  1603,  1464,  3485, -2200,  2027,
   -1658, -2328,  3136,  1749,  2504,  1473,  2113,  3752,  1132,    43,
    1065,  2833,  1788,  2427,  3844,  2428,  3586,  1128,  1129,  2087,
    1729,  3449,  3450,  2039,  1065,  3031,  1130,  1899,  1148,  1131,
    3444,  3406,  1641,   514,  2104,  1128,  1129,  2674,  1372,  3780,
    1130, -2277,  1373,  1131,  1913,  1128,  1129,  1128,  1129,  2111,
    2547,  2548,   546,  1128,  1129,   820,  2189,  1473,  1750,  3934,
    3253,  1829,  1327,  1128,  1129,  2604,  1244, -2201,  1949,  1715,
    1589,  3891,  3150,  1326,  2426,  1356,  1590,  1824,  2021,   548,
    1128,  1129,  1130,  1998,  4099,  1131,  1132,  2233,  2664,   581,
    2541,  1640,  4011,   131,  3618,  1130,  1394,   132,  1131,  2665,
    2551,  2048, -2328,  2046,  3796,  3035,  2887,  1730,  1328,  1128,
    1129,  1174,  -563,  1700,   611,  1675,  1130,  1128,  1129,  1131,
    1544,  2315,  2738,  2225,  1128,  1129,   581,  1830,  1128,  1129,
     933,  1645,  2079,  2316,  2672,  3405,   571,  2259, -1659,  1589,
    2184,  2185,  3151,   128,   581,   571,  2234,  1130,  1128,  1129,
    1131,   707,  2376,  1128,  1129,  3886,  1914,  1647,  1128,  1129,
    2867,   563,    55,  1128,  1129,  1789,  3808,  2228,  1130,  1790,
    1395,  1131,  1548,  2226,  1130,  1754,  1043,  1131,  1335,  2384,
    3382,   654,  1954,  1128,  1129,  1678,  3619,  1681,  1121,   571,
    3545,  1336,  1675,  2432,  1132,  2739,  1649,  1130,  3781,  2384,
    1131,   571,  1128,  1129,  1128,  1129,  2790,   581,  1731,  2052,
    1128,  1129,  1128,  1129,   515,  3152,   571,   571,  3935,  2190,
    2815,  2791,   129,  2749,  1751,  -563,  3151,  1717,  1589,  1130,
     805,   471,  1131,   564,  2840,  1726,  1164,  1128,  1129,  2687,
     659,  2235,  1128,  1129,  1128,  1129,  1810,  3486,  1755,   462,
     462,   462,   571,   462,   571,  1132,  1955,  1130,  1228,  1145,
    1131,  1395,  2433,  2260,  1400,  1761,   462,  3972,   581,  1132,
    2053,  2169,   690,  1746,   462,  1748,  1743,  1744,  1745,  2666,
    1747,  2261,  1130,  1685,  2054,  1131,  1128,  1129,  2740,  1401,
    3753,  1266,  2262,  1762,   571,  3774,  3775,  2985,   566,  3160,
    2615,  1767,  1155,  1156,  1157,  1158,  1159,  1160,  1337,   572,
     624,  1132,   806,  1130,  2236,  1776,  1131,  3040,  1130, -2200,
     975,  1131,  2209,  2986,  1132,  1130,  2055,  2090,  1131,  1130,
    2170,  1338,  1131,  3732,  2816,   671,  1739,   934,  1841,  2059,
     581,  1500,  1788,   575,   682,  1132, -2200,  2312,   891,  2711,
    2711,  2688,  1698,  1130,   571,  1473,  1131,  2171,   571,  1229,
    2078,  2096,  1226,   935,  2169,  1128,  1129,  2263,   625,  2210,
    3677,  1130,   577,  1718,  1131,  1915,  1132,  3754,  1128,  1129,
    3529,  1130,   807,  1130,  1131,  2616,  1131,  1343, -2201,  1130,
    3478,  2869,  1131,   976,  1128,  1129,  1699,  1132,  2091,  1130,
    2259,  3552,  1131,  1132,  3755,  2227,   588,  2526,   687,  3153,
     462,   462,  2870,  1964,   462, -2201,  1130,  3041,  2882,  1131,
    1340,  2295,  2758,  2170,  2759,  2172,  1132,  1128,  1129,  1650,
    1016,  -563,  1984,  3478,  2910,  1128,  1129,  1960,  1961,  1840,
    2838,  2892,  1756,  1148,  3731,  1130,   543,  2209,  1131,  1230,
    1916,  1128,  1129,  1130,  4079,  2426,  1131,  1344,  1132, -1634,
    1130,  2944,  2760,  1131,  1130,  2987,  1589,  1131,   589,  1349,
    1572,  4080,  2264,  2893,  1128,  1129,  1128,  1129,  1128,  1129,
    2296,   131,  2194,  2761,  1130,   132,  1132,  1131,  1719,  1130,
     626,  3881,  1131,  3153,  1130,  1789,  1802,  1131,  2173,  1130,
    1341,  3389,  1131,   831,  2817,  1065,  2032,  2297,  2237,  1128,
    1129,  1132,   544,   116,  2546,   475,   552,  2762,  3918,  1130,
    1296,  3484,  1131,   682,  1829,  2888,  2260,  2194,  2582,  2128,
    1824,   526,   707,  3530,  2265,  2097,  1128,  1129,  1130,   599,
    1130,  1131,  1132,  1131,  2261,  4106,  1130,  1132,  1130,  1131,
    3201,  1131,   600,  2491,  1132,  2262,  2933,  1043,  1132,   553,
    3465,  1987,  2561,  1128,  1129,  2784,  2497,  2095,  1999,  1128,
    1129,  3207,  2003,  1130,  3663,  2298,  1131,  3485,  1130,   605,
    1130,  1131,  1132,  1131,  1128,  1129,  2092,  1239,  1128,  1129,
    1240,  3919,  3985,  -563,  3202,  2436,  2010,  2818,  3902,  3787,
    1132,  2514,   715,   607,  1299,  1842,   603,   832,  3788,  2119,
    1132,  2785,  1132,   988,  2013,  1044,  2437,  3726,  1132,   477,
    4016,  4016,  1130,   581,  2014,  1131,  2022,   554,  1132,   571,
    2263,  2134,  2035,  1128,  1129,  3544,  2139,  2139,  3727,  2139,
    1841,  3257,  2036,  2433,  2997,  1132,  2196,  2197,  2299,  1649,
     610,   618,   571,  1954,  1300,   571,  2117,  2138,  2138,  2432,
    2138,   620,  4003,  2557,  2118,  1385,  1386,   581,   581,   571,
     571,   765,  2528,  2160,  1132,   833,  1235,  2139,  2139,  2139,
    2947,  2101,  1132,  1128,  1129,  3663,  3663,  1942,  2040,  1132,
    1252,  2187,  2174,  1132,   621,  2221,  2044,   622,  2138,  2138,
    2138,  1130,  1445,  2045,  1131,  2240,   956,  2047,  1128,  1129,
    3712,   707,   757,  1132,  1130,  1449,  1449,  1131,  1132,  1157,
    1158,  1159,  1160,  1132,  3992,  2098,  1241,  2051,  1132,  3713,
    1130,  2711,  2056,  1131,  1204,  2264,  1043,  2064,  1942,  2000,
     571,  2099,  2069,  1450,  1451,   623,  1128,  1129,  1132,  2763,
     762,  1268,  3563,  2258,  2991,  3993,   989,  4073,  2183,  4075,
     571,  2250,  2085,  1130,  1410,  1411,  1131,  1132,  2202,  1132,
    2728,  1130,  1128,  1129,  1131,  1132,  2422,  1132,  2001,  1165,
     800,  2269,  4092,  2842,  3148,  3920,  1298,  1130,  2549,  2858,
    1131,  2864,  2230,  1145,  1097,  2344,   768,  2265, -2365,  1128,
    1129,   891,  1132,   812,  3789,  3162,  3163,  1132,  2993,  1132,
    1130,  1205,  1130,  1131,  1130,  1131,  2865,  1131,  2604,  4129,
    4130,  2873,   244,  1589,   246,  2420,  3663,  3663,  3175,  1128,
    1129,  2315,  1824,   816,  1128,  1129,   818,  1400,  3700,  3701,
    3702,  3703,  2300,  2458, -1634,  1130,  1128,  1129,  1131,  3229,
     908,  1132,  3564,  3565,   828,  1206,  2371,  3566,  3567,  1759,
    1966,  2315,  1401,   555,  3734,  2877,   928,  2279,  3230,  2487,
    2385,  1207,  1130,  2672,  2487,  1131,  2286,  2287,  1589,  1128,
    1129,  2395,  1650,  1824,   556,  1967,  2117,  2291,  2292,  2293,
    2294,   541,  2302,  2303,  2969,  1422,  1423,   542,  3231,  1130,
    1145,   929,  1131,   860,   861,  1130,  2749,  1842,  1131,  2308,
   -1547,  1589,  1807,  3663,   557,  1824,  3941,  2113,   803,   581,
    1130,   937,  2434,  1131,  1130,   462,   956,  1131,  3663,  3835,
    1132,  3836,   571,   571,   571,  2341,   581,   581,  3664,  2460,
     946,  3663,  2463,  1132,  2879,  1943,   967,  1285,  2002,  1165,
   -1547,  1649,  2439,  2453,  2454,  2455,  1979,  2880,   985,  1132,
    1128,  1129,  2539,   581,  3714,  2341,   558,   984,   581,  1130,
     978,   979,  1131,  2881,  1400,  1018,   843,  1148,  2398,  2399,
   -1547,  2401,   986,  2403,  2404,  2405,  2406,  2407,  1135,  1136,
    2410,  2411,  1132,  3715,  2560,  2141,  1943,  2142,  3663,  1401,
    1132,   114,  1649,  1286,  1400,  1430,  2883,  1019,  3809,  3446,
    3663,  3663,  3266,  3267,  2886,  1841,  1132,  2018,  1165,  1130,
   -1547,  1020,  1131,  1137,  2028,  1165,  2465,  2940,  1022,  1401,
    2891,  1287,  1023,  1138,  1649,  2204,  2205,  2206, -1634,  1132,
    2432,  1132,  1024,  1132,  1130,   682,  1670,  1131,  1165,  1671,
    3663,  3336,  1672,  2894,   918,  2896,   581,  2898,   922,   923,
    3663,   924,  1942,   925,  1220,   906,   907,  1944,   910,  2029,
    1542,  3899,  1139,  2984,  1132,  2944,  1173,  2041,  1165,  1168,
    1589,  2558,  1130,  1140,  1148,  1131,  4074,  1183,   581,   581,
    2909,   844,  3797,  3663,  2487,  3663,  2640,  2645,  1169,  2042,
    1165,  1132,  1027,   891,   470,  3663,  3716,  1431,  1130,  1028,
    1141,  1131,  1432,  2043,  1165,  2900,  1150,  1151,  3663,  3924,
    3663,  2838,  3663,  1433,  2049,  1165,  1029,  3814,  1132,  3663,
    3817,  3818,  3819,  3820,  1132,  1130, -1634, -1358,  1131,  3663,
     891,  2343,  2901,  1030,  2590,  2683,  2487,  1201,  2903,  1132,
    1031,  2422,  1032,  1132,   891,  3663,  3663,  1203,  2342,  1128,
    1129,  2605,   845,  3180,  1033,  1130,  1142,  3181,  1131,  3409,
    1130,  2343,  1034,  1131,  1035,  3027,  3663,  3663,  1038,  2624,
    2626,  3663,  1130,  3717,  1650,  1131,   891,   471,   581, -1358,
     581,   581,  1040,  1221,  2304,  2305,   947,  1041,  1132,  1042,
    3718,  2535,  1165,  1145,  1945,  1046,  3038,  1824,  1047,  3386,
     860,   861,  3182,  1831,  3043,  1130,  2560,  3045,  1131,  1048,
    -734, -1358,  3719,  1150,  1151,  2564,  2565,  1049,  3916,  3917,
    1590,  1050,  1288,   707,  1051,  1650, -1358,  3929,  1942,   581,
     581, -1358,  2560,  1052,  2844,  1053,   948,  1434,  1132,  1153,
    1154,  1155,  1156,  1157,  1158,  1159,  1160,  1054,  1043,  1208,
    2884,  1165,  3388, -1358,  2950,  2951,  3286,  1650,   472,  3289,
    3290, -1358,  2623,  1132,  1055,  2701,  1056,   473,  1059,  2385,
    1060, -1358,  1842,  1066,  2385,  2715,  3302,  3394,  1067,  2385,
    1068,  2725, -1358,  2385,  2289,  2724,  1130, -1358,  1069,  1131,
    1070,  2194,  1071,  2050,  1072,  2724, -1358,  2385,  2385,  2195,
     581,  1132, -1634,  2746,  1073,  1832,  1101,  2385,  2754,  1590,
    1943,   949,  3047,  3048,  2756,  2757,  1649,  1074,   571,  3134,
    3048,  3185,  1165,  3204,  3205,  1076,   581,  1132,  1435,  1078,
     133,  1079,  4089,  2385,  2775,  1080,   466,   467,  1081,  2755,
    1210,  3396,  1082,  3368,  3369,  1289,  1153,  1154,  1155,  1156,
    1157,  1158,  1159,  1160,  1132,  1218,   520, -1358,  1857,  1858,
    3341,  3342,   527,  1083,  1811,  1290,   531,  4007,  3397,   118,
     891,  3374,  3383,  1824,  1021,  1084,  1812,  1148,  1085, -1358,
    2726,  2727,  3390,  1165,  1132,  3720,  1086,  2475, -1358,  1132,
    1087,  -688,  -688,  1860,  1088,   571,  2385,  2169,  3398,  1089,
    -688,  1132,  1219,  3399,  1863,  2753,  1090,  1291,  3168,  1091,
    2196,  2197,  1864,  2476,  1227,  3697,  2820,  1092, -1358,  1093,
    1145,  3400,  1165,   846,   847,   848,   849,   850,   851,  1578,
    1578,   759,   760,  1866,  1132,   763,   764,  1811,  1094,   766,
     767,  1095,   852,   474,  2198,  4109,  4110,  1369,  3186,  1812,
    1867,  3414,  3415,  3532,  2305,  2477,  2170,   592,  2478,   633,
    2797,   475, -1358,  1099,  1609,  1833,  2479,  3469,   891,  3546,
    3547,  3550,  3547,  1100,  1834,  3602,  3603,  3354,  1872,  1103,
    1835,  3551,  3547,  2171, -1358,  1104,  1943,  1108,  3890,  3607,
    3205,  2689,  1649,  3610,  3547,  3710,  3711,  3740,  3741,   476,
    3498,  3499,  -489,  1109,   477,  1144,  3745,  3547,  3746,  3547,
    3748,  3547,   950,  3502,  1113,  1132,  1150,  1151,  2134,  3505,
    1225,   581,   581,   581, -1358,  1128,  1129,  3472,  3749,  3547,
    1114,   571,  3627,  1813,   654,  3758,  3759,  2933,  3627,   478,
    3760,  3761,  3521,  1115,   581,  3523,  1875,  1590, -1467,  1650,
    1116,  2172,  2160,  3762,  3761,  1876,  1117,  1944,  2920,  2922,
    2923,   581,   581,   581,  1313,  1167,  1836,  1589,  3942,  3741,
    1877,  3943,  3741,   951,  2968,   952,  2805, -1358,  1233,  3379,
    2970,  1234,  2972,  3948,  3205,  1247,   658,  2487,  3976,  3977,
     581, -1358,   114,   659,  1314,  3983,  3984,  1258,  2955,  2956,
    2957,  1259,  1145,  1814,  1148,  1262,  1813,  1263, -1358,  1266,
   -1358,  4038,  2796,  4145,  4146,  1502,  1503,  1504,  1505,  1506,
     664,  3922,  3922,  1878,  2173,  3613,  3614,  1815,  3221,  3222,
   -1358, -1358,   978,   979, -1358, -1358,  1315,  1269,  1610,  1279,
    1879,  1316,  3191,  3192,   891,  3412,  3413,  1283,  1284,  1153,
    1154,  1155,  1156,  1157,  1158,  1159,  1160,  1837,  1296,  1305,
    2385,  1306,  1307,  1309,  1308,  2385,  2385,  2967,  2724,  3608,
    3609,  1310,  3611,  3612,  -563,  1332,  1814,  2480,   115,  1333,
    1339,   581,  1348,  2315,  2385,  1816,  1350,  1351,   671,  1353,
    1358,  3690,  3694,  1883,  1945,  2316,   116,   978,   979,  2724,
    1815,  1885,  1146,  1363,  1369,  1857,  1858,  2724,  1375,  1182,
    2724,  1507,  1508,  1509,  1510,  1377,  1379,  1382,  1383,  1387,
     571,  1390,  1391,  1439,  1147,  1650,  1440,  1441,  1444,  3049,
    1467,  1469,   571,  1163,  1473,  1480,  3105,  1492,  -688,  -688,
    1860,  1494,   462,  1150,  1151,   682,  3115,  -688,  1107,  2395,
    1530,  1863,  2418,  3050,  1541,  1542,  3120,  1543,  1816,  1864,
     686,   687,   117,  1589,  1604,  1891,  1620,  3130,  1817,  3111,
    1587,  3573,  1626,  1663,   571,  3033,  3909,  1477,  1478,  1479,
    1866,  1599,  1317,  3036,  1646,  1653,  1148,  -563,  3144,  1490,
    1660,   118,  1664,   471,  1369,  3132,  3854,  1867,  1665,  1045,
    1098,  1102,  1668,  1667,  1686,   978,   979,  1687,  1690,  2481,
    1692,  1696,  1511,  1268,  1512,  1513,  1514,  1704,  2174,  1705,
    1892,  1545,  3226,  1515,  1549,  1872,  1400,  1706,  1611,   769,
    3690,  1707,  3629,  1736,  3694,  1893,  1713,  1721,  1727,  1894,
    2683,  1817,   119,  1741,  1612,  1568,  1569,  1738,   815,  1573,
    1765,  1401,  1318,  1769,  1770,   826,  1771,  3587,  1772,  3184,
    1774,  1130,  1780,  1895,  1131,  1783,  1785,  2624,  1787,  1591,
    1592,  2482,  1800,  1809,  1896,  3909,   914,  1149,  1155,  1156,
    1157,  1158,  1159,  1160,  1910,  1395,  1920,  1918,  1921,  3690,
    3694,  1919,  2590,  1875,   633,  1922,  1923,  1938,  1516,  1924,
    2483,  1925,  1876,  1926,  2605,  3216,  1927,   581,  1928,  1929,
    1930,  1931,  1932,  1319,  1933,  1934,   581,  1877,  1935,  1936,
    1937,  1956,  2558,  1957,  1959,  1150,  1151,  1969,  2827,  1970,
    2442,  1971,  1972,   707,   581,  1973,  1152,  3473,  1976,  2019,
    3474,  3909,  2221,  3665,  3217,  1989,  1506,  1517,  1518,  2009,
     713,  1982,  1991,  1992,  3763,   715,  1993,  2008,   716,  1590,
    2623,  4126,  3472,   120,  2015,  2016,  1589,  2017,  2026,   654,
    1878,  2385,  2067,  2030,  2094,  2178,  2034,  2038,  2057,  2058,
    2317,  2385,  2063,  2724,  3309,  2068,  2080,  1879,  2081,  1589,
    2082, -1070,  1590,  -563,  2100,  1160, -1187,  2724,  2110,  2154,
    2130,  2385,  3724,  4126,  2157,  2126,  2129,  2166,  1589,  3475,
    3476,  2181,  2203,  2217,  1576,  1320,  2231,  2487,  2239,  2243,
    2245,   658,  4029,  4030,  2267,  4032,  3310,   121,   659,  2268,
    3311,  2271,  2272,  2274,  2280,  2278,  2143,  2285,  2281,  2282,
    1883,  1510,  2283,  2284,  2315,  2327,  2332,  2336,  1885,  2333,
    1321,  2337,  2339,  2340,  2346,   664,  2348,  2144,  1153,  1154,
    1155,  1156,  1157,  1158,  1159,  1160,  4065,  2355,  4066,  4067,
    2349,  2145,  1145,  3312,  2356,  2360,  2361,   475,  2421,  2366,
    1519,  2146,  3434,   122,  2367,  2440,  -865,  2388,  2456,  2461,
    1132,  1520,  1521,  3367,  3367,  3367,  2465,  2474,  2469,  2492,
    2493,  2494,  2118,  2505,  2563,  2506,  2519,  2536,  2537,  2538,
    2545,   581,  1891,  2555,  2554,  2566,  2567,  2568,  2569,  1857,
    1858,  2570,  2576,   671,  2580,  2578,  2581,  2583,  2591,  2584,
    2147,  2148,  2595,  1854,  2607,  2608,  2609,  1185,  2610,  1511,
    1855,  1856,   581,  1514,  3895,  3724,  2210,  3893,   490,  2209,
    1515,  2628,  1857,  1858,  1860,  -563,  3423,  4143,  2149,  3338,
    2631,  1590,  2627,  2652,  2632,  1863,  2629,  1892,  2653,  2683,
     772,   773,  2874,  1864,  2656,  2660,   581,  3359,  2661,  2662,
     682,  2678,  1893,  1859,  2685,  1145,  1894,  1860,  1861,  2686,
    2731,  3508,  1862,  2733,  1866,   686,   687,  -702,  1863,  2796,
    2783,  2802,  2767,  2793,   491,  2789,  1864,  2807,  1369,  2795,
    1895,  1867,  2803,  2808,  1865,  1884,  1186,  2150,  3367,   755,
    1802,  1896,  2835,  3481,  1983,  1516,  2259,  1866,  2845,  1988,
    2849,  3587,   492,  2854,  2259,  2855,  2856,  2857,  2487,  1872,
    2859,  1369,  2860,  2868,  1867,  2878,   755,  2902,   774,  2908,
    2913,  1868,  1869,  2906,  2916,  2918,  1148,  2924,  1870,  1145,
    2926,  2935,  2930,   581,   493,  2938,  1871,  1239,  2151,  2939,
    -804,  2946,  1872,  2443,  2952,  1518,   775,  2954,  1187,  2949,
    2965,  2966,  2971,  2981,  2992,  2998,  3445,  3006,  3524,   776,
     978,   979,  3003,  3002,  3226,  3528,  3313,  3018,  3019,  2033,
    1873,  1188,  3314,  2037,  3030,  3106,  3109,  1875,  3039,  3112,
    3130,   777,   494,   778,  3113,  3117,  1876,  3131,  3119,  3125,
    3126,   473,  -406,  2194,  3140,   779,  3141,  2062,  3142,  3143,
    3146,  1877,   581,  3161,  3164,  3197,  3171,  3199,  1874,  3315,
    1875,  3183,  3219,  3172,  3236,  3227,   780,  3240,  3208,  1876,
    3189,  3241,  2260,  3233,  4151,  3245,  3246,  3507,  3268,  3237,
    2260,  3269,   755,  3287,  1877,  3258,  2386,   755,   707,  1148,
    2261,   781,  3473,  3265,  3577,  3474,  3280,  3893,  2261,   782,
    4061,  2262,  3335,  3337,  1878,   713,  3332,  3339,   581,  2262,
     715,  3346,  3533,   716,  3356,  1150,  1151,  1189,   755,  3357,
    3355,  1879,  3360,  3316,  3361,  1190,  3363,  1519,  3600,  3372,
    3326,  3391,  3392,  3393,   755,  3373,  3374,  1878,   783,  1521,
    3367,  3367,  3375,  3367,  3367,  3384,  3385,  3387,   -63,  3410,
    3417,  3415,  3419,   495,  1879,  1191,  3418,  3428,  1880,  3623,
    4061,  2969,  3421,  1148,  3475,  3476,  2487,  3430,  3724,  3431,
    3436,  3440,  3442, -1279,  1883,  3435,  2263,   755,   755,   755,
     755,  3439,  1885,  3443,  2263, -1284,  3455,  3467,  3468,   755,
    4138,  3323,  3470,  1192,  1881,  3471,  3501,  3497,  3447,  1882,
    3503,  3511,  3512,  3513,  3515,  3516,  3451,  1883,  3522,  3670,
     571,  3534,  3549,  3554,  1884,  1885,  3535,   496,  1193,  1194,
    3367,  3317,  3556,  3557,  3558,  4138,  3559,  3560,  1150,  1151,
    3571,  3671,  3590,  3572,  3591,  3594,  3592,  1195,  3616,  3630,
    1196,   132,  3596,  3632,  1886,   571,  1891,  3578,  1153,  1154,
    1155,  1156,  1157,  1158,  1159,  1160,  1887,  1888,  1889,  1890,
     581,   784,  3631,  3598,  3666,  3383,  3706,  3674,  3686,  3679,
    3705,  3699,  3735,   497,  3708,  3696,  3765,  3742,   498,  1891,
     785,  2264,  3737,  -276,  3783,  3739,   786,  3785,  1197,  2264,
    3792,  3751,  3801,  3786,   787,  3795,   499,  3800,  3812,  3815,
    3813,  1892,  1150,  1151,  3816,  3824,  3821,  3830,  3769,  3828,
    3834,  2779,  3832,  3776,  3848,  3861,  1893,  3858,   788,  -294,
    1894,  3887, -1467,  3889,  3888,  3901,  3904,  3926,  3938,  3940,
    3944,   789,   790,  3945,  1892,  3954,  3946,  3955,   500,  3959,
    3965,  3947,  3966,  2265,  1895,  3967,  3970,  3987,  3988,  1893,
    3989,  2265,  3990,  1894,  3996,  1896,  3999,  4006,  4004,  4008,
   -2116,  1153,  1154,  1155,  1156,  1157,  1158,  1159,  1160,  4012,
    4018,  4031,  4033,  4009,   791,  4023,  4028,  1895,  1590,  4034,
    4024,  4036,  4043,  4037,  3577,  4057, -1430,  4068,  1896,  4056,
    4070,  4072,  4071,  4076,  4081,  4084,  4077,  4087,  4091,  3925,
    4088,  4095,  4097,   792,  4100,  4101,  4103,  4114,  4104,  4108,
    3600,  4112,  3600,  4141,  3837,  4121,  4127,   755,  4150,  3778,
    2413,  2562,  3345,  2693,   998,  3793,   793,  3538,   794,  3896,
    4019,  3536,  3852,  4020,  1407,  3669,  1154,  1155,  1156,  1157,
    1158,  1159,  1160,  1381,  4153,  3862,  -804,  3540,  4117,  3643,
    3644,  3646,  4131,  3647,  3649,  3650,  3651,  3652,  4040,  3653,
    3654,  3952,  3657,  4041,  4017,  3658,  3963,  3659,   755,   755,
    3964,  1853,  2121,  2752,  3811,  1897,  2934,   755,   755,   755,
     755,   755,   755,   755,  3676,  3206,  1443,  3707,   755,  3905,
    4022,   755,   755,   581,   755,  3424,   755,  3979,  4027,  4060,
     755,  3931,   619,  3823,   755,   755,   755,   755,  2560,   755,
     755,  1941,  3362,  3605,  3123,  2375,  3281,   755,   755,  1220,
     755,   755,   755,   755,   755,  2382,   755,  2825,   755,  2706,
     755,   755,   755,   755,   755,   755,   755,   755,   755,   755,
    2780,  3270,   755,   755,  3625,   755,  3333,   755,  3294,  3295,
    3480,   755,  3514,   755,   755,  3903,  3506,  3273,  3234,  3843,
    3624,  4026,  3851,   485,  3757,   486,   755,   755,  3845,  1968,
    3798,  3846,   755,  3803,  1590,   755,  2452,  3802,  3628,  3685,
    3915,  2379,   755,   755,   755,  3272,   755,  2770,  2256,  3483,
    3271,  1786, -1358,   755,   755,   755,  1939,   755,   755,   755,
     755,   755,   581,   755,   755,   755,   755,   755,   755,   755,
     755,  2592,  2186,  1399,   755,   755,  2929,   810,  2611,  2395,
    2395,  2579,   926,   837,   773,  1408,  1409,  1410,  1411,  1412,
    1413,  3187,  1414,  1415,  1416,  1417,  1418,  1419,  1420,  3725,
    1421,  2208,  2915,  3958, -1358,  1273,  2490,  1540,  1221,  2673,
    3242,  3604,  3998,  3997,  3744,   581,  3118,  1491,  3958,  2552,
    3276,  1579,  3601,  3923,  4107,  3589,  2618,   501,  1709,  2459,
    2575,  3968,  3426,  1684, -1358,  2598, -1358,  3212,  4045,  3211,
    3252,  4147,  3980,  3981,  1981,  4053,  3973,  1017,   915,  2247,
     899, -1358,  2131,  3046,  3198,  1753, -1358,  1711,  4021,  4059,
    3991,   774,  4144,  4035,  4152,  3510,  1725,  2218,  3215,  2989,
    3238, -1358,  3593,  1261,  3441,  2165,  1716,  3698, -1358,   839,
    2834,  2917,   755,   841,  1265,  1677, -1358,  3704,  1002,   775,
    2534,   755,  1595,  2905,   613,  1003, -1358,   614,  1025,  1004,
       0,     0,   776,     0,     0,  4093,     0, -1358,     0,     0,
    4098,     0, -1358,     0,     0,     0,     0,     0,  1422,  1423,
       0, -1358,     0,     0,   777,     0,   778,     0,     0,  1058,
       0,     0,     0,     0,     0,     0,     0,  1590,   779,     0,
    3958,     0,     0,     0,     0,  1075,  4139,     0,     0,     0,
    4055,  1502,  1503,  1504,  1505,  1506,   581,     0,     0,   780,
    1590,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1590,
       0,  4139, -1358,     0,   781,     0,     0,     0,     0,     0,
       0,  1123,   782,     0,     0,  4083,     0,     0,     0,     0,
       0,     0,     0,     0, -1358,     0,     0,     0,     0,     0,
    3958,     0,  3958, -1358,     0,     0,     0,     0,     0,  4102,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3958,
       0,   783,     0,     0,     0,     0,     0,     0,     1,     2,
       0,     0,     0, -1358,     0,     0,     0,  1507,  1508,  1509,
    1510,     0,     0,     3,     0,     4,     0,     0,     0,     5,
       0,     0,     0,     0,     0,     0,  3958,  3958,     0,     0,
       0,  4149,     0,     0,     6,     7,     0,     0,     0,     0,
       0,     8,     0,     0,     0,     9,    10, -1358,     0,     0,
     755,     0,     0,     0,     0,     0,     0,     0,    11,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1358,
       0,     0,     0,     0,     0,    12,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,     0,     0,     0,     0,
       0,     0,   755,    14,    15,    16,     0,     0,  1511, -1358,
    1512,  1513,  1514,     0,   784,    17,    18,     0,     0,  1515,
       0,     0,     0,     0,     0,     0,     0,   755,    19,     0,
       0,     0,     0,   785,     0,     0,     0,     0,     0,   786,
      20,     0,     0,     0,     0,     0,     0,   787,     0,     0,
       0,   755,   755,   755,     0,     0,   755,    21,     0,     0,
       0,     0, -1358,     0,     0,     0,     0,     0,   755,     0,
       0,   788,     0,    22,     0, -1358, -1358,     0,    23,     0,
       0,    24,     0,     0,   789,   790,     0,     0,  1406,     0,
     755,     0,     0, -1358,  1516, -1358,   755,     0,     0,   755,
       0,   755,     0,     0,     0,     0,    25,   755,    26,   755,
     755,     0,     0,     0,     0, -1358, -1358,     0,     0, -1358,
   -1358,     0,     0,     0,    27,     0,     0,   791,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1471,
    1472,    28,     0,  1517,  1518,    29,     0,     0,  1482,  1483,
       0,     0,  1486,  1487,  1488,     0,   792,     0,     0,  1493,
       0,     0,  1495,  1496,     0,  1497,     0,  1498,     0,     0,
       0,   755,     0,     0,     0,  1533,  1534,  1535,  1536,   793,
    1538,   794,     0,     0,     0,     0,     0,     0,  1546,  1547,
       0,  1550,  1551,     0,     0,     0,     0,  1555,     0,  1556,
       0,  1558,  1559,     0,     0,  1562,  1563,  1564,  1565,  1566,
    1567,     0,     0,  1570,  1571,     0,  1574,     0,  1575,     0,
       0,     0,  1580,     0,  1584,  1585,     0,     0,     0,     0,
       0,     0,    30,     0,   773,     0,     0,  1593,  1594,     0,
       0,     0,     0,  1123,     0,     0,  1600,     0,     0,     0,
       0,     0,    31,  1605,  1606,  1607,     0,     0,     0,     0,
       0,     0,    32,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    33,     0,     0,     0,  1519,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1643,  1520,  1521,     0,
       0,     0,    34,     0,     0,    35,     0,    36,     0,     0,
      37,     0,     0,    38,     0,    39,     0,     0,     0,     0,
      40,   774,     0,    41,     0,     0,     0,     0,     0,     0,
      42,     0,     0,     0,     0,    43,     0,     0,     0,     0,
       0,     0,     0,    44,     0,     0,     0,     0,    45,   775,
       0,     0,    46,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   776,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    47,     0,     0,     0,     0,
       0,    48,     0,     0,   777,     0,   778,     0,     0,     0,
       0,     0,     0,     0,  1857,  1858,     0,     0,   779,     0,
     755,     0,     0,  1724,     0,     0,     0,     0,     0,     0,
       0,     0,  1740,     0,     0,     0,     0,     0,     0,   780,
       0,     0,     0,    49,     0,     0,     0,  -688,  -688,  1860,
       0,     0,     0,     0,     0,    50,  -688,     0,     0,    51,
    1863,     0,     0,    52,   781,     0,     0,     0,  1864,    53,
       0,     0,   782,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   755,     0,     0,  1866,
     755,     0,     0,     0,    54,   755,   755,     0,     0,     0,
       0,     0,     0,  1369,   755,     0,  1867,   755,    55,     0,
       0,   783,     0,     0,     0,     0,     0,   755,     0,   755,
     755,     0,     0,   755,   755,   755,   755,   755,     0,     0,
     755,     0,     0,     0,  1872,     0,     0,     0,     0,   755,
       0,     0,     0,     1,     2,     0,     0,     0,   755,     0,
     755,     0,   755,   755,   755,   755,     0,     0,     3,   755,
     755,   755,     0,     0,     5,     0,   755,   755,   755,     0,
     755,     0,   755,     0,   755,     0,   755,     0,   755,     6,
       7,     0,     0,     0,   755,     0,     8,     0,     0,     0,
       9,    10,     0,     0,   755,     0,     0,     0,     0,     0,
       0,   755,  1875,    11,   755,     0,     0,     0,     0,     0,
     755,  1876,     0,   755,     0,     0,     0,   755,     0,     0,
      12,     0,     0,     0,     0,     0,  1877,     0,     0,     0,
       0,  1994,     0,     0,   784,     0,     0,     0,     0,     0,
      13,     0,     0,     0,     0,     0,     0,     0,    14,    15,
      16,     0,     0,   785,     0,     0,     0,     0,     0,   786,
      17,    18,     0,     0,     0,     0,     0,   787,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1878,
       0,     0,     0,     0,     0,    20,     0,     0,     0,     0,
       0,   788,     0,     0,     0,     0,  1879,     0,     0,     0,
       0,     0,    21,     0,   789,   790,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    22,     0,
       0,     0,     0,    23,     0,     0,    24,     0,     0,     0,
       0,     0,  2071,  2073,  2075,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   791,     0,  1883,
       0,    25,     0,    26,     0,     0,     0,  1885,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,  2102,     0,     0,     0,     0,   792,     0,     0,     0,
    2107,     0,  2108,     0,     0,     0,    28,     0,     0,     0,
      29,     0,     0,     0,     0,     0,     0,     0,     0,   793,
       0,   794,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1891,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2182,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1892,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1893,     0,     0,     0,  1894,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    32,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    33,     0,  1895,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1896,     0,     0,     0,     0,     0,     0,    34,     0,     0,
      35,     0,    36,     0,     0,    37,     0,     0,    38,     0,
      39,     0,     0,     0,     0,    40,     0,     0,    41,     0,
       0,     0,     0,     0,     0,    42,     0,   755,     0,     0,
      43,   755,     0,     0,     0,     0,     0,     0,    44,     0,
       0,     0,     0,    45,     0,     0,     0,    46,     0,     0,
       0,     0,     0,   755,   755,     0,     0,     0,     0,     0,
    2768,     0,     0,     0,     0,     0,     0,  1855,     0,     0,
      47,     0,     0,     0,     0,   755,    48,     0,     0,  1857,
    1858,     0,     0,     0,   755,     0,   755,     0,   755,     0,
       0,     0,     0,     0,  3051,  3052,     0,     0,     0,     0,
       0,  3053,     0,  3054,   755,  3055,  3056,     0,     0,   755,
    1859,     0,     0,     0,  1860,     0,     0,     0,    49,     0,
       0,  3057,     0,     0,     0,  1863,     0,     0,     0,     0,
      50,  2396,   755,  1864,    51,     0,     0,     0,    52,     0,
       0,  1865,   755,     0,    53,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1866,     0,     0,     0,     0,     0,
       0,     0,     0,  3058,     0,     0,  3059,     0,  1369,    54,
       0,  1867,     0,     0,  3060,     0,     0,   857,  1868,     0,
       0,     0,     0,    55,     0,  2769,     0,   819,   858,     0,
     755,  3061,     0,  1871,     0,     0,   755,  2468,     0,  1872,
       0,  2470,     0,     0,     0,     0,  2472,  2473,  3062,     0,
       0,   859,   860,   861,     0,  2488,     0,     0,     0,     0,
       0,     0,   862,     0,   863,     0,     0,  1873,  2495,     0,
    2496,  3063,     0,  3064,  2499,  2500,  2501,  2502,  2503,   755,
     864,     0,   865,     0,   866,  3065,  3066,     0,     0,     0,
    2507,     0,   867,     0,     0,     0,     0,     0,     0,  2509,
       0,  2510,   755,  2511,  2512,  2513,     0,  1875,     0,     0,
    2516,  2517,  2518,     0,     0,     0,  1876,  2520,  2521,  2522,
       0,  2523,     0,  2525,     0,  2527,     0,  2529,  3067,  2530,
       0,  1877,     0,     0,     0,  2532,     0,     0, -1634,   868,
       0,     0,     0,   869,     0,  2540,   870,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3068,     0,     0,     0,
       0,  2550,     0,     0,  2553,  3069,  3070,     0,  3071,     0,
       0,     0,     0,   871,     0,   872,     0,     0,     0,     0,
     873,     0,     0,   874,  1878,     0,   755,   755,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3072,  3073,
    3074,  1879,     0,     0,     0,  1880,   875,   876,     0,     0,
       0,     0,   877,     0,     0,     0,  3075,  3076,  3077,     0,
       0,     0,  3078,     0,     0,  3079,     0,     0,     0,     0,
     878,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3080,  3081,     0,   755,     0,  1882,     0,     0,     0,
       0,   879,     0,     0,  1883,     0,     0,     0,     0,     0,
       0,     0,  1885,     0,     0,     0,     0,     0,     0,   755,
     755,     0,   755,     0,  3082,  3083,     0,     0,     0,   880,
       0,     0,   755,     0,     0,     0,     0,   755,     0,     0,
     755,     0,   755,   755,     0,     0,     0,     0,  3084,     0,
       0,     0,     0,     0,  1888,     0,     0,     0,     0,     0,
       0,   881,   755,     0,     0,     0,     0,     0,     0,     0,
       0,   882,     0,     0,   755,     0,  1891,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     883,     0,     0,     0,     0,   755,  3085,     0,     0,     0,
    3086,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3087,     0,     0,     0,   884,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   755,   885,   886,     0,     0,   887,
     888,  1892,     0,     0,     0,     0,     0,     0,     0,     0,
     755,     0,     0,     0,     0,     0,  1893,     0,     0,     0,
    1894,     0,     0,     0,     0,     0,     0,     0,   755,     0,
       0,     0,     0,  3088,     0,     0,  3089,     0,     0,  3090,
    3091,  3092,  3093,     0,  1895,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1896,     0,     0,     0,   889,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   890,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3094,  3095,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1640,     0, -2143,     0,     0,
       0,   891,     0,     0,  3096,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   892,   893,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2841,     0,
       0,     0,  2843,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2862,  2863,   894,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2143,     0,     0,
       0,     0,     0,   895,     0,     0,  2885,     0,     0,     0,
       0,     0,     0,     0,     0,  2895,     0,  2897,     0,  2899,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   755,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2925,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   755,
     755,     0,     0,     0,     0,     0,     0,     0,   755,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2977,     0,     0,     0,     0,     0,  2983,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3012,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3017,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   755,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   755,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     755,     0,     0,     0,     0,     0,     0,  3107,  3108,     0,
       0,     0,     0,     0,   755,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3149,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3166,  3167,     0,     0,     0,     0,     0,  3661,     0,     0,
       0,     0,     0,  3174,     0,     0,     0,     0,  3176,     0,
       0,  3177,     0,  3178,  3179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   755,     0,  3194,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   755,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   755,  3194,   755,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   755,     0,     0,     0,     0,     0,  3661,  3661,
       0,  3239,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3194,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   755,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   755,     0,   755,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   755,     0,  3661,
    3661,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3900,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   755,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3194,     0,     0,     0,   755,     0,  3661,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3661,   755,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3661,     0,     0,     0,     0,     0,
    3453,  3454,   755,     0,     0,     0,     0,     0,     0,  3012,
       0,   755,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     755,  3661,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3661,  3661,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   755,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3661,     0,     0,     0,     0,     0,     0,
     755,     0,     0,  3661,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   755,
    3555,     0,     0,     0,     0,     0,  3661,     0,  3661,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3661,     0,
       0,   755,     0,     0,     0,     0,  3194,     0,     0,     0,
       0,  3661,     0,  3661,     0,  3661,     0,     0,     0,     0,
       0,  3012,  3661,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3661,     0,     0,  2977,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3661,  3661,
       0,     0,     0,     0,   755,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3661,
    3661,     0,     0,     0,  3661,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3730,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3736,     0,  3738,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3764,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3012,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3856,     0,  3857,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3865,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3956,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3961,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3194,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   138,     0,
     629,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,  4002,     0,   630,     0,   146,   147,   148,   149,   150,
     631,   152,     0,   153,     0,     0,   632,   154,   155,   633,
     634,   635,   156,   636,     0,   157,   158,   159,  1581,   160,
       0,   161,   162,     0,     0,   163,   637,   638,   164,     0,
     165,   639,   640,   167,     0,   168,   169,   170,   641,   172,
       0,   642,   174,     0,   175,   176,   177,   178,   179,   180,
     181,  4047,   182,     0,   183,     0,   643,   185,     0,   186,
     644,   645,   187,     0,     0,   188,   646,   647,     0,   648,
     649,     0,   189,   190,   191,   650,   651,   652,     0,     0,
    4069,     0,   653,   194,   654,     0,     0,   655,   195,     0,
     196,     0,     0,     0,   197,     0,   198,   199,   200,   201,
       0,     0,  4086,   202,     0,     0,   203,   204,   205,     0,
       0,     0,   206,     0,   207,   208,     0,   209,   210,   211,
       0,     0,   212,     0,   213,   214,   215,   216,   217,   656,
       0,   218,   219,   220,   657,   221,   658,   222,   223,     0,
     224,   225,   226,   659,     0,   227,     0,     0,     0,   228,
     229,     0,   230,     0,   231,  4140,   660,   233,   661,   235,
     236,     0,   237,     0,   662,     0,   238,   663,     0,   240,
     664,     0,   241,   242,     0,     0,     0,   665,   244,   245,
     246,   247,   666,     0,   248,   249,     0,     0,   250,   251,
       0,   252,     0,     0,   667,   253,   254,   668,     0,     0,
     255,     0,   256,   257,     0,   258,   259,     0,     0,     0,
     260,     0,     0,   261,   262,     0,  1582,   263,     0,   669,
     264,   265,     0,     0,     0,     0,     0,   670,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,   671,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
     672,   288,   289,   290,   291,   673,   292,   293,   294,     0,
       0,     0,   295,   296,   297,   674,   299,     0,     0,   675,
     301,   676,   302,     0,   303,   677,   678,   679,   680,   681,
     308,   309,   310,   311,     0,   682,   312,   313,     0,     0,
     314,   315,   316,   317,   683,   684,   685,   318,   319,     0,
     686,   687,     0,   320,   321,   688,     0,   323,   324,   325,
       0,   326,     0,     0,     0,     0,     0,     0,   689,     0,
       0,     0,   328,   329,   330,   690,   331,   332,   333,   334,
     335,   691,   337,   338,   339,   692,   693,   342,   694,     0,
     343,   344,   345,     0,   346,     0,   347,   348,   349,   350,
       0,   695,   352,   353,     0,     0,   354,     0,     0,     0,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,   364,     0,   365,   366,   367,   696,   697,   368,
       0,   369,   370,   371,     0,   372,   373,     0,     0,   698,
     374,   375,   376,   377,   378,   379,   699,   381,   382,   383,
       0,   700,   385,     0,     0,     0,   386,   387,   388,   389,
       0,     0,     0,   390,     0,     0,     0,   391,   392,   393,
     394,     0,   395,   396,   397,   398,   399,     0,     0,     0,
       0,     0,     0,   400,   401,     0,   402,     0,     0,   403,
       0,     0,   404,   405,     0,     0,   406,   701,   702,   407,
     408,     0,   409,   703,   411,   412,   413,   704,   705,   414,
     415,   416,   417,   706,   418,   419,     0,   420,     0,   421,
     422,   423,     0,   707,   424,   425,     0,   708,   709,   710,
     711,     0,     0,     0,     0,  1583,   430,   431,     0,   712,
     713,   714,   433,   434,   435,   715,   436,   437,   716,   438,
     439,     0,   440,   441,     0,     0,   442,     0,   717,     0,
     444,     0,   445,     0,   718,   447,   448,     0,     0,   719,
     720,   721,   722,   449,     0,     0,   450,   723,     0,   724,
     451,   452,   453,   725,     0,     0,     0,     0,   455,   456,
       0,   457,   458,     0,     0,   726,     0,     0,     0,   727,
     728,     0,     0,     0,     0,   729,   730,     0,     0,   731,
     732,     0,     0,   733,   734,   138,     0,   629,   140,   141,
     142,   143,  2973,     0,     0,     0,     0,   144,     0,     0,
     630,     0,   146,   147,   148,   149,   150,   631,   152,     0,
     153,     0,     0,  2974,   154,   155,   633,   634,   635,   156,
     636,     0,   157,   158,   159,     0,   160,     0,   161,   162,
       0,     0,   163,   637,   638,   164,     0,   165,   639,   640,
     167,     0,   168,   169,   170,   641,   172,     0,   642,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,   182,
       0,   183,     0,   643,   185,     0,   186,   644,   645,   187,
       0,     0,   188,   646,   647,     0,   648,   649,     0,   189,
     190,   191,   650,   651,   652,     0,     0,     0,     0,   653,
     194,   654,     0,     0,  2975,   195,     0,   196,     0,     0,
       0,   197,     0,   198,   199,   200,   201,     0,     0,     0,
     202,     0,     0,   203,   204,   205,     0,     0,     0,   206,
       0,   207,   208,     0,   209,   210,   211,     0,     0,   212,
       0,   213,   214,   215,   216,   217,   656,     0,   218,   219,
     220,   657,   221,   658,   222,   223,     0,   224,   225,   226,
     659,     0,   227,     0,     0,     0,   228,   229,     0,   230,
       0,   231,     0,   660,   233,   661,   235,   236,     0,   237,
       0,   662,     0,   238,   663,     0,   240,   664,     0,   241,
     242,     0,     0,     0,   665,   244,   245,   246,   247,   666,
       0,   248,   249,     0,     0,   250,   251,     0,   252,     0,
       0,   667,   253,   254,   668,     0,     0,   255,     0,   256,
     257,     0,   258,   259,     0,     0,     0,   260,     0,     0,
     261,   262,     0,     0,   263,     0,   669,   264,   265,     0,
       0,     0,     0,     0,   670,   267,     0,   268,     0,   269,
       0,   270,   271,     0,     0,   671,     0,     0,     0,     0,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,     0,   286,   287,   672,   288,   289,
     290,   291,   673,   292,   293,   294,     0,     0,     0,   295,
     296,   297,   674,   299,     0,     0,   675,   301,   676,   302,
       0,   303,   677,   678,   679,   680,   681,   308,   309,   310,
     311,     0,   682,   312,   313,     0,     0,   314,   315,   316,
     317,   683,   684,   685,   318,   319,     0,   686,   687,     0,
     320,   321,   688,  2976,   323,   324,   325,     0,   326,     0,
       0,     0,     0,     0,     0,   689,     0,     0,     0,   328,
     329,   330,   690,   331,   332,   333,   334,   335,   691,   337,
     338,   339,   692,   693,   342,   694,     0,   343,   344,   345,
       0,   346,     0,   347,   348,   349,   350,     0,   695,   352,
     353,     0,     0,   354,     0,     0,     0,   355,   356,   357,
     358,   359,     0,     0,   360,   361,   362,     0,   363,   364,
       0,   365,   366,   367,   696,   697,   368,     0,   369,   370,
     371,     0,   372,   373,     0,     0,   698,   374,   375,   376,
     377,   378,   379,   699,   381,   382,   383,     0,   700,   385,
       0,     0,     0,   386,   387,   388,   389,     0,     0,     0,
     390,     0,     0,     0,   391,   392,   393,   394,     0,   395,
     396,   397,   398,   399,     0,     0,     0,     0,     0,     0,
     400,   401,     0,   402,     0,     0,   403,     0,     0,   404,
     405,     0,     0,   406,   701,   702,   407,   408,     0,   409,
     703,   411,   412,   413,   704,   705,   414,   415,   416,   417,
     706,   418,   419,     0,   420,     0,   421,   422,   423,     0,
     707,   424,   425,     0,   708,   709,   710,   711,     0,     0,
       0,     0,     0,   430,   431,     0,   712,   713,   714,   433,
     434,   435,   715,   436,   437,   716,   438,   439,     0,   440,
     441,     0,     0,   442,     0,   717,     0,   444,     0,   445,
       0,   718,   447,   448,     0,     0,   719,   720,   721,   722,
     449,     0,     0,   450,   723,     0,   724,   451,   452,   453,
     725,     0,     0,     0,     0,   455,   456,     0,   457,   458,
       0,     0,   726,     0,     0,     0,   727,   728,     0,     0,
       0,     0,   729,   730,     0,     0,   731,   732,     0,     0,
     733,   734,   138,     0,   629,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   630,     0,   146,
     147,   148,   149,   150,   631,   152,     0,   153,     0,     0,
     632,   154,   155,   633,   634,   635,   156,   636,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
     637,   638,   164,     0,   165,   639,   640,   167,     0,   168,
     169,   170,   641,   172,     0,   642,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,   182,     0,   183,     0,
     643,   185,     0,   186,   644,   645,   187,     0,     0,   188,
     646,   647,     0,   648,   649,     0,   189,   190,   191,   650,
     651,   652,     0,     0,     0,     0,   653,   194,   654,     0,
       0,   655,   195,     0,   196,     0,     0,     0,   197,     0,
     198,   199,   200,   201,     0,     0,     0,   202,     0,     0,
     203,   204,   205,     0,     0,     0,   206,     0,   207,   208,
       0,   209,   210,   211,     0,     0,   212,     0,   213,   214,
     215,   216,   217,   656,     0,   218,   219,   220,   657,   221,
     658,   222,   223,     0,   224,   225,   226,   659,     0,   227,
       0,     0,     0,   228,   229,     0,   230,     0,   231,     0,
     660,   233,   661,   235,   236,     0,   237,     0,   662,     0,
     238,   663,     0,   240,   664,     0,   241,   242,     0,     0,
       0,   665,   244,   245,   246,   247,   666,     0,   248,   249,
       0,     0,   250,   251,     0,   252,     0,     0,   667,   253,
     254,   668,     0,     0,   255,     0,   256,   257,     0,   258,
     259,     0,     0,     0,   260,     0,     0,   261,   262,     0,
       0,   263,     0,   669,   264,   265,     0,     0,     0,     0,
       0,   670,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,   671,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,   672,   288,   289,   290,   291,   673,
     292,   293,   294,     0,     0,     0,   295,   296,   297,   674,
     299,     0,     0,   675,   301,   676,   302,     0,   303,   677,
     678,   679,   680,   681,   308,   309,   310,   311,     0,   682,
     312,   313,     0,     0,   314,   315,   316,   317,   683,   684,
     685,   318,   319,     0,   686,   687,     0,   320,   321,   688,
       0,   323,   324,   325,     0,   326,     0,     0,     0,     0,
       0,     0,   689,     0,     0,     0,   328,   329,   330,   690,
     331,   332,   333,   334,   335,   691,   337,   338,   339,   692,
     693,   342,   694,     0,   343,   344,   345,     0,   346,     0,
     347,   348,   349,   350,     0,   695,   352,   353,     0,     0,
     354,     0,     0,     0,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,   364,     0,   365,   366,
     367,   696,   697,   368,     0,   369,   370,   371,     0,   372,
     373,     0,     0,   698,   374,   375,   376,   377,   378,   379,
     699,   381,   382,   383,     0,   700,   385,  1121,     0,     0,
     386,   387,   388,   389,     0,     0,     0,   390,     0,     0,
       0,   391,   392,   393,   394,     0,   395,   396,   397,   398,
     399,     0,     0,     0,     0,     0,     0,   400,   401,     0,
     402,     0,     0,   403,     0,     0,   404,   405,     0,     0,
     406,   701,   702,   407,   408,     0,   409,   703,   411,   412,
     413,   704,   705,   414,   415,   416,   417,   706,   418,   419,
       0,   420,     0,   421,   422,   423,     0,   707,   424,   425,
       0,   708,   709,   710,   711,     0,     0,     0,     0,     0,
     430,   431,     0,   712,   713,   714,   433,   434,   435,   715,
     436,   437,   716,   438,   439,     0,   440,   441,     0,     0,
     442,     0,   717,     0,   444,     0,   445,     0,   718,   447,
     448,     0,     0,   719,   720,   721,   722,   449,     0,     0,
     450,   723,     0,   724,   451,   452,   453,   725,     0,     0,
       0,     0,   455,   456,     0,   457,   458,     0,     0,   726,
       0,     0,     0,   727,   728,     0,     0,     0,     0,   729,
    1122,     0,     0,   731,   732,     0,     0,   733,   734,   138,
       0,   629,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   630,     0,   146,   147,   148,   149,
     150,   631,   152,     0,   153,     0,     0,   632,   154,   155,
     633,   634,   635,   156,   636,     0,   157,   158,   159,     0,
     160,     0,   161,   162,     0,     0,   163,   637,   638,   164,
       0,   165,   639,   640,   167,     0,   168,   169,   170,   641,
     172,     0,   642,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,     0,   183,     0,   643,   185,     0,
     186,   644,   645,   187,     0,     0,   188,   646,   647,     0,
     648,   649,     0,   189,   190,   191,   650,   651,   652,     0,
       0,     0,     0,   653,   194,   654,     0,     0,   655,   195,
       0,   196,     0,     0,     0,   197,     0,   198,   199,   200,
     201,     0,     0,     0,   202,     0,     0,   203,   204,   205,
       0,     0,     0,   206,     0,   207,   208,     0,   209,   210,
     211,     0,     0,   212,     0,   213,   214,   215,   216,   217,
     656,     0,   218,   219,   220,   657,   221,   658,   222,   223,
       0,   224,   225,   226,   659,     0,   227,     0,     0,     0,
     228,   229,     0,   230,     0,   231,     0,   660,   233,   661,
     235,   236,     0,   237,     0,   662,     0,   238,   663,     0,
     240,   664,     0,   241,   242,     0,     0,     0,   665,   244,
     245,   246,   247,   666,     0,   248,   249,     0,     0,   250,
     251,     0,   252,     0,     0,   667,   253,   254,   668,     0,
       0,   255,     0,   256,   257,     0,   258,   259,     0,     0,
       0,   260,     0,     0,   261,   262,     0,     0,   263,     0,
     669,   264,   265,     0,     0,     0,     0,     0,   670,   267,
       0,   268,     0,   269,     0,   270,   271,     0,     0,   671,
       0,     0,     0,     0,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,   286,
     287,   672,   288,   289,   290,   291,   673,   292,   293,   294,
       0,     0,     0,   295,   296,   297,   674,   299,     0,     0,
     675,   301,   676,   302,     0,   303,   677,   678,   679,   680,
     681,   308,   309,   310,   311,     0,   682,   312,   313,     0,
       0,   314,   315,   316,   317,   683,   684,   685,   318,   319,
       0,   686,   687,     0,   320,   321,   688,     0,   323,   324,
     325,     0,   326,     0,     0,     0,     0,     0,     0,   689,
       0,     0,     0,   328,   329,   330,   690,   331,   332,   333,
     334,   335,   691,   337,   338,   339,   692,   693,   342,   694,
       0,   343,   344,   345,     0,   346,     0,   347,   348,   349,
     350,     0,   695,   352,   353,     0,     0,   354,     0,     0,
       0,   355,   356,   357,   358,   359,     0,     0,   360,   361,
     362,     0,   363,   364,     0,   365,   366,   367,   696,   697,
     368,     0,   369,   370,   371,     0,   372,   373,     0,     0,
     698,   374,   375,   376,   377,   378,   379,   699,   381,   382,
     383,     0,   700,   385,     0,     0,     0,   386,   387,   388,
     389,     0,     0,     0,   390,     0,     0,     0,   391,   392,
     393,   394,     0,   395,   396,   397,   398,   399,     0,     0,
       0,     0,     0,     0,   400,   401,     0,   402,     0,     0,
     403,     0,     0,   404,   405,     0,     0,   406,   701,   702,
     407,   408,     0,   409,   703,   411,   412,   413,   704,   705,
     414,   415,   416,   417,   706,   418,   419,     0,   420,     0,
     421,   422,   423,     0,   707,   424,   425,     0,   708,   709,
     710,   711,     0,     0,     0,     0,     0,   430,   431,     0,
     712,   713,   714,   433,   434,   435,   715,   436,   437,   716,
     438,   439,     0,   440,   441,     0,     0,   442,     0,   717,
       0,   444,     0,   445,     0,   718,   447,   448,     0,     0,
     719,   720,   721,   722,   449,     0,     0,   450,   723,     0,
     724,   451,   452,   453,   725,     0,     0,     0,     0,   455,
     456,     0,   457,   458,     0,     0,   726,     0,     0,     0,
     727,   728,     0,     0,     0,     0,   729,   730,  1492,     0,
     731,   732,     0,     0,   733,   734,   138,     0,   629,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   630,     0,   146,   147,   148,   149,   150,   631,   152,
       0,   153,     0,     0,   632,   154,   155,   633,   634,   635,
     156,   636,     0,   157,   158,   159,     0,   160,     0,   161,
     162,     0,     0,   163,   637,   638,   164,     0,   165,   639,
     640,   167,     0,   168,   169,   170,   641,   172,     0,   642,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,     0,   183,     0,   643,   185,     0,   186,   644,   645,
     187,     0,     0,   188,   646,   647,     0,   648,   649,     0,
     189,   190,   191,   650,   651,   652,     0,     0,     0,     0,
     653,   194,   654,     0,     0,   655,   195,     0,   196,     0,
       0,     0,   197,     0,   198,   199,   200,   201,     0,     0,
       0,   202,     0,     0,   203,   204,   205,     0,     0,     0,
     206,     0,   207,   208,     0,   209,   210,   211,     0,     0,
     212,     0,   213,   214,   215,   216,   217,   656,     0,   218,
     219,   220,   657,   221,   658,   222,   223,     0,   224,   225,
     226,   659,     0,   227,     0,     0,     0,   228,   229,  2070,
     230,     0,   231,     0,   660,   233,   661,   235,   236,     0,
     237,     0,   662,     0,   238,   663,     0,   240,   664,     0,
     241,   242,     0,     0,     0,   665,   244,   245,   246,   247,
     666,     0,   248,   249,     0,     0,   250,   251,     0,   252,
       0,     0,   667,   253,   254,   668,     0,     0,   255,     0,
     256,   257,     0,   258,   259,     0,     0,     0,   260,     0,
       0,   261,   262,     0,     0,   263,     0,   669,   264,   265,
       0,     0,     0,     0,     0,   670,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,   671,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,   672,   288,
     289,   290,   291,   673,   292,   293,   294,     0,     0,     0,
     295,   296,   297,   674,   299,     0,     0,   675,   301,   676,
     302,     0,   303,   677,   678,   679,   680,   681,   308,   309,
     310,   311,     0,   682,   312,   313,     0,     0,   314,   315,
     316,   317,   683,   684,   685,   318,   319,     0,   686,   687,
       0,   320,   321,   688,     0,   323,   324,   325,     0,   326,
       0,     0,     0,     0,     0,     0,   689,     0,     0,     0,
     328,   329,   330,   690,   331,   332,   333,   334,   335,   691,
     337,   338,   339,   692,   693,   342,   694,     0,   343,   344,
     345,     0,   346,     0,   347,   348,   349,   350,     0,   695,
     352,   353,     0,     0,   354,     0,     0,     0,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
     364,     0,   365,   366,   367,   696,   697,   368,     0,   369,
     370,   371,     0,   372,   373,     0,     0,   698,   374,   375,
     376,   377,   378,   379,   699,   381,   382,   383,     0,   700,
     385,     0,     0,     0,   386,   387,   388,   389,     0,     0,
       0,   390,     0,     0,     0,   391,   392,   393,   394,     0,
     395,   396,   397,   398,   399,     0,     0,     0,     0,     0,
       0,   400,   401,     0,   402,     0,     0,   403,     0,     0,
     404,   405,     0,     0,   406,   701,   702,   407,   408,     0,
     409,   703,   411,   412,   413,   704,   705,   414,   415,   416,
     417,   706,   418,   419,     0,   420,     0,   421,   422,   423,
       0,   707,   424,   425,     0,   708,   709,   710,   711,     0,
       0,     0,     0,     0,   430,   431,     0,   712,   713,   714,
     433,   434,   435,   715,   436,   437,   716,   438,   439,     0,
     440,   441,     0,     0,   442,     0,   717,     0,   444,     0,
     445,     0,   718,   447,   448,     0,     0,   719,   720,   721,
     722,   449,     0,     0,   450,   723,     0,   724,   451,   452,
     453,   725,     0,     0,     0,     0,   455,   456,     0,   457,
     458,     0,     0,   726,     0,     0,     0,   727,   728,     0,
       0,     0,     0,   729,   730,     0,     0,   731,   732,     0,
       0,   733,   734,   138,     0,   629,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   630,     0,
     146,   147,   148,   149,   150,   631,   152,     0,   153,     0,
       0,   632,   154,   155,   633,   634,   635,   156,   636,     0,
     157,   158,   159,     0,   160,     0,   161,   162,     0,     0,
     163,   637,   638,   164,     0,   165,   639,   640,   167,     0,
     168,   169,   170,   641,   172,     0,   642,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,     0,   183,
       0,   643,   185,     0,   186,   644,   645,   187,     0,     0,
     188,   646,   647,     0,   648,   649,     0,   189,   190,   191,
     650,   651,   652,     0,     0,     0,     0,   653,   194,   654,
       0,     0,   655,   195,     0,   196,     0,     0,     0,   197,
       0,   198,   199,   200,   201,     0,     0,     0,   202,     0,
       0,   203,   204,   205,     0,     0,     0,   206,     0,   207,
     208,     0,   209,   210,   211,     0,     0,   212,     0,   213,
     214,   215,   216,   217,   656,     0,   218,   219,   220,   657,
     221,   658,   222,   223,     0,   224,   225,   226,   659,     0,
     227,     0,     0,     0,   228,   229,  2072,   230,     0,   231,
       0,   660,   233,   661,   235,   236,     0,   237,     0,   662,
       0,   238,   663,     0,   240,   664,     0,   241,   242,     0,
       0,     0,   665,   244,   245,   246,   247,   666,     0,   248,
     249,     0,     0,   250,   251,     0,   252,     0,     0,   667,
     253,   254,   668,     0,     0,   255,     0,   256,   257,     0,
     258,   259,     0,     0,     0,   260,     0,     0,   261,   262,
       0,     0,   263,     0,   669,   264,   265,     0,     0,     0,
       0,     0,   670,   267,     0,   268,     0,   269,     0,   270,
     271,     0,     0,   671,     0,     0,     0,     0,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,   287,   672,   288,   289,   290,   291,
     673,   292,   293,   294,     0,     0,     0,   295,   296,   297,
     674,   299,     0,     0,   675,   301,   676,   302,     0,   303,
     677,   678,   679,   680,   681,   308,   309,   310,   311,     0,
     682,   312,   313,     0,     0,   314,   315,   316,   317,   683,
     684,   685,   318,   319,     0,   686,   687,     0,   320,   321,
     688,     0,   323,   324,   325,     0,   326,     0,     0,     0,
       0,     0,     0,   689,     0,     0,     0,   328,   329,   330,
     690,   331,   332,   333,   334,   335,   691,   337,   338,   339,
     692,   693,   342,   694,     0,   343,   344,   345,     0,   346,
       0,   347,   348,   349,   350,     0,   695,   352,   353,     0,
       0,   354,     0,     0,     0,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,   364,     0,   365,
     366,   367,   696,   697,   368,     0,   369,   370,   371,     0,
     372,   373,     0,     0,   698,   374,   375,   376,   377,   378,
     379,   699,   381,   382,   383,     0,   700,   385,     0,     0,
       0,   386,   387,   388,   389,     0,     0,     0,   390,     0,
       0,     0,   391,   392,   393,   394,     0,   395,   396,   397,
     398,   399,     0,     0,     0,     0,     0,     0,   400,   401,
       0,   402,     0,     0,   403,     0,     0,   404,   405,     0,
       0,   406,   701,   702,   407,   408,     0,   409,   703,   411,
     412,   413,   704,   705,   414,   415,   416,   417,   706,   418,
     419,     0,   420,     0,   421,   422,   423,     0,   707,   424,
     425,     0,   708,   709,   710,   711,     0,     0,     0,     0,
       0,   430,   431,     0,   712,   713,   714,   433,   434,   435,
     715,   436,   437,   716,   438,   439,     0,   440,   441,     0,
       0,   442,     0,   717,     0,   444,     0,   445,     0,   718,
     447,   448,     0,     0,   719,   720,   721,   722,   449,     0,
       0,   450,   723,     0,   724,   451,   452,   453,   725,     0,
       0,     0,     0,   455,   456,     0,   457,   458,     0,     0,
     726,     0,     0,     0,   727,   728,     0,     0,     0,     0,
     729,   730,     0,     0,   731,   732,     0,     0,   733,   734,
     138,     0,   629,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   630,     0,   146,   147,   148,
     149,   150,   631,   152,     0,   153,     0,     0,   632,   154,
     155,   633,   634,   635,   156,   636,     0,   157,   158,   159,
       0,   160,     0,   161,   162,     0,     0,   163,   637,   638,
     164,     0,   165,   639,   640,   167,     0,   168,   169,   170,
     641,   172,     0,   642,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,     0,   183,     0,   643,   185,
       0,   186,   644,   645,   187,     0,     0,   188,   646,   647,
       0,   648,   649,     0,   189,   190,   191,   650,   651,   652,
       0,     0,     0,     0,   653,   194,   654,     0,     0,   655,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,     0,     0,     0,   202,     0,     0,   203,   204,
     205,     0,     0,     0,   206,     0,   207,   208,     0,   209,
     210,   211,     0,     0,   212,     0,   213,   214,   215,   216,
     217,   656,     0,   218,   219,   220,   657,   221,   658,   222,
     223,     0,   224,   225,   226,   659,     0,   227,     0,     0,
       0,   228,   229,  2074,   230,     0,   231,     0,   660,   233,
     661,   235,   236,     0,   237,     0,   662,     0,   238,   663,
       0,   240,   664,     0,   241,   242,     0,     0,     0,   665,
     244,   245,   246,   247,   666,     0,   248,   249,     0,     0,
     250,   251,     0,   252,     0,     0,   667,   253,   254,   668,
       0,     0,   255,     0,   256,   257,     0,   258,   259,     0,
       0,     0,   260,     0,     0,   261,   262,     0,     0,   263,
       0,   669,   264,   265,     0,     0,     0,     0,     0,   670,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
     671,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,   672,   288,   289,   290,   291,   673,   292,   293,
     294,     0,     0,     0,   295,   296,   297,   674,   299,     0,
       0,   675,   301,   676,   302,     0,   303,   677,   678,   679,
     680,   681,   308,   309,   310,   311,     0,   682,   312,   313,
       0,     0,   314,   315,   316,   317,   683,   684,   685,   318,
     319,     0,   686,   687,     0,   320,   321,   688,     0,   323,
     324,   325,     0,   326,     0,     0,     0,     0,     0,     0,
     689,     0,     0,     0,   328,   329,   330,   690,   331,   332,
     333,   334,   335,   691,   337,   338,   339,   692,   693,   342,
     694,     0,   343,   344,   345,     0,   346,     0,   347,   348,
     349,   350,     0,   695,   352,   353,     0,     0,   354,     0,
       0,     0,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,   364,     0,   365,   366,   367,   696,
     697,   368,     0,   369,   370,   371,     0,   372,   373,     0,
       0,   698,   374,   375,   376,   377,   378,   379,   699,   381,
     382,   383,     0,   700,   385,     0,     0,     0,   386,   387,
     388,   389,     0,     0,     0,   390,     0,     0,     0,   391,
     392,   393,   394,     0,   395,   396,   397,   398,   399,     0,
       0,     0,     0,     0,     0,   400,   401,     0,   402,     0,
       0,   403,     0,     0,   404,   405,     0,     0,   406,   701,
     702,   407,   408,     0,   409,   703,   411,   412,   413,   704,
     705,   414,   415,   416,   417,   706,   418,   419,     0,   420,
       0,   421,   422,   423,     0,   707,   424,   425,     0,   708,
     709,   710,   711,     0,     0,     0,     0,     0,   430,   431,
       0,   712,   713,   714,   433,   434,   435,   715,   436,   437,
     716,   438,   439,     0,   440,   441,     0,     0,   442,     0,
     717,     0,   444,     0,   445,     0,   718,   447,   448,     0,
       0,   719,   720,   721,   722,   449,     0,     0,   450,   723,
       0,   724,   451,   452,   453,   725,     0,     0,     0,     0,
     455,   456,     0,   457,   458,     0,     0,   726,     0,     0,
       0,   727,   728,     0,     0,     0,     0,   729,   730,     0,
       0,   731,   732,     0,     0,   733,   734,   138,     0,   629,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   630,     0,   146,   147,   148,   149,   150,   631,
     152,     0,   153,     0,     0,   632,   154,   155,   633,   634,
     635,   156,   636,     0,   157,   158,   159,     0,   160,     0,
     161,   162,     0,     0,   163,   637,   638,   164,     0,   165,
     639,   640,   167,     0,   168,   169,   170,   641,   172,     0,
     642,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,     0,   183,     0,   643,   185,     0,   186,   644,
     645,   187,     0,     0,   188,   646,   647,     0,   648,   649,
       0,   189,   190,   191,   650,   651,   652,     0,     0,     0,
       0,   653,   194,   654,     0,     0,   655,   195,     0,   196,
       0,     0,     0,   197,     0,   198,   199,   200,   201,     0,
       0,     0,   202,     0,     0,   203,   204,   205,     0,     0,
       0,   206,     0,   207,   208,     0,   209,   210,   211,     0,
       0,   212,     0,   213,   214,   215,   216,   217,   656,     0,
     218,   219,   220,   657,   221,   658,   222,   223,     0,   224,
     225,   226,   659,     0,   227,     0,     0,     0,   228,   229,
       0,   230,     0,   231,     0,   660,   233,   661,   235,   236,
       0,   237,     0,   662,     0,   238,   663,     0,   240,   664,
       0,   241,   242,     0,     0,     0,   665,   244,   245,   246,
     247,   666,     0,   248,   249,     0,     0,   250,   251,     0,
     252,     0,     0,   667,   253,   254,   668,     0,     0,   255,
       0,   256,   257,     0,   258,   259,     0,     0,     0,   260,
       0,     0,   261,   262,     0,     0,   263,     0,   669,   264,
     265,     0,     0,     0,     0,     0,   670,   267,     0,   268,
       0,   269,     0,   270,   271,     0,     0,   671,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,     0,   286,   287,   672,
     288,   289,   290,   291,   673,   292,   293,   294,     0,     0,
       0,   295,   296,   297,   674,   299,     0,     0,   675,   301,
     676,   302,     0,   303,   677,   678,   679,   680,   681,   308,
     309,   310,   311,     0,   682,   312,   313,     0,     0,   314,
     315,   316,   317,   683,   684,   685,   318,   319,     0,   686,
     687,     0,   320,   321,   688,     0,   323,   324,   325,     0,
     326,     0,     0,     0,     0,     0,     0,   689,     0,     0,
       0,   328,   329,   330,   690,   331,   332,   333,   334,   335,
     691,   337,   338,   339,   692,   693,   342,   694,     0,   343,
     344,   345,     0,   346,     0,   347,   348,   349,   350,     0,
     695,   352,   353,     0,     0,   354,     0,     0,     0,   355,
     356,   357,   358,   359,     0,     0,   360,   361,   362,     0,
     363,   364,     0,   365,   366,   367,   696,   697,   368,     0,
     369,   370,   371,     0,   372,   373,     0,     0,   698,   374,
     375,   376,   377,   378,   379,   699,   381,   382,   383,     0,
     700,   385,     0,     0,     0,   386,   387,   388,   389,     0,
       0,     0,   390,     0,     0,     0,   391,   392,   393,   394,
       0,   395,   396,   397,   398,   399,     0,     0,     0,     0,
       0,     0,   400,   401,     0,   402,     0,     0,   403,     0,
       0,   404,   405,     0,     0,   406,   701,   702,   407,   408,
       0,   409,   703,   411,   412,   413,   704,   705,   414,   415,
     416,   417,   706,   418,   419,     0,   420,     0,   421,   422,
     423,     0,   707,   424,   425,     0,   708,   709,   710,   711,
       0,     0,     0,     0,     0,   430,   431,     0,   712,   713,
     714,   433,   434,   435,   715,   436,   437,   716,   438,   439,
       0,   440,   441,     0,     0,   442,     0,   717,     0,   444,
       0,   445,     0,   718,   447,   448,     0,     0,   719,   720,
     721,   722,   449,     0,     0,   450,   723,     0,   724,   451,
     452,   453,   725,     0,     0,     0,     0,   455,   456,     0,
     457,   458,     0,     0,   726,     0,     0,     0,   727,   728,
       0,     0,     0,     0,   729,   730,     0,     0,   731,   732,
       0,     0,   733,   734,   138,     0,   629,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   630,
       0,   146,   147,   148,   149,   150,   631,   152,     0,   153,
       0,     0,   632,   154,   155,   633,   634,   635,   156,   636,
       0,   157,   158,   159,     0,   160,     0,   161,   162,     0,
       0,   163,   637,   638,   164,     0,   165,   639,   640,   167,
       0,   168,   169,   170,   641,   172,     0,   642,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,   182,     0,
     183,     0,   643,   185,     0,   186,   644,   645,   187,     0,
       0,   188,   646,   647,     0,   648,   649,     0,   189,   190,
     191,   650,   651,   652,     0,     0,     0,     0,   653,   194,
     654,     0,     0,   655,   195,     0,   196,     0,     0,     0,
     197,     0,   198,   199,   200,   201,     0,     0,     0,   202,
       0,     0,   203,   204,   205,     0,     0,     0,   206,     0,
     207,   208,     0,   209,   210,   211,     0,     0,   212,     0,
     213,   214,   215,   216,   217,   656,     0,   218,   219,   220,
     657,   221,   658,   222,   223,     0,   224,   225,   226,   659,
       0,   227,     0,     0,     0,   228,   229,     0,   230,     0,
     231,     0,   660,   233,   661,   235,   236,     0,   237,     0,
     662,     0,   238,   663,     0,   240,   664,     0,   241,   242,
       0,     0,     0,   665,   244,   245,   246,   247,   666,     0,
     248,   249,     0,     0,   250,   251,     0,   252,     0,     0,
     667,   253,   254,   668,     0,     0,   255,     0,   256,   257,
       0,   258,   259,     0,     0,     0,   260,     0,     0,   261,
     262,     0,     0,   263,     0,   669,   264,   265,     0,     0,
       0,     0,     0,   670,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,   671,     0,     0,     0,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,   672,   288,   289,   290,
     291,   673,   292,   293,   294,     0,     0,     0,   295,   296,
     297,   674,   299,     0,     0,   675,   301,   676,   302,     0,
     303,   677,   678,   679,   680,   681,   308,   309,   310,   311,
       0,   682,   312,   313,     0,     0,   314,   315,   316,   317,
     683,   684,   685,   318,   319,     0,   686,   687,     0,   320,
     321,   688,     0,   323,   324,   325,     0,   326,     0,     0,
       0,     0,     0,     0,   689,     0,     0,     0,   328,   329,
     330,   690,   331,   332,   333,   334,   335,   691,   337,   338,
     339,   692,   693,   342,   694,     0,   343,   344,   345,     0,
     346,     0,   347,   348,   349,   350,     0,   695,   352,   353,
       0,     0,   354,     0,     0,     0,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,   364,     0,
     365,   366,   367,   696,   697,   368,     0,   369,   370,   371,
       0,   372,   373,     0,     0,   698,   374,   375,   376,   377,
     378,   379,   699,   381,   382,   383,     0,   700,   385,     0,
       0,     0,   386,   387,   388,   389,     0,     0,     0,   390,
       0,     0,     0,   391,   392,   393,   394,     0,   395,   396,
     397,   398,   399,     0,     0,     0,     0,     0,     0,   400,
     401,     0,   402,     0,     0,   403,     0,     0,   404,   405,
       0,     0,   406,   701,   702,   407,   408,     0,   409,   703,
     411,   412,   413,   704,   705,   414,   415,   416,   417,   706,
     418,   419,     0,   420,     0,   421,   422,   423,     0,   707,
     424,   425,     0,   708,   709,   710,   711,     0,     0,     0,
       0,     0,   430,   431,     0,   712,   713,   714,   433,   434,
     435,   715,   436,   437,   716,   438,   439,     0,   440,   441,
       0,     0,   442,     0,   717,     0,   444,     0,   445,     0,
     718,   447,   448,     0,     0,   719,   720,   721,   722,   449,
       0,     0,   450,   723,     0,   724,   451,   452,   453,   725,
       0,     0,     0,     0,   455,   456,     0,   457,   458,     0,
       0,   726,     0,     0,     0,   727,   728,     0,     0,     0,
       0,   729,  1057,     0,     0,   731,   732,     0,     0,   733,
     734,   138,     0,   629,   140,   141,   142,   143,  1614,     0,
       0,     0,     0,  1615,     0,     0,   630,     0,   146,   147,
     148,   149,   150,   631,   152,     0,   153,     0,     0,   632,
     154,   155,   633,   634,   635,   156,   636,     0,   157,   158,
     159,     0,   160,     0,   161,   162,     0,     0,   163,   637,
     638,   164,     0,   165,   639,   640,   167,     0,   168,   169,
     170,   641,   172,     0,   642,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,   182,     0,   183,     0,   643,
     185,     0,   186,   644,   645,   187,     0,     0,   188,   646,
     647,     0,   648,   649,     0,   189,   190,   191,   650,   651,
     652,     0,     0,     0,     0,   653,   194,   654,     0,     0,
     655,   195,     0,   196,     0,     0,     0,   197,     0,   198,
     199,   200,   201,     0,     0,     0,   202,     0,     0,   203,
     204,   205,     0,     0,     0,   206,     0,   207,   208,     0,
     209,   210,   211,     0,     0,   212,     0,   213,   214,   215,
     216,   217,   656,     0,   218,   219,   220,   657,   221,   658,
     222,   223,     0,   224,   225,   226,   659,     0,   227,     0,
       0,     0,   228,   229,     0,   230,     0,   231,     0,   660,
     233,   661,   235,   236,     0,   237,     0,   662,     0,   238,
     663,     0,   240,   664,     0,   241,   242,     0,     0,     0,
     665,   244,   245,   246,   247,   666,     0,   248,   249,     0,
       0,   250,   251,     0,   252,     0,     0,   667,   253,   254,
     668,     0,     0,   255,     0,   256,   257,     0,   258,   259,
       0,     0,     0,   260,     0,     0,   261,   262,     0,     0,
     263,     0,   669,   264,   265,     0,     0,     0,     0,     0,
     670,   267,     0,   268,     0,   269,     0,   270,   271,     0,
       0,   671,     0,     0,     0,     0,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
       0,   286,   287,   672,   288,   289,   290,   291,   673,   292,
     293,   294,     0,     0,     0,   295,   296,   297,   674,   299,
       0,     0,   675,   301,   676,   302,     0,   303,   677,   678,
     679,   680,   681,   308,   309,   310,   311,     0,   682,   312,
     313,     0,     0,   314,   315,   316,   317,   683,     0,   685,
     318,   319,     0,   686,   687,     0,   320,   321,   688,     0,
     323,   324,   325,     0,   326,     0,     0,     0,     0,     0,
       0,   689,     0,     0,     0,   328,   329,   330,   690,   331,
     332,   333,   334,   335,   691,   337,   338,   339,   692,   693,
     342,   694,     0,   343,   344,   345,     0,   346,     0,   347,
     348,   349,   350,     0,   695,   352,   353,     0,     0,   354,
       0,     0,     0,   355,   356,   357,   358,   359,     0,     0,
     360,   361,   362,     0,   363,   364,     0,   365,   366,   367,
     696,   697,   368,     0,   369,   370,   371,     0,   372,   373,
       0,     0,   698,   374,   375,   376,   377,   378,   379,   699,
     381,   382,   383,     0,   700,   385,     0,     0,     0,   386,
     387,   388,   389,     0,     0,     0,   390,     0,     0,     0,
     391,   392,   393,   394,     0,   395,   396,   397,   398,   399,
       0,     0,     0,     0,     0,     0,   400,   401,     0,   402,
       0,     0,   403,     0,     0,   404,   405,     0,     0,   406,
     701,   702,   407,   408,     0,   409,   703,   411,   412,   413,
     704,   705,   414,   415,   416,   417,   706,   418,   419,     0,
     420,     0,   421,   422,   423,     0,   707,   424,   425,     0,
     708,   709,   710,   711,     0,     0,     0,     0,     0,   430,
     431,     0,   712,   713,   714,   433,   434,   435,   715,   436,
     437,   716,   438,   439,     0,   440,   441,     0,     0,   442,
       0,   717,     0,   444,     0,   445,     0,   718,   447,   448,
       0,     0,   719,   720,   721,   722,   449,     0,     0,   450,
     723,     0,   724,   451,   452,   453,   725,     0,     0,     0,
       0,   455,   456,     0,   457,   458,     0,     0,   726,     0,
       0,     0,   727,   728,     0,     0,     0,     0,   729,   730,
       0,     0,   731,   732,     0,     0,   733,   734,   138,     0,
     629,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   630,     0,   146,   147,   148,   149,   150,
     631,   152,     0,   153,     0,     0,   632,   154,   155,   633,
     634,   635,   156,   636,     0,   157,   158,   159,     0,   160,
       0,   161,   162,     0,     0,   163,   637,   638,   164,     0,
     165,   639,   640,   167,     0,   168,   169,   170,   641,   172,
       0,   642,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,   182,     0,   183,     0,   643,   185,     0,   186,
     644,   645,   187,     0,     0,   188,   646,   647,     0,   648,
     649,     0,   189,   190,   191,   650,   651,   652,     0,     0,
       0,     0,   653,   194,   654,     0,     0,   655,   195,     0,
     196,     0,     0,     0,   197,     0,   198,   199,   200,   201,
       0,     0,     0,   202,     0,     0,   203,   204,   205,     0,
       0,     0,   206,     0,   207,   208,     0,   209,   210,   211,
       0,     0,   212,     0,   213,   214,   215,   216,   217,   656,
       0,   218,   219,   220,   657,   221,   658,   222,   223,     0,
     224,   225,   226,   659,     0,   227,     0,     0,     0,   228,
     229,     0,   230,     0,   231,     0,   660,   233,   661,   235,
     236,     0,   237,     0,   662,     0,   238,   663,     0,   240,
     664,     0,   241,   242,     0,     0,     0,   665,   244,   245,
     246,   247,   666,     0,   248,   249,     0,     0,   250,   251,
       0,   252,     0,     0,   667,   253,   254,  2467,     0,     0,
     255,     0,   256,   257,     0,   258,   259,     0,     0,     0,
     260,     0,     0,   261,   262,     0,     0,   263,     0,   669,
     264,   265,     0,     0,     0,     0,     0,   670,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,   671,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
     672,   288,   289,   290,   291,   673,   292,   293,   294,     0,
       0,     0,   295,   296,   297,   674,   299,     0,     0,   675,
     301,   676,   302,     0,   303,   677,   678,   679,   680,   681,
     308,   309,   310,   311,     0,   682,   312,   313,     0,     0,
     314,   315,   316,   317,   683,   684,   685,   318,   319,     0,
     686,   687,     0,   320,   321,   688,     0,   323,   324,   325,
       0,   326,     0,     0,     0,     0,     0,     0,   689,     0,
       0,     0,   328,   329,   330,   690,   331,   332,   333,   334,
     335,   691,   337,   338,   339,   692,   693,   342,   694,     0,
     343,   344,   345,     0,   346,     0,   347,   348,   349,   350,
       0,   695,   352,   353,     0,     0,   354,     0,     0,     0,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,   364,     0,   365,   366,   367,   696,   697,   368,
       0,   369,   370,   371,     0,   372,   373,     0,     0,   698,
     374,   375,   376,   377,   378,   379,   699,   381,   382,   383,
       0,   700,   385,     0,     0,     0,   386,   387,   388,   389,
       0,     0,     0,   390,     0,     0,     0,   391,   392,   393,
     394,     0,   395,   396,   397,   398,   399,     0,     0,     0,
       0,     0,     0,   400,   401,     0,   402,     0,     0,   403,
       0,     0,   404,   405,     0,     0,   406,   701,   702,   407,
     408,     0,   409,   703,   411,   412,   413,   704,   705,   414,
     415,   416,   417,   706,   418,   419,     0,   420,     0,   421,
     422,   423,     0,   707,   424,   425,     0,   708,   709,   710,
     711,     0,     0,     0,     0,     0,   430,   431,     0,   712,
     713,   714,   433,   434,   435,   715,   436,   437,   716,   438,
     439,     0,   440,   441,     0,     0,   442,     0,   717,     0,
     444,     0,   445,     0,   718,   447,   448,     0,     0,   719,
     720,   721,   722,   449,     0,     0,   450,   723,     0,   724,
     451,   452,   453,   725,     0,     0,     0,     0,   455,   456,
       0,   457,   458,     0,     0,   726,     0,     0,     0,   727,
     728,     0,     0,     0,     0,   729,   730,     0,     0,   731,
     732,     0,     0,   733,   734,   138,     0,   629,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     630,     0,   146,   147,   148,   149,   150,   631,   152,     0,
     153,     0,     0,   632,   154,   155,   633,   634,   635,   156,
     636,     0,   157,   158,   159,     0,   160,     0,   161,   162,
       0,     0,   163,   637,   638,   164,     0,   165,   639,   640,
     167,     0,   168,   169,   170,   641,   172,     0,   642,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,   182,
       0,   183,     0,   643,   185,     0,   186,   644,   645,   187,
       0,     0,   188,   646,   647,     0,   648,   649,     0,   189,
     190,   191,   650,   651,   652,     0,     0,     0,     0,   653,
     194,   654,     0,     0,   655,   195,     0,   196,     0,     0,
       0,   197,     0,   198,   199,   200,   201,     0,     0,     0,
     202,     0,     0,   203,   204,   205,     0,     0,     0,   206,
       0,   207,   208,     0,   209,   210,   211,     0,     0,   212,
       0,   213,   214,   215,   216,   217,   656,     0,   218,   219,
     220,   657,   221,   658,   222,   223,     0,   224,   225,   226,
     659,     0,   227,     0,     0,     0,   228,   229,     0,   230,
       0,   231,     0,   660,   233,   661,   235,   236,     0,   237,
       0,   662,     0,   238,   663,     0,   240,   664,     0,   241,
     242,     0,     0,     0,   665,   244,   245,   246,   247,   666,
       0,   248,   249,     0,     0,   250,   251,     0,   252,     0,
       0,   667,   253,   254,  2515,     0,     0,   255,     0,   256,
     257,     0,   258,   259,     0,     0,     0,   260,     0,     0,
     261,   262,     0,     0,   263,     0,   669,   264,   265,     0,
       0,     0,     0,     0,   670,   267,     0,   268,     0,   269,
       0,   270,   271,     0,     0,   671,     0,     0,     0,     0,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,     0,   286,   287,   672,   288,   289,
     290,   291,   673,   292,   293,   294,     0,     0,     0,   295,
     296,   297,   674,   299,     0,     0,   675,   301,   676,   302,
       0,   303,   677,   678,   679,   680,   681,   308,   309,   310,
     311,     0,   682,   312,   313,     0,     0,   314,   315,   316,
     317,   683,   684,   685,   318,   319,     0,   686,   687,     0,
     320,   321,   688,     0,   323,   324,   325,     0,   326,     0,
       0,     0,     0,     0,     0,   689,     0,     0,     0,   328,
     329,   330,   690,   331,   332,   333,   334,   335,   691,   337,
     338,   339,   692,   693,   342,   694,     0,   343,   344,   345,
       0,   346,     0,   347,   348,   349,   350,     0,   695,   352,
     353,     0,     0,   354,     0,     0,     0,   355,   356,   357,
     358,   359,     0,     0,   360,   361,   362,     0,   363,   364,
       0,   365,   366,   367,   696,   697,   368,     0,   369,   370,
     371,     0,   372,   373,     0,     0,   698,   374,   375,   376,
     377,   378,   379,   699,   381,   382,   383,     0,   700,   385,
       0,     0,     0,   386,   387,   388,   389,     0,     0,     0,
     390,     0,     0,     0,   391,   392,   393,   394,     0,   395,
     396,   397,   398,   399,     0,     0,     0,     0,     0,     0,
     400,   401,     0,   402,     0,     0,   403,     0,     0,   404,
     405,     0,     0,   406,   701,   702,   407,   408,     0,   409,
     703,   411,   412,   413,   704,   705,   414,   415,   416,   417,
     706,   418,   419,     0,   420,     0,   421,   422,   423,     0,
     707,   424,   425,     0,   708,   709,   710,   711,     0,     0,
       0,     0,     0,   430,   431,     0,   712,   713,   714,   433,
     434,   435,   715,   436,   437,   716,   438,   439,     0,   440,
     441,     0,     0,   442,     0,   717,     0,   444,     0,   445,
       0,   718,   447,   448,     0,     0,   719,   720,   721,   722,
     449,     0,     0,   450,   723,     0,   724,   451,   452,   453,
     725,     0,     0,     0,     0,   455,   456,     0,   457,   458,
       0,     0,   726,     0,     0,     0,   727,   728,     0,     0,
       0,     0,   729,   730,     0,     0,   731,   732,     0,     0,
     733,   734,   138,     0,   629,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   630,     0,   146,
     147,   148,   149,   150,   631,   152,     0,   153,     0,     0,
     632,   154,   155,   633,   634,   635,   156,   636,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
     637,   638,   164,     0,   165,   639,   640,   167,     0,   168,
     169,   170,   641,   172,     0,   642,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,   182,     0,   183,     0,
     643,   185,     0,   186,   644,   645,   187,     0,     0,   188,
     646,   647,     0,   648,   649,     0,   189,   190,   191,   650,
     651,   652,     0,     0,     0,     0,   653,   194,   654,     0,
       0,  3193,   195,     0,   196,     0,     0,     0,   197,     0,
     198,   199,   200,   201,     0,     0,     0,   202,     0,     0,
     203,   204,   205,     0,     0,     0,   206,     0,   207,   208,
       0,   209,   210,   211,     0,     0,   212,     0,   213,   214,
     215,   216,   217,   656,     0,   218,   219,   220,   657,   221,
     658,   222,   223,     0,   224,   225,   226,   659,     0,   227,
       0,     0,     0,   228,   229,     0,   230,     0,   231,     0,
     660,   233,   661,   235,   236,     0,   237,     0,   662,     0,
     238,   663,     0,   240,   664,     0,   241,   242,     0,     0,
       0,   665,   244,   245,   246,   247,   666,     0,   248,   249,
       0,     0,   250,   251,     0,   252,     0,     0,   667,   253,
     254,   668,     0,     0,   255,     0,   256,   257,     0,   258,
     259,     0,     0,     0,   260,     0,     0,   261,   262,     0,
       0,   263,     0,   669,   264,   265,     0,     0,     0,     0,
       0,   670,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,   671,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,   672,   288,   289,   290,   291,   673,
     292,   293,   294,     0,     0,     0,   295,   296,   297,   674,
     299,     0,     0,   675,   301,   676,   302,     0,   303,   677,
     678,   679,   680,   681,   308,   309,   310,   311,     0,   682,
     312,   313,     0,     0,   314,   315,   316,   317,   683,   684,
     685,   318,   319,     0,   686,   687,     0,   320,   321,   688,
       0,   323,   324,   325,     0,   326,     0,     0,     0,     0,
       0,     0,   689,     0,     0,     0,   328,   329,   330,   690,
     331,   332,   333,   334,   335,   691,   337,   338,   339,   692,
     693,   342,   694,     0,   343,   344,   345,     0,   346,     0,
     347,   348,   349,   350,     0,   695,   352,   353,     0,     0,
     354,     0,     0,     0,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,   364,     0,   365,   366,
     367,   696,   697,   368,     0,   369,   370,   371,     0,   372,
     373,     0,     0,   698,   374,   375,   376,   377,   378,   379,
     699,   381,   382,   383,     0,   700,   385,     0,     0,     0,
     386,   387,   388,   389,     0,     0,     0,   390,     0,     0,
       0,   391,   392,   393,   394,     0,   395,   396,   397,   398,
     399,     0,     0,     0,     0,     0,     0,   400,   401,     0,
     402,     0,     0,   403,     0,     0,   404,   405,     0,     0,
     406,   701,   702,   407,   408,     0,   409,   703,   411,   412,
     413,   704,   705,   414,   415,   416,   417,   706,   418,   419,
       0,   420,     0,   421,   422,   423,     0,   707,   424,   425,
       0,   708,   709,   710,   711,     0,     0,     0,     0,     0,
     430,   431,     0,   712,   713,   714,   433,   434,   435,   715,
     436,   437,   716,   438,   439,     0,   440,   441,     0,     0,
     442,     0,   717,     0,   444,     0,   445,     0,   718,   447,
     448,     0,     0,   719,   720,   721,   722,   449,     0,     0,
     450,   723,     0,   724,   451,   452,   453,   725,     0,     0,
       0,     0,   455,   456,     0,   457,   458,     0,     0,   726,
       0,     0,     0,   727,   728,     0,     0,     0,     0,   729,
     730,     0,     0,   731,   732,     0,     0,   733,   734,   138,
       0,   629,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   630,     0,   146,   147,   148,   149,
     150,   631,   152,     0,   153,     0,     0,   632,   154,   155,
     633,   634,   635,   156,   636,     0,   157,   158,   159,     0,
     160,     0,   161,   162,     0,     0,   163,   637,   638,   164,
       0,   165,   639,   640,   167,     0,   168,   169,   170,   641,
     172,     0,   642,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,     0,   183,     0,   643,   185,     0,
     186,   644,   645,   187,     0,     0,   188,   646,   647,     0,
     648,   649,     0,   189,   190,   191,   650,   651,   652,     0,
       0,     0,     0,   653,   194,   654,     0,     0,   655,   195,
       0,   196,     0,     0,     0,   197,     0,   198,   199,   200,
     201,     0,     0,     0,   202,     0,     0,   203,   204,   205,
       0,     0,     0,   206,     0,   207,   208,     0,   209,   210,
     211,     0,     0,   212,     0,   213,   214,   215,   216,   217,
     656,     0,   218,   219,   220,   657,   221,   658,   222,   223,
       0,   224,   225,   226,   659,     0,   227,     0,     0,     0,
     228,   229,     0,   230,     0,   231,     0,   660,   233,   661,
     235,   236,     0,   237,     0,   662,     0,   238,   663,     0,
     240,   664,     0,   241,   242,     0,     0,     0,   665,   244,
     245,   246,   247,   666,     0,   248,   249,     0,     0,   250,
     251,     0,   252,     0,     0,   667,   253,   254,   668,     0,
       0,   255,     0,   256,   257,     0,   258,   259,     0,     0,
       0,   260,     0,     0,   261,   262,     0,     0,   263,     0,
     669,   264,   265,     0,     0,     0,     0,     0,   670,   267,
       0,   268,     0,   269,     0,   270,   271,     0,     0,   671,
       0,     0,     0,     0,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,   286,
     287,   672,   288,   289,   290,   291,   673,   292,   293,   294,
       0,     0,     0,   295,   296,   297,   674,   299,     0,     0,
     675,   301,   676,   302,     0,   303,   677,   678,   679,   680,
     681,   308,   309,   310,   311,     0,   682,   312,   313,     0,
       0,   314,   315,   316,   317,   683,     0,   685,   318,   319,
       0,   686,   687,     0,   320,   321,   688,     0,   323,   324,
     325,     0,   326,     0,     0,     0,     0,     0,     0,   689,
       0,     0,     0,   328,   329,   330,   690,   331,   332,   333,
     334,   335,   691,   337,   338,   339,   692,   693,   342,   694,
       0,   343,   344,   345,     0,   346,     0,   347,   348,   349,
     350,     0,   695,   352,   353,     0,     0,   354,     0,     0,
       0,   355,   356,   357,   358,   359,     0,     0,   360,   361,
     362,     0,   363,   364,     0,   365,   366,   367,   696,   697,
     368,     0,   369,   370,   371,     0,   372,   373,     0,     0,
     698,   374,   375,   376,   377,   378,   379,   699,   381,   382,
     383,     0,   700,   385,     0,     0,     0,   386,   387,   388,
     389,     0,     0,     0,   390,     0,     0,     0,   391,   392,
     393,   394,     0,   395,   396,   397,   398,   399,     0,     0,
       0,     0,     0,     0,   400,   401,     0,   402,     0,     0,
     403,     0,     0,   404,   405,     0,     0,   406,   701,   702,
     407,   408,     0,   409,   703,   411,   412,   413,   704,   705,
     414,   415,   416,   417,   706,   418,   419,     0,   420,     0,
     421,   422,   423,     0,   707,   424,   425,     0,   708,   709,
     710,   711,     0,     0,     0,     0,     0,   430,   431,     0,
     712,   713,   714,   433,   434,   435,   715,   436,   437,   716,
     438,   439,     0,   440,   441,     0,     0,   442,     0,   717,
       0,   444,     0,   445,     0,   718,   447,   448,     0,     0,
     719,   720,   721,   722,   449,     0,     0,   450,   723,     0,
     724,   451,   452,   453,   725,     0,     0,     0,     0,   455,
     456,     0,   457,   458,     0,     0,   726,     0,     0,     0,
     727,   728,     0,     0,     0,     0,   729,   730,     0,     0,
     731,   732,     0,     0,   733,   734,   138,     0,   629,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   630,     0,   146,   147,   148,   149,   150,   631,   152,
       0,   153,     0,     0,   632,   154,   155,   633,   634,   635,
     156,   636,     0,   157,   158,   159,     0,   160,     0,   161,
     162,     0,     0,   163,   637,   638,   164,     0,   165,   639,
     640,   167,     0,   168,   169,   170,   641,   172,     0,   642,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,     0,   183,     0,   643,   185,     0,   186,   644,   645,
     187,     0,     0,   188,   646,   647,     0,   648,   649,     0,
     189,   190,   191,   650,   651,   652,     0,     0,     0,     0,
     653,   194,   654,     0,     0,   655,   195,     0,   196,     0,
       0,     0,   197,     0,   198,   199,   200,   201,     0,     0,
       0,   202,     0,     0,   203,   204,   205,     0,     0,     0,
     206,     0,   207,   208,     0,   209,   210,   211,     0,     0,
     212,     0,   213,   214,   215,   216,   217,   656,     0,   218,
     219,   220,   657,   221,   658,   222,   223,     0,   224,   225,
     226,   659,     0,   227,     0,     0,     0,   228,   229,     0,
     230,     0,   231,     0,   660,   233,   661,   235,   236,     0,
     237,     0,   662,     0,   238,   663,     0,   240,   664,     0,
     241,   242,     0,     0,     0,   665,   244,   245,   246,   247,
     666,     0,   248,   249,     0,     0,   250,   251,     0,   252,
       0,     0,   667,   253,   254,  1629,     0,     0,   255,     0,
     256,   257,     0,   258,   259,     0,     0,     0,   260,     0,
       0,   261,   262,     0,     0,   263,     0,   669,   264,   265,
       0,     0,     0,     0,     0,   670,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,   671,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,   672,   288,
     289,   290,   291,   673,   292,   293,   294,     0,     0,     0,
     295,   296,   297,   674,   299,     0,     0,   675,   301,   676,
     302,     0,   303,   677,   678,   679,   680,   681,   308,   309,
     310,   311,     0,   682,   312,   313,     0,     0,   314,   315,
     316,   317,   683,     0,   685,   318,   319,     0,   686,   687,
       0,   320,   321,   688,     0,   323,   324,   325,     0,   326,
       0,     0,     0,     0,     0,     0,   689,     0,     0,     0,
     328,   329,   330,   690,   331,   332,   333,   334,   335,   691,
     337,   338,   339,   692,   693,   342,   694,     0,   343,   344,
     345,     0,   346,     0,   347,   348,   349,   350,     0,   695,
     352,   353,     0,     0,   354,     0,     0,     0,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
     364,     0,   365,   366,   367,   696,   697,   368,     0,   369,
     370,   371,     0,   372,   373,     0,     0,   698,   374,   375,
     376,   377,   378,   379,   699,   381,   382,   383,     0,   700,
     385,     0,     0,     0,   386,   387,   388,   389,     0,     0,
       0,   390,     0,     0,     0,   391,   392,   393,   394,     0,
     395,   396,   397,   398,   399,     0,     0,     0,     0,     0,
       0,   400,   401,     0,   402,     0,     0,   403,     0,     0,
     404,   405,     0,     0,   406,   701,   702,   407,   408,     0,
     409,   703,   411,   412,   413,   704,   705,   414,   415,   416,
     417,   706,   418,   419,     0,   420,     0,   421,   422,   423,
       0,   707,   424,   425,     0,   708,   709,   710,   711,     0,
       0,     0,     0,     0,   430,   431,     0,   712,   713,   714,
     433,   434,   435,   715,   436,   437,   716,   438,   439,     0,
     440,   441,     0,     0,   442,     0,   717,     0,   444,     0,
     445,     0,   718,   447,   448,     0,     0,   719,   720,   721,
     722,   449,     0,     0,   450,   723,     0,   724,   451,   452,
     453,   725,     0,     0,     0,     0,   455,   456,     0,   457,
     458,     0,     0,   726,     0,     0,     0,   727,   728,     0,
       0,     0,     0,   729,   730,     0,     0,   731,   732,     0,
       0,   733,   734,   138,     0,   629,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   630,     0,
     146,   147,   148,   149,   150,   631,   152,     0,   153,     0,
       0,   632,   154,   155,   633,   634,   635,   156,   636,     0,
     157,   158,   159,     0,   160,     0,   161,   162,     0,     0,
     163,   637,   638,   164,     0,   165,   639,   640,   167,     0,
     168,   169,   170,   641,   172,     0,   642,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,     0,   183,
       0,   643,   185,     0,   186,   644,   645,   187,     0,     0,
     188,   646,   647,     0,   648,   649,     0,   189,   190,   191,
     650,   651,   652,     0,     0,     0,     0,   653,   194,   654,
       0,     0,   655,   195,     0,   196,     0,     0,     0,   197,
       0,   198,   199,   200,   201,     0,     0,     0,   202,     0,
       0,   203,   204,   205,     0,     0,     0,   206,     0,   207,
     208,     0,   209,   210,   211,     0,     0,   212,     0,   213,
     214,   215,   216,   217,   656,     0,   218,   219,   220,   657,
     221,   658,   222,   223,     0,   224,   225,   226,   659,     0,
     227,     0,     0,     0,   228,   229,     0,   230,     0,   231,
       0,   660,   233,   661,   235,   236,     0,   237,     0,   662,
       0,   238,   663,     0,   240,   664,     0,   241,   242,     0,
       0,     0,   665,   244,   245,   246,   247,   666,     0,   248,
     249,     0,     0,   250,   251,     0,   252,     0,     0,   667,
     253,   254,  1631,     0,     0,   255,     0,   256,   257,     0,
     258,   259,     0,     0,     0,   260,     0,     0,   261,   262,
       0,     0,   263,     0,   669,   264,   265,     0,     0,     0,
       0,     0,   670,   267,     0,   268,     0,   269,     0,   270,
     271,     0,     0,   671,     0,     0,     0,     0,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,   287,   672,   288,   289,   290,   291,
     673,   292,   293,   294,     0,     0,     0,   295,   296,   297,
     674,   299,     0,     0,   675,   301,   676,   302,     0,   303,
     677,   678,   679,   680,   681,   308,   309,   310,   311,     0,
     682,   312,   313,     0,     0,   314,   315,   316,   317,   683,
       0,   685,   318,   319,     0,   686,   687,     0,   320,   321,
     688,     0,   323,   324,   325,     0,   326,     0,     0,     0,
       0,     0,     0,   689,     0,     0,     0,   328,   329,   330,
     690,   331,   332,   333,   334,   335,   691,   337,   338,   339,
     692,   693,   342,   694,     0,   343,   344,   345,     0,   346,
       0,   347,   348,   349,   350,     0,   695,   352,   353,     0,
       0,   354,     0,     0,     0,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,   364,     0,   365,
     366,   367,   696,   697,   368,     0,   369,   370,   371,     0,
     372,   373,     0,     0,   698,   374,   375,   376,   377,   378,
     379,   699,   381,   382,   383,     0,   700,   385,     0,     0,
       0,   386,   387,   388,   389,     0,     0,     0,   390,     0,
       0,     0,   391,   392,   393,   394,     0,   395,   396,   397,
     398,   399,     0,     0,     0,     0,     0,     0,   400,   401,
       0,   402,     0,     0,   403,     0,     0,   404,   405,     0,
       0,   406,   701,   702,   407,   408,     0,   409,   703,   411,
     412,   413,   704,   705,   414,   415,   416,   417,   706,   418,
     419,     0,   420,     0,   421,   422,   423,     0,   707,   424,
     425,     0,   708,   709,   710,   711,     0,     0,     0,     0,
       0,   430,   431,     0,   712,   713,   714,   433,   434,   435,
     715,   436,   437,   716,   438,   439,     0,   440,   441,     0,
       0,   442,     0,   717,     0,   444,     0,   445,     0,   718,
     447,   448,     0,     0,   719,   720,   721,   722,   449,     0,
       0,   450,   723,     0,   724,   451,   452,   453,   725,     0,
       0,     0,     0,   455,   456,     0,   457,   458,     0,     0,
     726,     0,     0,     0,   727,   728,     0,     0,     0,     0,
     729,   730,     0,     0,   731,   732,     0,     0,   733,   734,
     138,     0,   629,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   630,     0,   146,   147,   148,
     149,   150,   631,   152,     0,   153,     0,     0,   632,   154,
     155,   633,   634,   635,   156,   636,     0,   157,   158,   159,
       0,   160,     0,   161,   162,     0,     0,   163,   637,   638,
     164,     0,   165,   639,   640,   167,     0,   168,   169,   170,
     641,   172,     0,   642,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,     0,   183,     0,   643,   185,
       0,   186,   644,   645,   187,     0,     0,   188,   646,   647,
       0,   648,   649,     0,   189,   190,   191,   650,   651,   652,
       0,     0,     0,     0,   653,   194,   654,     0,     0,   655,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,     0,     0,     0,   202,     0,     0,   203,   204,
     205,     0,     0,     0,   206,     0,   207,   208,     0,   209,
     210,   211,     0,     0,   212,     0,   213,   214,   215,   216,
     217,   656,     0,   218,   219,   220,   657,   221,   658,   222,
     223,     0,   224,   225,   226,   659,     0,   227,     0,     0,
       0,   228,   229,     0,   230,     0,   231,     0,   660,   233,
     661,   235,   236,     0,   237,     0,   662,     0,   238,   663,
       0,   240,   664,     0,   241,   242,     0,     0,     0,   665,
     244,   245,   246,   247,   666,     0,   248,   249,     0,     0,
     250,   251,     0,   252,     0,     0,   667,   253,   254,   668,
       0,     0,   255,     0,   256,   257,     0,   258,   259,     0,
       0,     0,   260,     0,     0,   261,   262,     0,     0,   263,
       0,   669,   264,   265,     0,     0,     0,     0,     0,   670,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
     671,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,   672,   288,   289,   290,   291,   673,   292,   293,
    3978,     0,     0,     0,   295,   296,   297,   674,   299,     0,
       0,   675,   301,   676,   302,     0,   303,   677,   678,   679,
     680,   681,   308,   309,   310,   311,     0,   682,   312,   313,
       0,     0,   314,   315,   316,   317,   683,     0,   685,   318,
     319,     0,   686,   687,     0,   320,   321,   688,     0,   323,
     324,   325,     0,   326,     0,     0,     0,     0,     0,     0,
     689,     0,     0,     0,   328,   329,   330,   690,   331,   332,
     333,   334,   335,   691,   337,   338,   339,   692,   693,   342,
     694,     0,   343,   344,   345,     0,   346,     0,   347,   348,
     349,   350,     0,   695,   352,   353,     0,     0,   354,     0,
       0,     0,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,   364,     0,   365,   366,   367,   696,
     697,   368,     0,   369,   370,   371,     0,   372,   373,     0,
       0,   698,   374,   375,   376,   377,   378,   379,   699,   381,
     382,   383,     0,   700,   385,     0,     0,     0,   386,   387,
     388,   389,     0,     0,     0,   390,     0,     0,     0,   391,
     392,   393,   394,     0,   395,   396,   397,   398,   399,     0,
       0,     0,     0,     0,     0,   400,   401,     0,   402,     0,
       0,   403,     0,     0,   404,   405,     0,     0,   406,   701,
     702,   407,   408,     0,   409,   703,   411,   412,   413,   704,
     705,   414,   415,   416,   417,   706,   418,   419,     0,   420,
       0,   421,   422,   423,     0,   707,   424,   425,     0,   708,
     709,   710,   711,     0,     0,     0,     0,     0,   430,   431,
       0,   712,   713,   714,   433,   434,   435,   715,   436,   437,
     716,   438,   439,     0,   440,   441,     0,     0,   442,     0,
     717,     0,   444,     0,   445,     0,   718,   447,   448,     0,
       0,   719,   720,   721,   722,   449,     0,     0,   450,   723,
       0,   724,   451,   452,   453,   725,     0,     0,     0,     0,
     455,   456,     0,   457,   458,     0,     0,   726,     0,     0,
       0,   727,   728,     0,     0,     0,     0,   729,   730,     0,
       0,   731,   732,     0,     0,   733,   734,   138,     0,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,   155,     0,     0,
       0,   156,     0,     0,   157,   158,   159,     0,   160,     0,
     161,   162,     0,     0,   163,     0,     0,   164,     0,   165,
     166,     0,   167,     0,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,     0,   183,  2316,   184,   185,     0,   186,     0,
       0,   187,     0,     0,   188,     0,     0,     0,     0,     0,
       0,   189,   190,   191,     0,     0,   192,     0,     0,     0,
       0,   193,   194,     0,     0,     0,     0,   195,     0,   196,
       0,     0,     0,   197,     0,   198,   199,   200,   201,     0,
       0,     0,   202,     0,     0,   203,   204,   205,     0,     0,
       0,   206,     0,   207,   208,     0,   209,   210,   211,     0,
       0,   212,     0,   213,   214,   215,   216,   217,     0,     0,
     218,   219,   220,     0,   221,     0,   222,   223,     0,   224,
     225,   226,     0,     0,   227,     0,     0,     0,   228,   229,
       0,   230,   471,   231,     0,   232,   233,   234,   235,   236,
       0,   237,     0,     0,     0,   238,   239,     0,   240,     0,
       0,   241,   242,     0,     0,     0,   243,   244,   245,   246,
     247,     0,     0,   248,   249,  1400,     0,   250,   251,     0,
     252,     0,     0,     0,   253,   254,     0,     0,     0,   255,
       0,   256,   257,     0,   258,   259,     0,     0,     0,   260,
    1401,     0,   261,   262,     0,     0,   263,     0,     0,   264,
     265,     0,  2821,     0,     0,     0,   266,   267,     0,   268,
       0,   269,     0,   270,   271,     0,     0,     0,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,     0,   286,   287,     0,
     288,   289,   290,   291,     0,   292,   293,   294,     0,     0,
       0,   295,   296,   297,   298,   299,     0,     0,   300,   301,
       0,   302,     0,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,     0,     0,   312,   313,     0,     0,   314,
     315,   316,   317,     0,     0,     0,   318,   319,     0,     0,
       0,     0,   320,   321,   322,     0,   323,   324,   325,     0,
     326,     0,     0,     0,     0,     0,     0,   327,     0,     0,
       0,   328,   329,   330,     0,   331,   332,   333,   334,  2822,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,   345,     0,   346,     0,   347,   348,   349,   350,     0,
     351,   352,   353,     0,     0,   354,     0,     0,     0,   355,
     356,   357,   358,   359,     0,     0,   360,   361,   362,     0,
     363,   364,     0,   365,   366,   367,     0,     0,   368,     0,
     369,   370,   371,     0,   372,   373,     0,     0,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,  -404,     0,     0,   386,   387,   388,   389,     0,
       0,     0,   390,     0,     0,     0,   391,   392,   393,   394,
       0,   395,   396,   397,   398,   399,   475,     0,     0,     0,
       0,     0,   400,   401,     0,   402,     0,     0,   403,     0,
       0,   404,   405,     0,     0,   406,     0,     0,   407,   408,
       0,   409,   410,   411,   412,   413,     0,     0,   414,   415,
     416,   417,     0,   418,   419,     0,   420,     0,   421,   422,
     423,     0,     0,   424,   425,     0,   426,   427,   428,   429,
       0,     0,     0,     0,     0,   430,   431,     0,     0,     0,
     432,   433,   434,   435,     0,   436,   437,     0,   438,   439,
       0,   440,   441,     0,     0,   442,     0,   443,     0,   444,
       0,   445,     0,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,     0,     0,   450,     0,     0,     0,   451,
     452,   453,   454,     0,     0,     0,     0,   455,   456,     0,
     457,   458,     0,     0,   459,     0,     0,   138,     0,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   145,  2381,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,   155,     0,     0,
       0,   156,     0,     0,   157,   158,   159,     0,   160,     0,
     161,   162,     0,     0,   163,     0,     0,   164,     0,   165,
     166,     0,   167,     0,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,     0,   183,  2316,   184,   185,     0,   186,     0,
       0,   187,     0,     0,   188,     0,     0,     0,     0,     0,
       0,   189,   190,   191,     0,     0,   192,     0,     0,     0,
       0,   193,   194,     0,     0,     0,     0,   195,     0,   196,
       0,     0,     0,   197,     0,   198,   199,   200,   201,     0,
       0,     0,   202,     0,     0,   203,   204,   205,     0,     0,
       0,   206,     0,   207,   208,     0,   209,   210,   211,     0,
       0,   212,     0,   213,   214,   215,   216,   217,     0,     0,
     218,   219,   220,     0,   221,     0,   222,   223,     0,   224,
     225,   226,     0,     0,   227,     0,     0,     0,   228,   229,
       0,   230,   471,   231,     0,   232,   233,   234,   235,   236,
       0,   237,     0,     0,     0,   238,   239,     0,   240,     0,
       0,   241,   242,     0,     0,     0,   243,   244,   245,   246,
     247,     0,     0,   248,   249,  1400,     0,   250,   251,     0,
     252,     0,     0,     0,   253,   254,     0,     0,     0,   255,
       0,   256,   257,     0,   258,   259,     0,     0,     0,   260,
    1401,     0,   261,   262,     0,     0,   263,     0,     0,   264,
     265,     0,     0,     0,     0,     0,   266,   267,     0,   268,
       0,   269,     0,   270,   271,     0,     0,     0,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,     0,   286,   287,     0,
     288,   289,   290,   291,     0,   292,   293,   294,     0,     0,
       0,   295,   296,   297,   298,   299,     0,     0,   300,   301,
       0,   302,     0,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,     0,     0,   312,   313,     0,     0,   314,
     315,   316,   317,     0,     0,     0,   318,   319,     0,     0,
       0,     0,   320,   321,   322,     0,   323,   324,   325,     0,
     326,     0,     0,     0,     0,     0,     0,   327,     0,     0,
       0,   328,   329,   330,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,   345,     0,   346,     0,   347,   348,   349,   350,     0,
     351,   352,   353,     0,     0,   354,     0,     0,     0,   355,
     356,   357,   358,   359,     0,     0,   360,   361,   362,     0,
     363,   364,     0,   365,   366,   367,     0,     0,   368,     0,
     369,   370,   371,     0,   372,   373,     0,     0,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,     0,     0,   386,   387,   388,   389,     0,
       0,     0,   390,     0,     0,     0,   391,   392,   393,   394,
       0,   395,   396,   397,   398,   399,   475,     0,     0,     0,
       0,     0,   400,   401,     0,   402,     0,     0,   403,     0,
       0,   404,   405,     0,     0,   406,     0,     0,   407,   408,
       0,   409,   410,   411,   412,   413,     0,     0,   414,   415,
     416,   417,     0,   418,   419,     0,   420,     0,   421,   422,
     423,     0,     0,   424,   425,     0,   426,   427,   428,   429,
       0,     0,     0,     0,     0,   430,   431,     0,     0,     0,
     432,   433,   434,   435,     0,   436,   437,     0,   438,   439,
       0,   440,   441,     0,     0,   442,     0,   443,     0,   444,
       0,   445,     0,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,     0,     0,   450,     0,     0,     0,   451,
     452,   453,   454,     0,     0,     0,     0,   455,   456,     0,
     457,   458,     0,     0,   459,     0,     0,   138,     0,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   145,  2381,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,   155,     0,     0,
       0,   156,     0,     0,   157,   158,   159,     0,   160,     0,
     161,   162,     0,     0,   163,     0,     0,   164,     0,   165,
     166,     0,   167,     0,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,     0,   183,     0,   184,   185,     0,   186,     0,
       0,   187,     0,     0,   188,     0,     0,     0,     0,     0,
       0,   189,   190,   191,     0,     0,   192,     0,     0,     0,
       0,   193,   194,     0,     0,     0,     0,   195,     0,   196,
       0,     0,     0,   197,     0,   198,   199,   200,   201,     0,
       0,     0,   202,     0,     0,   203,   204,   205,     0,     0,
       0,   206,     0,   207,   208,     0,   209,   210,   211,     0,
       0,   212,     0,   213,   214,   215,   216,   217,     0,     0,
     218,   219,   220,     0,   221,     0,   222,   223,     0,   224,
     225,   226,     0,     0,   227,     0,     0,     0,   228,   229,
       0,   230,     0,   231,     0,   232,   233,   234,   235,   236,
       0,   237,     0,     0,     0,   238,   239,     0,   240,     0,
       0,   241,   242,     0,     0,     0,   243,   244,   245,   246,
     247,     0,     0,   248,   249,     0,     0,   250,   251,     0,
     252,     0,     0,     0,   253,   254,     0,     0,     0,   255,
       0,   256,   257,     0,   258,   259,     0,     0,     0,   260,
       0,     0,   261,   262,     0,     0,   263,     0,     0,   264,
     265,     0,     0,     0,     0,     0,   266,   267,     0,   268,
       0,   269,     0,   270,   271,     0,     0,     0,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,     0,   286,   287,     0,
     288,   289,   290,   291,     0,   292,   293,   294,     0,     0,
       0,   295,   296,   297,   298,   299,     0,     0,   300,   301,
       0,   302,     0,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,     0,     0,   312,   313,     0,     0,   314,
     315,   316,   317,     0,     0,     0,   318,   319,     0,     0,
       0,     0,   320,   321,   322,     0,   323,   324,   325,     0,
     326,     0,     0,     0,     0,     0,     0,   327,     0,     0,
       0,   328,   329,   330,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,   345,     0,   346,     0,   347,   348,   349,   350,     0,
     351,   352,   353,     0,     0,   354,     0,     0,     0,   355,
     356,   357,   358,   359,     0,     0,   360,   361,   362,     0,
     363,   364,     0,   365,   366,   367,     0,     0,   368,     0,
     369,   370,   371,     0,   372,   373,     0,     0,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,  2194,     0,     0,   386,   387,   388,   389,     0,
       0,     0,   390,     0,     0,     0,   391,   392,   393,   394,
       0,   395,   396,   397,   398,   399,     0,     0,     0,     0,
       0,     0,   400,   401,     0,   402,     0,     0,   403,     0,
       0,   404,   405,     0,     0,   406,     0,     0,   407,   408,
       0,   409,   410,   411,   412,   413,     0,     0,   414,   415,
     416,   417,     0,   418,   419,     0,   420,     0,   421,   422,
     423,     0,     0,   424,   425,     0,   426,   427,   428,   429,
       0,     0,     0,     0,     0,   430,   431,     0,     0,     0,
     432,   433,   434,   435,     0,   436,   437,     0,   438,   439,
       0,   440,   441,     0,     0,   442,     0,   443,     0,   444,
       0,   445,     0,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,     0,     0,   450,     0,     0,     0,   451,
     452,   453,   454,     0,     0,     0,     0,   455,   456,     0,
     457,   458,     0,     0,   459,     0,     0,   138,     0,   139,
     140,   141,   142,   143,     0,     0,  2599,     0,     0,   144,
       0,     0,   145,   734,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,   155,     0,     0,
       0,   156,     0,     0,   157,   158,   159,     0,   160,     0,
     161,   162,     0,     0,   163,     0,     0,   164,     0,   165,
     166,     0,   167,     0,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,     0,   183,     0,   184,   185,     0,   186,     0,
       0,   187,     0,     0,   188,     0,     0,     0,     0,     0,
       0,   189,   190,   191,     0,     0,   192,     0,     0,     0,
       0,   193,   194,     0,     0,     0,     0,   195,     0,   196,
       0,     0,     0,   197,     0,   198,   199,   200,   201,     0,
       0,     0,   202,     0,     0,   203,   204,   205,     0,     0,
       0,   206,     0,   207,   208,     0,   209,   210,   211,     0,
       0,   212,     0,   213,   214,   215,   216,   217,     0,     0,
     218,   219,   220,     0,   221,     0,   222,   223,     0,   224,
     225,   226,     0,     0,   227,     0,     0,     0,   228,   229,
       0,   230,     0,   231,     0,   232,   233,   234,   235,   236,
       0,   237,     0,     0,     0,   238,   239,     0,   240,     0,
       0,   241,   242,     0,     0,     0,   243,   244,   245,   246,
     247,     0,     0,   248,   249,     0,     0,   250,   251,     0,
     252,     0,     0,     0,   253,   254,     0,     0,     0,   255,
       0,   256,   257,     0,   258,   259,     0,     0,     0,   260,
       0,     0,   261,   262,     0,     0,   263,     0,     0,   264,
     265,     0,     0,     0,     0,     0,   266,   267,     0,   268,
       0,   269,     0,   270,   271,     0,     0,     0,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,     0,   286,   287,     0,
     288,   289,   290,   291,     0,   292,   293,   294,     0,     0,
       0,   295,   296,   297,   298,   299,     0,     0,   300,   301,
       0,   302,     0,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,     0,     0,   312,   313,     0,     0,   314,
     315,   316,   317,     0,     0,     0,   318,   319,     0,     0,
       0,     0,   320,   321,   322,     0,   323,   324,   325,     0,
     326,     0,     0,     0,     0,     0,     0,   327,     0,     0,
       0,   328,   329,   330,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,   345,     0,   346,     0,   347,   348,   349,   350,     0,
     351,   352,   353,     0,     0,   354,     0,     0,     0,   355,
     356,   357,   358,   359,     0,     0,   360,   361,   362,     0,
     363,   364,     0,   365,   366,   367,     0,     0,   368,     0,
     369,   370,   371,     0,   372,   373,     0,     0,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,     0,
     384,   385,     0,     0,     0,   386,   387,   388,   389,     0,
       0,     0,   390,     0,     0,     0,   391,   392,   393,   394,
       0,   395,   396,   397,   398,   399,     0,     0,     0,     0,
       0,     0,   400,   401,     0,   402,     0,     0,   403,     0,
       0,   404,   405,     0,     0,   406,     0,     0,   407,   408,
       0,   409,   410,   411,   412,   413,     0,     0,   414,   415,
     416,   417,     0,   418,   419,     0,   420,     0,   421,   422,
     423,     0,     0,   424,   425,     0,   426,   427,   428,   429,
       0,     0,     0,     0,     0,   430,   431,     0,     0,     0,
     432,   433,   434,   435,     0,   436,   437,     0,   438,   439,
       0,   440,   441,     0,     0,   442,     0,   443,     0,   444,
       0,   445,     0,   446,   447,   448,     0,     0,     0,     0,
       0,     0,   449,     0,     0,   450,     0,     0,     0,   451,
     452,   453,   454,     0,     0,     0,     0,   455,   456,     0,
     457,   458,     0,     0,   459,     0,     0,     0,     0,   138,
       0,   139,   140,   141,   142,   143,  4122,     0,     0,     0,
       0,   144,  4123,   734,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,   155,
       0,     0,     0,   156,     0,     0,   157,   158,   159,     0,
     160,     0,   161,   162,     0,     0,   163,     0,     0,   164,
       0,   165,   166,     0,   167,     0,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,     0,   183,     0,   184,   185,     0,
     186,     0,     0,   187,     0,     0,   188,     0,     0,     0,
       0,     0,     0,   189,   190,   191,     0,     0,   192,     0,
       0,     0,     0,   193,   194,     0,     0,     0,     0,   195,
       0,   196,     0,     0,     0,   197,     0,   198,   199,   200,
     201,     0,     0,     0,   202,     0,     0,   203,   204,   205,
       0,     0,     0,   206,     0,   207,   208,     0,   209,   210,
     211,     0,     0,   212,     0,   213,   214,   215,   216,   217,
       0,     0,   218,   219,   220,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,     0,     0,     0,
     228,   229,     0,   230,     0,   231,     0,   232,   233,   234,
     235,   236,     0,   237,     0,     0,     0,   238,   239,     0,
     240,     0,     0,   241,   242,     0,     0,     0,   243,   244,
     245,   246,   247,     0,     0,   248,   249,     0,     0,   250,
     251,     0,   252,     0,     0,     0,   253,   254,     0,     0,
       0,   255,     0,   256,   257,     0,   258,   259,     0,     0,
       0,   260,     0,     0,   261,   262,     0,     0,   263,     0,
       0,   264,   265,     0,     0,     0,     0,     0,   266,   267,
       0,   268,     0,   269,     0,   270,   271,     0,     0,     0,
       0,     0,     0,     0,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,   286,
     287,     0,   288,   289,   290,   291,     0,   292,   293,   294,
       0,     0,     0,   295,   296,   297,   298,   299,     0,     0,
     300,   301,     0,   302,     0,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,     0,     0,   312,   313,     0,
       0,   314,   315,   316,   317,     0,     0,     0,   318,   319,
       0,     0,     0,     0,   320,   321,   322,     0,   323,   324,
     325,     0,   326,     0,     0,     0,     0,     0,     0,   327,
       0,     0,     0,   328,   329,   330,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,   345,     0,   346,     0,   347,   348,   349,
     350,     0,   351,   352,   353,     0,     0,   354,     0,     0,
       0,   355,   356,   357,   358,   359,     0,     0,   360,   361,
     362,     0,   363,   364,     0,   365,   366,   367,     0,     0,
     368,     0,   369,   370,   371,     0,   372,   373,     0,     0,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,     0,     0,   386,   387,   388,
     389,     0,     0,     0,   390,     0,     0,     0,   391,   392,
     393,   394,     0,   395,   396,   397,   398,   399,     0,     0,
       0,     0,     0,     0,   400,   401,     0,   402,     0,     0,
     403,     0,     0,   404,   405,     0,     0,   406,     0,     0,
     407,   408,     0,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,     0,   418,   419,     0,   420,     0,
     421,   422,   423,     0,     0,   424,   425,     0,   426,   427,
     428,   429,     0,     0,     0,     0,     0,   430,   431,     0,
       0,     0,   432,   433,   434,   435,     0,   436,   437,     0,
     438,   439,     0,   440,   441,     0,     0,   442,     0,   443,
       0,   444,     0,   445,     0,   446,   447,   448,     0,     0,
       0,     0,     0,     0,   449,     0,     0,   450,     0,     0,
       0,   451,   452,   453,   454,     0,     0,     0,     0,   455,
     456,     0,   457,   458,     0,     0,   459,     0,     0,   138,
       0,   139,   140,   141,   142,   143,     0,  1061,     0,     0,
       0,   144,     0,     0,   145,   734,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,   155,
       0,     0,     0,   156,     0,     0,   157,   158,   159,     0,
     160,     0,   161,   162,     0,     0,   163,     0,     0,   164,
       0,   165,   166,     0,   167,     0,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,     0,   183,     0,   184,   185,     0,
     186,     0,     0,   187,     0,     0,   188,     0,     0,     0,
       0,     0,     0,   189,   190,   191,     0,     0,   192,     0,
       0,     0,     0,   193,   194,     0,     0,     0,     0,   195,
       0,   196,     0,     0,     0,   197,     0,   198,   199,   200,
     201,     0,     0,     0,   202,     0,     0,   203,   204,   205,
       0,     0,     0,   206,     0,   207,   208,     0,   209,   210,
     211,     0,     0,   212,     0,   213,   214,   215,   216,   217,
       0,     0,   218,   219,   220,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,     0,     0,     0,
     228,   229,     0,   230,     0,   231,     0,   232,   233,   234,
     235,   236,     0,   237,     0,     0,     0,   238,   239,     0,
     240,     0,     0,   241,   242,     0,     0,     0,   243,   244,
     245,   246,   247,     0,     0,   248,   249,     0,     0,   250,
     251,     0,   252,     0,     0,     0,   253,   254,     0,  1254,
       0,   255,     0,   256,   257,     0,   258,   259,     0,     0,
       0,   260,     0,     0,   261,   262,     0,     0,   263,     0,
       0,   264,   265,     0,     0,     0,     0,     0,   266,   267,
       0,   268,     0,   269,     0,   270,   271,     0,     0,     0,
       0,     0,     0,     0,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,   286,
     287,     0,   288,   289,   290,   291,     0,   292,   293,   294,
       0,     0,     0,   295,   296,   297,   298,   299,     0,     0,
     300,   301,     0,   302,     0,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,     0,     0,   312,   313,     0,
       0,   314,   315,   316,   317,     0,     0,     0,   318,   319,
       0,     0,     0,     0,   320,   321,   322,     0,   323,   324,
     325,     0,   326,     0,     0,     0,     0,     0,     0,   327,
       0,     0,     0,   328,   329,   330,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,   345,     0,   346,     0,   347,   348,   349,
     350,     0,   351,   352,   353,     0,     0,   354,     0,     0,
       0,   355,   356,   357,   358,   359,     0,     0,   360,   361,
     362,     0,   363,   364,     0,   365,   366,   367,     0,     0,
     368,     0,   369,   370,   371,     0,   372,   373,     0,     0,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,     0,     0,   386,   387,   388,
     389,     0,     0,     0,   390,     0,     0,     0,   391,   392,
     393,   394,     0,   395,   396,   397,   398,   399,     0,     0,
       0,     0,     0,     0,   400,   401,     0,   402,     0,     0,
     403,     0,     0,   404,   405,     0,     0,   406,     0,     0,
     407,   408,     0,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,     0,   418,   419,     0,   420,     0,
     421,   422,   423,     0,     0,   424,   425,     0,   426,   427,
     428,   429,     0,     0,     0,     0,     0,   430,   431,     0,
       0,     0,   432,   433,   434,   435,     0,   436,   437,     0,
     438,   439,     0,   440,   441,     0,     0,   442,     0,   443,
       0,   444,     0,   445,     0,   446,   447,   448,     0,     0,
       0,     0,     0,     0,   449,     0,     0,   450,     0,     0,
       0,   451,   452,   453,   454,     0,     0,     0,     0,   455,
     456,     0,   457,   458,     0,     0,   459,     0,     0,   138,
       0,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,   506,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,   155,
       0,     0,     0,   156,     0,     0,   157,   158,   159,     0,
     160,     0,   161,   162,     0,     0,   163,     0,     0,   164,
       0,   165,   166,     0,   167,     0,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,     0,   183,     0,   184,   185,     0,
     186,     0,     0,   187,     0,     0,   188,     0,     0,     0,
       0,     0,     0,   189,   190,   191,     0,     0,   192,     0,
       0,     0,     0,   193,   194,     0,     0,     0,     0,   195,
       0,   196,     0,     0,     0,   197,     0,   198,   199,   200,
     201,     0,     0,     0,   202,     0,     0,   203,   204,   205,
       0,     0,     0,   206,     0,   207,   208,     0,   209,   210,
     211,     0,     0,   212,     0,   213,   214,   215,   216,   217,
       0,     0,   218,   219,   220,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,     0,     0,     0,
     228,   229,     0,   230,     0,   231,     0,   232,   233,   234,
     235,   236,     0,   237,     0,     0,     0,   238,   239,     0,
     240,     0,     0,   241,   242,     0,     0,     0,   243,   244,
     245,   246,   247,     0,     0,   248,   249,     0,     0,   250,
     251,     0,   252,     0,     0,     0,   253,   254,     0,     0,
       0,   255,     0,   256,   257,     0,   258,   259,     0,     0,
       0,   260,     0,     0,   261,   262,     0,     0,   263,     0,
       0,   264,   265,     0,     0,     0,     0,     0,   266,   267,
       0,   268,     0,   269,     0,   270,   271,     0,     0,     0,
       0,     0,     0,     0,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,   286,
     287,     0,   288,   289,   290,   291,     0,   292,   293,   294,
       0,     0,     0,   295,   296,   297,   298,   299,     0,     0,
     300,   301,     0,   302,     0,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,     0,     0,   312,   313,     0,
       0,   314,   315,   316,   317,     0,     0,     0,   318,   319,
       0,     0,     0,     0,   320,   321,   322,     0,   323,   324,
     325,     0,   326,     0,     0,     0,     0,     0,     0,   327,
       0,     0,     0,   328,   329,   330,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,   345,     0,   346,     0,   347,   348,   349,
     350,     0,   351,   352,   353,     0,     0,   354,     0,     0,
       0,   355,   356,   357,   358,   359,     0,     0,   360,   361,
     362,     0,   363,   364,     0,   365,   366,   367,     0,     0,
     368,     0,   369,   370,   371,     0,   372,   373,     0,     0,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,     0,   384,   385,     0,     0,     0,   386,   387,   388,
     389,     0,     0,     0,   390,     0,     0,     0,   391,   392,
     393,   394,     0,   395,   396,   397,   398,   399,     0,     0,
       0,     0,     0,     0,   400,   401,     0,   402,     0,     0,
     403,     0,     0,   404,   405,     0,     0,   406,     0,     0,
     407,   408,     0,   409,   410,   411,   412,   413,     0,     0,
     414,   415,   416,   417,     0,   418,   419,     0,   420,     0,
     421,   422,   423,     0,     0,   424,   425,     0,   426,   427,
     428,   429,     0,     0,     0,     0,     0,   430,   431,     0,
       0,     0,   432,   433,   434,   435,     0,   436,   437,     0,
     438,   439,     0,   440,   441,     0,     0,   442,     0,   443,
       0,   444,     0,   445,     0,   446,   447,   448,     0,     0,
       0,     0,     0,     0,   449,     0,     0,   450,     0,     0,
       0,   451,   452,   453,   454,     0,     0,     0,     0,   455,
     456,     0,   457,   458,     0,     0,   459,     0,     0,     0,
       0,   138,  2137,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,   506,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,   155,     0,     0,     0,   156,     0,     0,   157,   158,
     159,     0,   160,     0,   161,   162,     0,     0,   163,     0,
       0,   164,     0,   165,   166,     0,   167,     0,   168,   169,
     170,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,   182,     0,   183,     0,   184,
     185,     0,   186,     0,     0,   187,     0,     0,   188,     0,
       0,     0,     0,     0,     0,   189,   190,   191,     0,     0,
     192,     0,     0,     0,     0,   193,   194,     0,     0,     0,
       0,   195,     0,   196,     0,     0,     0,   197,     0,   198,
     199,   200,   201,     0,     0,     0,   202,     0,     0,   203,
     204,   205,     0,     0,     0,   206,     0,   207,   208,     0,
     209,   210,   211,     0,     0,   212,     0,   213,   214,   215,
     216,   217,     0,     0,   218,   219,   220,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,     0,
       0,     0,   228,   229,     0,   230,     0,   231,     0,   232,
     233,   234,   235,   236,     0,   237,     0,     0,     0,   238,
     239,     0,   240,     0,     0,   241,   242,     0,     0,     0,
     243,   244,   245,   246,   247,     0,     0,   248,   249,     0,
       0,   250,   251,     0,   252,     0,     0,     0,   253,   254,
       0,     0,     0,   255,     0,   256,   257,     0,   258,   259,
       0,     0,     0,   260,     0,     0,   261,   262,     0,     0,
     263,     0,     0,   264,   265,     0,     0,     0,     0,     0,
     266,   267,     0,   268,     0,   269,     0,   270,   271,     0,
       0,     0,     0,     0,     0,     0,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
       0,   286,   287,     0,   288,   289,   290,   291,     0,   292,
     293,   294,     0,     0,     0,   295,   296,   297,   298,   299,
       0,     0,   300,   301,     0,   302,     0,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,     0,     0,   312,
     313,     0,     0,   314,   315,   316,   317,     0,     0,     0,
     318,   319,     0,     0,     0,     0,   320,   321,   322,     0,
     323,   324,   325,     0,   326,     0,     0,     0,     0,     0,
       0,   327,     0,     0,     0,   328,   329,   330,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,   345,     0,   346,     0,   347,
     348,   349,   350,     0,   351,   352,   353,     0,     0,   354,
       0,     0,     0,   355,   356,   357,   358,   359,     0,     0,
     360,   361,   362,     0,   363,   364,     0,   365,   366,   367,
       0,     0,   368,     0,   369,   370,   371,     0,   372,   373,
       0,     0,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,     0,     0,   386,
     387,   388,   389,     0,     0,     0,   390,     0,     0,     0,
     391,   392,   393,   394,     0,   395,   396,   397,   398,   399,
       0,     0,     0,     0,     0,     0,   400,   401,     0,   402,
       0,     0,   403,     0,     0,   404,   405,     0,     0,   406,
       0,     0,   407,   408,     0,   409,   410,   411,   412,   413,
       0,     0,   414,   415,   416,   417,     0,   418,   419,     0,
     420,     0,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,   435,     0,   436,
     437,     0,   438,   439,     0,   440,   441,     0,     0,   442,
       0,   443,     0,   444,     0,   445,     0,   446,   447,   448,
       0,     0,     0,     0,     0,     0,   449,     0,     0,   450,
       0,     0,     0,   451,   452,   453,   454,     0,     0,     0,
       0,   455,   456,     0,   457,   458,     0,     0,   459,     0,
       0,   138,     0,   139,   140,   141,   142,   143,     0,  2380,
       0,     0,     0,   144,     0,     0,   145,  2381,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,   155,     0,     0,     0,   156,     0,     0,   157,   158,
     159,     0,   160,     0,   161,   162,     0,     0,   163,     0,
       0,   164,     0,   165,   166,     0,   167,     0,   168,   169,
     170,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,   182,     0,   183,     0,   184,
     185,     0,   186,     0,     0,   187,     0,     0,   188,     0,
       0,     0,     0,     0,     0,   189,   190,   191,     0,     0,
     192,     0,     0,     0,     0,   193,   194,     0,     0,     0,
       0,   195,     0,   196,     0,     0,     0,   197,     0,   198,
     199,   200,   201,     0,     0,     0,   202,     0,     0,   203,
     204,   205,     0,     0,     0,   206,     0,   207,   208,     0,
     209,   210,   211,     0,     0,   212,     0,   213,   214,   215,
     216,   217,     0,     0,   218,   219,   220,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,     0,
       0,     0,   228,   229,     0,   230,     0,   231,     0,   232,
     233,   234,   235,   236,     0,   237,     0,     0,     0,   238,
     239,     0,   240,     0,     0,   241,   242,     0,     0,     0,
     243,   244,   245,   246,   247,     0,     0,   248,   249,     0,
       0,   250,   251,     0,   252,     0,     0,     0,   253,   254,
       0,     0,     0,   255,     0,   256,   257,     0,   258,   259,
       0,     0,     0,   260,     0,     0,   261,   262,     0,     0,
     263,     0,     0,   264,   265,     0,     0,     0,     0,     0,
     266,   267,     0,   268,     0,   269,     0,   270,   271,     0,
       0,     0,     0,     0,     0,     0,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
       0,   286,   287,     0,   288,   289,   290,   291,     0,   292,
     293,   294,     0,     0,     0,   295,   296,   297,   298,   299,
       0,     0,   300,   301,     0,   302,     0,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,     0,     0,   312,
     313,     0,     0,   314,   315,   316,   317,     0,     0,     0,
     318,   319,     0,     0,     0,     0,   320,   321,   322,     0,
     323,   324,   325,     0,   326,     0,     0,     0,     0,     0,
       0,   327,     0,     0,     0,   328,   329,   330,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,   345,     0,   346,     0,   347,
     348,   349,   350,     0,   351,   352,   353,     0,     0,   354,
       0,     0,     0,   355,   356,   357,   358,   359,     0,     0,
     360,   361,   362,     0,   363,   364,     0,   365,   366,   367,
       0,     0,   368,     0,   369,   370,   371,     0,   372,   373,
       0,     0,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,     0,     0,   386,
     387,   388,   389,     0,     0,     0,   390,     0,     0,     0,
     391,   392,   393,   394,     0,   395,   396,   397,   398,   399,
       0,     0,     0,     0,     0,     0,   400,   401,     0,   402,
       0,     0,   403,     0,     0,   404,   405,     0,     0,   406,
       0,     0,   407,   408,     0,   409,   410,   411,   412,   413,
       0,     0,   414,   415,   416,   417,     0,   418,   419,     0,
     420,     0,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,   435,     0,   436,
     437,     0,   438,   439,     0,   440,   441,     0,     0,   442,
       0,   443,     0,   444,     0,   445,     0,   446,   447,   448,
       0,     0,     0,     0,     0,     0,   449,     0,     0,   450,
       0,     0,     0,   451,   452,   453,   454,     0,     0,     0,
       0,   455,   456,     0,   457,   458,     0,     0,   459,     0,
       0,     0,     0,   138,     0,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,  4123,   734,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,   155,     0,     0,     0,   156,     0,     0,
     157,   158,   159,     0,   160,     0,   161,   162,     0,     0,
     163,     0,     0,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,     0,   183,
       0,   184,   185,     0,   186,     0,     0,   187,     0,     0,
     188,     0,     0,     0,     0,     0,     0,   189,   190,   191,
       0,     0,   192,     0,     0,     0,     0,   193,   194,     0,
       0,     0,     0,   195,     0,   196,     0,     0,     0,   197,
       0,   198,   199,   200,   201,     0,     0,     0,   202,     0,
       0,   203,   204,   205,     0,     0,     0,   206,     0,   207,
     208,     0,   209,   210,   211,     0,     0,   212,     0,   213,
     214,   215,   216,   217,     0,     0,   218,   219,   220,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,     0,     0,     0,   228,   229,     0,   230,     0,   231,
       0,   232,   233,   234,   235,   236,     0,   237,     0,     0,
       0,   238,   239,     0,   240,     0,     0,   241,   242,     0,
       0,     0,   243,   244,   245,   246,   247,     0,     0,   248,
     249,     0,     0,   250,   251,     0,   252,     0,     0,     0,
     253,   254,     0,     0,     0,   255,     0,   256,   257,     0,
     258,   259,     0,     0,     0,   260,     0,     0,   261,   262,
       0,     0,   263,     0,     0,   264,   265,     0,     0,     0,
       0,     0,   266,   267,     0,   268,     0,   269,     0,   270,
     271,     0,     0,     0,     0,     0,     0,     0,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,   288,   289,   290,   291,
       0,   292,   293,   294,     0,     0,     0,   295,   296,   297,
     298,   299,     0,     0,   300,   301,     0,   302,     0,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,     0,
       0,   312,   313,     0,     0,   314,   315,   316,   317,     0,
       0,     0,   318,   319,     0,     0,     0,     0,   320,   321,
     322,     0,   323,   324,   325,     0,   326,     0,     0,     0,
       0,     0,     0,   327,     0,     0,     0,   328,   329,   330,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,   345,     0,   346,
       0,   347,   348,   349,   350,     0,   351,   352,   353,     0,
       0,   354,     0,     0,     0,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,   364,     0,   365,
     366,   367,     0,     0,   368,     0,   369,   370,   371,     0,
     372,   373,     0,     0,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,     0,
       0,   386,   387,   388,   389,     0,     0,     0,   390,     0,
       0,     0,   391,   392,   393,   394,     0,   395,   396,   397,
     398,   399,     0,     0,     0,     0,     0,     0,   400,   401,
       0,   402,     0,     0,   403,     0,     0,   404,   405,     0,
       0,   406,     0,     0,   407,   408,     0,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   421,   422,   423,     0,     0,   424,
     425,     0,   426,   427,   428,   429,     0,     0,     0,     0,
       0,   430,   431,     0,     0,     0,   432,   433,   434,   435,
       0,   436,   437,     0,   438,   439,     0,   440,   441,     0,
       0,   442,     0,   443,     0,   444,     0,   445,     0,   446,
     447,   448,     0,     0,     0,     0,     0,     0,   449,     0,
       0,   450,     0,     0,     0,   451,   452,   453,   454,     0,
       0,     0,     0,   455,   456,     0,   457,   458,     0,     0,
     459,     0,     0,   138,     0,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,   506,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,   155,     0,     0,     0,   156,     0,     0,
     157,   158,   159,     0,   160,     0,   161,   162,     0,     0,
     163,     0,     0,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,     0,   183,
       0,   184,   185,     0,   186,     0,     0,   187,     0,     0,
     188,     0,     0,     0,     0,     0,     0,   189,   190,   191,
       0,     0,   192,     0,     0,     0,     0,   193,   194,     0,
       0,     0,     0,   195,     0,   196,     0,     0,     0,   197,
       0,   198,   199,   200,   201,     0,     0,     0,   202,     0,
       0,   203,   204,   205,     0,     0,     0,   206,     0,   207,
     208,     0,   209,   210,   211,     0,     0,   212,     0,   213,
     214,   215,   216,   217,     0,     0,   218,   567,   220,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,     0,     0,     0,   228,   229,     0,   230,     0,   231,
       0,   232,   233,   234,   235,   236,     0,   237,     0,     0,
       0,   238,   239,     0,   240,     0,     0,   241,   242,     0,
       0,     0,   243,   244,   245,   246,   247,     0,     0,   248,
     249,     0,     0,   250,   251,     0,   252,     0,     0,     0,
     253,   254,     0,     0,     0,   255,     0,   256,   257,     0,
     258,   259,     0,     0,     0,   260,     0,     0,   261,   262,
       0,     0,   263,     0,     0,   264,   265,     0,     0,     0,
       0,     0,   266,   267,     0,   268,     0,   269,     0,   270,
     271,     0,     0,     0,     0,     0,     0,     0,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,   288,   289,   290,   291,
       0,   292,   293,   294,     0,     0,     0,   295,   296,   297,
     298,   299,     0,     0,   300,   301,     0,   302,     0,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,     0,
       0,   312,   313,     0,     0,   314,   315,   316,   317,     0,
       0,     0,   318,   319,     0,     0,     0,     0,   320,   321,
     322,     0,   323,   324,   325,     0,   326,     0,     0,     0,
       0,     0,     0,   327,     0,     0,     0,   328,   329,   330,
       0,   331,   332,   333,   568,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,   345,     0,   346,
       0,   347,   348,   349,   350,     0,   351,   352,   353,     0,
       0,   354,     0,     0,     0,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,   364,     0,   365,
     366,   367,     0,     0,   368,     0,   369,   370,   371,     0,
     372,   373,     0,     0,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,     0,
       0,   386,   387,   388,   389,     0,     0,     0,   390,     0,
       0,     0,   391,   392,   393,   394,     0,   395,   396,   397,
     398,   399,     0,     0,     0,     0,     0,     0,   400,   401,
       0,   402,     0,     0,   403,     0,     0,   404,   405,     0,
       0,   406,     0,     0,   407,   408,     0,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   421,   422,   423,     0,     0,   424,
     425,     0,   426,   427,   428,   429,     0,     0,     0,     0,
       0,   430,   431,     0,     0,     0,   432,   433,   434,   435,
       0,   436,   437,     0,   438,   439,     0,   440,   441,     0,
       0,   442,     0,   443,     0,   444,     0,   445,     0,   446,
     447,   448,     0,     0,     0,     0,     0,     0,   449,     0,
       0,   450,     0,     0,     0,   451,   452,   453,   454,     0,
       0,     0,     0,   455,   456,     0,   457,   458,     0,     0,
     459,     0,     0,   138,     0,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,   506,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,   155,     0,     0,     0,   156,     0,     0,
     157,   158,   159,     0,   160,     0,   161,   162,     0,     0,
     163,     0,     0,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,     0,   183,
       0,   184,   185,     0,   186,     0,     0,   187,     0,     0,
     188,     0,     0,     0,     0,     0,     0,   189,   190,   191,
       0,     0,   192,     0,     0,     0,     0,   193,   194,     0,
       0,     0,     0,   195,     0,   196,     0,     0,     0,   197,
       0,   198,   199,   200,   201,     0,     0,     0,   202,     0,
       0,   203,   204,   205,     0,     0,     0,   206,     0,   207,
     208,     0,   209,   210,   211,     0,     0,   212,     0,   213,
     214,   215,   216,   217,     0,     0,   218,   219,   220,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,     0,     0,     0,   228,   229,     0,   230,     0,   231,
       0,   232,   233,   234,   235,   236,     0,   237,     0,     0,
       0,   238,   239,     0,   240,     0,     0,   241,   242,     0,
       0,     0,   243,   244,   245,   246,   247,     0,     0,   248,
     249,     0,     0,   250,   251,     0,   252,     0,     0,     0,
     253,   254,     0,     0,     0,   255,     0,   256,   257,     0,
     258,   259,     0,     0,     0,   260,     0,     0,   261,   262,
       0,     0,   263,     0,     0,   264,   265,     0,     0,     0,
       0,     0,   266,   267,     0,   268,     0,   269,     0,   270,
     271,     0,     0,     0,     0,     0,     0,     0,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,   288,   289,   290,   291,
       0,   292,   293,   294,     0,     0,     0,   295,   296,   297,
     298,   299,     0,     0,   300,   301,     0,   302,     0,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,     0,
       0,   312,   313,     0,     0,   314,   315,   316,   317,     0,
       0,     0,   318,   319,     0,     0,     0,     0,   320,   321,
     322,     0,   323,   324,   325,     0,   326,     0,     0,     0,
       0,     0,     0,   327,     0,     0,     0,   328,   329,   330,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,   345,     0,   346,
       0,   347,   348,   349,   350,     0,   351,   352,   353,     0,
       0,   354,     0,     0,     0,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,   364,     0,   365,
     366,   367,     0,     0,   368,     0,   369,   370,   371,     0,
     372,   373,     0,     0,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,     0,
       0,   386,   387,   388,   389,     0,     0,     0,   390,     0,
       0,     0,   391,   392,   393,   394,     0,   395,   396,   397,
     398,   399,     0,     0,     0,     0,     0,     0,   400,   401,
       0,   402,     0,     0,   403,     0,     0,   404,   405,     0,
       0,   406,     0,     0,   407,   408,     0,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   421,   422,   423,     0,     0,   424,
     425,     0,   426,   427,   428,   429,     0,     0,     0,     0,
       0,   430,   431,     0,     0,     0,   432,   433,   434,   435,
       0,   436,   437,     0,   438,   439,     0,   440,   441,     0,
       0,   442,     0,   443,     0,   444,     0,   445,     0,   446,
     447,   448,     0,     0,     0,     0,     0,     0,   449,     0,
       0,   450,     0,     0,     0,   451,   452,   453,   454,     0,
       0,     0,     0,   455,   456,     0,   457,   458,     0,     0,
     459,     0,     0,   138,     0,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,   734,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,   155,     0,     0,     0,   156,     0,     0,
     157,   158,   159,     0,   160,     0,   161,   162,     0,     0,
     163,     0,     0,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,     0,   183,
       0,   184,   185,     0,   186,     0,     0,   187,     0,     0,
     188,     0,     0,     0,     0,     0,     0,   189,   190,   191,
       0,     0,   192,     0,     0,     0,     0,   193,   194,     0,
       0,     0,     0,   195,     0,   196,     0,     0,     0,   197,
       0,   198,   199,   200,   201,     0,     0,     0,   202,     0,
       0,   203,   204,   205,     0,     0,     0,   206,     0,   207,
     208,     0,   209,   210,   211,     0,     0,   212,     0,   213,
     214,   215,   216,   217,     0,     0,   218,   219,   220,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,     0,     0,     0,   228,   229,     0,   230,     0,   231,
       0,   232,   233,   234,   235,   236,     0,   237,     0,     0,
       0,   238,   239,     0,   240,     0,     0,   241,   242,     0,
       0,     0,   243,   244,   245,   246,   247,     0,     0,   248,
     249,     0,     0,   250,   251,     0,   252,     0,     0,     0,
     253,   254,     0,     0,     0,   255,     0,   256,   257,     0,
     258,   259,     0,     0,     0,   260,     0,     0,   261,   262,
       0,     0,   263,     0,     0,   264,   265,     0,     0,     0,
       0,     0,   266,   267,     0,   268,     0,   269,     0,   270,
     271,     0,     0,     0,     0,     0,     0,     0,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,   288,   289,   290,   291,
       0,   292,   293,   294,     0,     0,     0,   295,   296,   297,
     298,   299,     0,     0,   300,   301,     0,   302,     0,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,     0,
       0,   312,   313,     0,     0,   314,   315,   316,   317,     0,
       0,     0,   318,   319,     0,     0,     0,     0,   320,   321,
     322,     0,   323,   324,   325,     0,   326,     0,     0,     0,
       0,     0,     0,   327,     0,     0,     0,   328,   329,   330,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,   345,     0,   346,
       0,   347,   348,   349,   350,     0,   351,   352,   353,     0,
       0,   354,     0,     0,     0,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,   364,     0,   365,
     366,   367,     0,     0,   368,     0,   369,   370,   371,     0,
     372,   373,     0,     0,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,     0,
       0,   386,   387,   388,   389,     0,     0,     0,   390,     0,
       0,     0,   391,   392,   393,   394,     0,   395,   396,   397,
     398,   399,     0,     0,     0,     0,     0,     0,   400,   401,
       0,   402,     0,     0,   403,     0,     0,   404,   405,     0,
       0,   406,     0,     0,   407,   408,     0,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   421,   422,   423,     0,     0,   424,
     425,     0,   426,   427,   428,   429,     0,     0,     0,     0,
       0,   430,   431,     0,     0,     0,   432,   433,   434,   435,
       0,   436,   437,     0,   438,   439,     0,   440,   441,     0,
       0,   442,     0,   443,     0,   444,     0,   445,     0,   446,
     447,   448,     0,     0,     0,     0,     0,     0,   449,     0,
       0,   450,     0,     0,     0,   451,   452,   453,   454,     0,
       0,     0,     0,   455,   456,     0,   457,   458,     0,     0,
     459,     0,     0,   138,     0,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,  2381,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,   155,     0,     0,     0,   156,     0,     0,
     157,   158,   159,     0,   160,     0,   161,   162,     0,     0,
     163,     0,     0,   164,     0,   165,   166,     0,   167,     0,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,     0,   183,
       0,   184,   185,     0,   186,     0,     0,   187,     0,     0,
     188,     0,     0,     0,     0,     0,     0,   189,   190,   191,
       0,     0,   192,     0,     0,     0,     0,   193,   194,     0,
       0,     0,     0,   195,     0,   196,     0,     0,     0,   197,
       0,   198,   199,   200,   201,     0,     0,     0,   202,     0,
       0,   203,   204,   205,     0,     0,     0,   206,     0,   207,
     208,     0,   209,   210,   211,     0,     0,   212,     0,   213,
     214,   215,   216,   217,     0,     0,   218,   219,   220,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,     0,     0,     0,   228,   229,     0,   230,     0,   231,
       0,   232,   233,   234,   235,   236,     0,   237,     0,     0,
       0,   238,   239,     0,   240,     0,     0,   241,   242,     0,
       0,     0,   243,   244,   245,   246,   247,     0,     0,   248,
     249,     0,     0,   250,   251,     0,   252,     0,     0,     0,
     253,   254,     0,     0,     0,   255,     0,   256,   257,     0,
     258,   259,     0,     0,     0,   260,     0,     0,   261,   262,
       0,     0,   263,     0,     0,   264,   265,   579,     0,     0,
       0,     0,   266,   267,     0,   268,     0,   269,     0,   270,
     271,     0,     0,     0,     0,     0,     0,     0,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,   287,     0,   288,   289,   290,   291,
       0,   292,   293,   294,     0,     0,     0,   295,   296,   297,
     298,   299,     0,     0,   300,   301,     0,   302,     0,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,     0,
       0,   312,   313,     0,     0,   314,   315,   316,   317,     0,
       0,     0,   318,   319,     0,     0,     0,     0,   320,   321,
     322,     0,   323,   324,   325,     0,   326,     0,     0,     0,
       0,     0,     0,   327,     0,     0,     0,   328,   329,   330,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,   345,     0,   346,
       0,   347,   348,   349,   350,     0,   351,   352,   353,     0,
       0,   354,     0,     0,     0,   355,   356,   357,   358,   359,
       0,     0,   360,   361,   362,     0,   363,   364,     0,   365,
     366,   367,     0,     0,   368,     0,   369,   370,   371,     0,
     372,   373,     0,     0,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,     0,   384,   385,     0,     0,
       0,   386,   387,   388,   389,     0,     0,     0,   390,     0,
       0,     0,   391,   392,   393,   394,     0,   395,   396,   397,
     398,   399,     0,     0,     0,     0,     0,     0,   400,   401,
       0,   402,     0,     0,   403,     0,     0,   404,   405,     0,
       0,   406,     0,     0,   407,   408,     0,   409,   410,   411,
     412,   413,     0,     0,   414,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   421,   422,   423,     0,   135,   424,
     425,     0,   426,   427,   428,   429,     0,     0,     0,     0,
       0,   430,   431,     0,     0,     0,   432,   433,   434,   435,
       0,   436,   437,     0,   438,   439,     0,   440,   441,     0,
       0,   442,     0,   443,     0,   444,     0,   445,     0,   446,
     447,   448,     0,     0,     0,     0,     0,     0,   449,     0,
       0,   450,     0,     0,     0,   451,   452,   453,   454,     0,
       0,     0,     0,   455,   456,     0,   457,   458,     0,     0,
     459,     0,   138,     0,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,  1601,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
       0,     0,   164,     0,   165,   166,     0,   167,     0,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,   182,     0,   183,     0,
     184,   185,     0,   186,     0,     0,   187,     0,     0,   188,
       0,     0,     0,     0,     0,     0,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,   193,   194,     0,     0,
       0,     0,   195,     0,   196,     0,     0,     0,   197,     0,
     198,   199,   200,   201,     0,     0,     0,   202,     0,     0,
     203,   204,   205,     0,     0,     0,   206,     0,   207,   208,
       0,   209,   210,   211,     0,     0,   212,     0,   213,   214,
     215,   216,   217,     0,     0,   218,   219,   220,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
       0,     0,     0,   228,   229,     0,   230,     0,   231,     0,
     232,   233,   234,   235,   236,     0,   237,     0,     0,     0,
     238,   239,     0,   240,     0,     0,   241,   242,     0,     0,
       0,   243,   244,   245,   246,   247,     0,     0,   248,   249,
       0,     0,   250,   251,     0,   252,     0,     0,     0,   253,
     254,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,     0,     0,     0,   260,     0,     0,   261,   262,     0,
       0,   263,     0,     0,   264,   265,   579,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,     0,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,   294,     0,     0,     0,   295,   296,   297,   298,
     299,     0,     0,   300,   301,     0,   302,     0,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,     0,     0,
     312,   313,     0,     0,   314,   315,   316,   317,     0,     0,
       0,   318,   319,     0,     0,     0,     0,   320,   321,   322,
       0,   323,   324,   325,     0,   326,     0,     0,     0,     0,
       0,     0,   327,     0,     0,     0,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,     0,   343,   344,   345,     0,   346,     0,
     347,   348,   349,   350,     0,   351,   352,   353,     0,     0,
     354,     0,     0,     0,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,   364,     0,   365,   366,
     367,     0,     0,   368,     0,   369,   370,   371,     0,   372,
     373,     0,     0,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,     0,     0,
     386,   387,   388,   389,     0,     0,     0,   390,     0,     0,
       0,   391,   392,   393,   394,     0,   395,   396,   397,   398,
     399,     0,     0,     0,     0,     0,     0,   400,   401,     0,
     402,     0,     0,   403,     0,     0,   404,   405,     0,     0,
     406,     0,     0,   407,   408,     0,   409,   410,   411,   412,
     413,     0,     0,   414,   415,   416,   417,     0,   418,   419,
       0,   420,     0,   421,   422,   423,     0,   135,   424,   425,
       0,   426,   427,   428,   429,     0,     0,     0,     0,     0,
     430,   431,     0,     0,     0,   432,   433,   434,   435,     0,
     436,   437,     0,   438,   439,     0,   440,   441,     0,     0,
     442,     0,   443,     0,   444,     0,   445,     0,   446,   447,
     448,     0,     0,     0,     0,     0,     0,   449,     0,     0,
     450,     0,     0,     0,   451,   452,   453,   454,     0,     0,
       0,     0,   455,   456,     0,   457,   458,     0,     0,   459,
       0,   138,     0,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,  2639,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,   155,     0,     0,     0,   156,     0,     0,   157,   158,
     159,     0,   160,     0,   161,   162,     0,     0,   163,     0,
       0,   164,     0,   165,   166,     0,   167,     0,   168,   169,
     170,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,   182,     0,   183,     0,   184,
     185,     0,   186,     0,     0,   187,     0,     0,   188,     0,
       0,     0,     0,     0,     0,   189,   190,   191,     0,     0,
     192,     0,     0,     0,     0,   193,   194,     0,     0,     0,
       0,   195,     0,   196,     0,     0,     0,   197,     0,   198,
     199,   200,   201,     0,     0,     0,   202,     0,     0,   203,
     204,   205,     0,     0,     0,   206,     0,   207,   208,     0,
     209,   210,   211,     0,     0,   212,     0,   213,   214,   215,
     216,   217,     0,     0,   218,   219,   220,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,     0,
       0,     0,   228,   229,     0,   230,     0,   231,     0,   232,
     233,   234,   235,   236,     0,   237,     0,     0,     0,   238,
     239,     0,   240,     0,     0,   241,   242,     0,     0,     0,
     243,   244,   245,   246,   247,     0,     0,   248,   249,     0,
       0,   250,   251,     0,   252,     0,     0,     0,   253,   254,
       0,     0,     0,   255,     0,   256,   257,     0,   258,   259,
       0,     0,     0,   260,     0,     0,   261,   262,     0,     0,
     263,     0,     0,   264,   265,   579,     0,     0,     0,     0,
     266,   267,     0,   268,     0,   269,     0,   270,   271,     0,
       0,     0,     0,     0,     0,     0,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
       0,   286,   287,     0,   288,   289,   290,   291,     0,   292,
     293,   294,     0,     0,     0,   295,   296,   297,   298,   299,
       0,     0,   300,   301,     0,   302,     0,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,     0,     0,   312,
     313,     0,     0,   314,   315,   316,   317,     0,     0,     0,
     318,   319,     0,     0,     0,     0,   320,   321,   322,     0,
     323,   324,   325,     0,   326,     0,     0,     0,     0,     0,
       0,   327,     0,     0,     0,   328,   329,   330,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,   345,     0,   346,     0,   347,
     348,   349,   350,     0,   351,   352,   353,     0,     0,   354,
       0,     0,     0,   355,   356,   357,   358,   359,     0,     0,
     360,   361,   362,     0,   363,   364,     0,   365,   366,   367,
       0,     0,   368,     0,   369,   370,   371,     0,   372,   373,
       0,     0,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,     0,   384,   385,     0,     0,     0,   386,
     387,   388,   389,     0,     0,     0,   390,     0,     0,     0,
     391,   392,   393,   394,     0,   395,   396,   397,   398,   399,
       0,     0,     0,     0,     0,     0,   400,   401,     0,   402,
       0,     0,   403,     0,     0,   404,   405,     0,     0,   406,
       0,     0,   407,   408,     0,   409,   410,   411,   412,   413,
       0,     0,   414,   415,   416,   417,     0,   418,   419,     0,
     420,     0,   421,   422,   423,     0,   135,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,   435,     0,   436,
     437,     0,   438,   439,     0,   440,   441,     0,     0,   442,
       0,   443,     0,   444,     0,   445,     0,   446,   447,   448,
       0,     0,     0,     0,     0,     0,   449,     0,     0,   450,
       0,     0,     0,   451,   452,   453,   454,     0,     0,     0,
       0,   455,   456,     0,   457,   458,     0,     0,   459,     0,
     138,     0,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,     0,  3223,   146,   147,   148,
     149,   150,   151,     0,     0,  -296,     0,     0,     0,   154,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,     0,     0,     0,     0,   163,  3634,     0,
     164,     0,   165,     0,     0,     0,     0,   168,   169,  3635,
     171,   172,     0,   173,   174,     0,     0,   176,     0,   178,
     179,   180,   181,     0,   182,     0,   183,     0,     0,   185,
       0,   186,     0,     0,   187,     0,     0,   188,     0,     0,
       0,     0,     0,     0,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,     0,     0,     0,     0,     0,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,     0,     0,     0,     0,     0,     0,   203,   204,
     205,     0,     0,     0,   206,     0,     0,   208,     0,   209,
     210,   211,     0,     0,   212,     0,   213,   214,   215,   216,
       0,     0,     0,   218,   219,   220,     0,   221,     0,   222,
     223,  3636,   224,   225,   226,     0,     0,     0,     0,     0,
       0,   228,   229,     0,   230,     0,   231,     0,   232,   233,
     234,   235,     0,     0,   237,     0,     0,     0,     0,   239,
       0,     0,     0,     0,     0,   242,     0,     0,     0,   243,
     244,   245,   246,   247,  3637,     0,   248,   249,     0,     0,
     250,   251,     0,   252,     0,     0,     0,   253,     0,     0,
       0,     0,   255,     0,   256,   257,     0,   258,   259,  3638,
       0,     0,   260,     0,     0,     0,   262,     0,     0,   263,
    3639,     0,   264,   265,     0,     0,     0,     0,     0,   266,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
       0,     0,  -251,     0,     0,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
     294,     0,     0,     0,   295,   296,   297,   298,   299,     0,
       0,   300,   301,     0,   302,     0,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,     0,     0,   312,   313,
       0,     0,   314,   315,   316,   317,     0,     0,     0,     0,
     319,     0,     0,     0,     0,   320,   321,   322,     0,   323,
     324,  3640,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,   330,     0,     0,   332,
     333,   334,     0,   336,   337,   338,   339,   340,   341,     0,
       0,     0,     0,   344,   345,     0,   346,     0,   347,   348,
     349,   350,     0,   351,   352,   353,     0,     0,   354,     0,
       0,     0,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,     0,     0,   365,     0,   367,  -251,
       0,   368,     0,     0,   370,     0,     0,   372,   373,  3641,
       0,     0,     0,     0,   376,   377,   378,   379,   380,   381,
       0,   383,     0,   384,     0,     0,     0,     0,   386,   387,
     388,     0,     0,     0,     0,   390,     0,     0,     0,   391,
       0,   393,     0,     0,   395,     0,     0,   398,   399,     0,
       0,     0,     0,     0,     0,   400,   401,     0,   402,     0,
       0,   403,     0,     0,   404,     0,     0,     0,   406,     0,
       0,     0,   408,     0,   409,   410,   411,   412,   413,     0,
       0,   414,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   421,   422,   423,     0,     0,   424,   425,     0,   426,
     427,   428,   429,     0,     0,     0,     0,     0,   430,   431,
       0,     0,     0,     0,   433,   434,   435,     0,   436,   437,
       0,   438,   439,     0,     0,     0,     0,     0,   442,     0,
       0,     0,   444,     0,     0,     0,   446,   447,   448,     0,
       0,     0,     0,     0,     0,   449,     0,     0,   450,     0,
       0,     0,   451,   452,   453,   454,     0,     0,  -251,     0,
     455,     0,     0,   457,     0,     0,   138,   459,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
    4148,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,   161,
     162,     0,     0,   163,     0,     0,   164,     0,   165,   166,
       0,   167,     0,   168,   169,   170,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,     0,   183,     0,   184,   185,     0,   186,     0,     0,
     187,     0,     0,   188,     0,     0,     0,     0,     0,     0,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
     193,   194,     0,     0,     0,     0,   195,     0,   196,     0,
       0,     0,   197,     0,   198,   199,   200,   201,     0,     0,
       0,   202,     0,     0,   203,   204,   205,     0,     0,     0,
     206,     0,   207,   208,     0,   209,   210,   211,     0,     0,
     212,     0,   213,   214,   215,   216,   217,     0,     0,   218,
     219,   220,     0,   221,     0,   222,   223,     0,   224,   225,
     226,     0,     0,   227,     0,     0,     0,   228,   229,     0,
     230,     0,   231,     0,   232,   233,   234,   235,   236,     0,
     237,     0,     0,     0,   238,   239,     0,   240,     0,     0,
     241,   242,     0,     0,     0,   243,   244,   245,   246,   247,
       0,     0,   248,   249,     0,     0,   250,   251,     0,   252,
       0,     0,     0,   253,   254,     0,     0,     0,   255,     0,
     256,   257,     0,   258,   259,     0,     0,     0,   260,     0,
       0,   261,   262,     0,     0,   263,     0,     0,   264,   265,
       0,     0,     0,     0,     0,   266,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,     0,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,     0,   288,
     289,   290,   291,     0,   292,   293,   294,     0,     0,     0,
     295,   296,   297,   298,   299,     0,     0,   300,   301,     0,
     302,     0,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,     0,     0,   312,   313,     0,     0,   314,   315,
     316,   317,     0,     0,     0,   318,   319,     0,     0,     0,
       0,   320,   321,   322,     0,   323,   324,   325,     0,   326,
       0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
     328,   329,   330,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,     0,   343,   344,
     345,     0,   346,     0,   347,   348,   349,   350,     0,   351,
     352,   353,     0,     0,   354,     0,     0,     0,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
     364,     0,   365,   366,   367,     0,     0,   368,     0,   369,
     370,   371,     0,   372,   373,     0,     0,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,     0,     0,   386,   387,   388,   389,     0,     0,
       0,   390,     0,     0,     0,   391,   392,   393,   394,     0,
     395,   396,   397,   398,   399,     0,     0,     0,     0,     0,
       0,   400,   401,     0,   402,     0,     0,   403,     0,     0,
     404,   405,     0,     0,   406,     0,     0,   407,   408,     0,
     409,   410,   411,   412,   413,     0,     0,   414,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,   432,
     433,   434,   435,     0,   436,   437,     0,   438,   439,     0,
     440,   441,     0,     0,   442,     0,   443,     0,   444,     0,
     445,     0,   446,   447,   448,     0,     0,     0,     0,     0,
       0,   449,     0,     0,   450,     0,     0,     0,   451,   452,
     453,   454,     0,     0,     0,     0,   455,   456,     0,   457,
     458,     0,   138,   459,   139,   140,   141,   142,   143,  1983,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
       0,     0,   164,     0,   165,   166,     0,   167,     0,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,   182,     0,   183,     0,
     184,   185,     0,   186,     0,     0,   187,     0,     0,   188,
       0,     0,     0,     0,     0,     0,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,   193,   194,     0,     0,
       0,     0,   195,     0,   196,     0,     0,     0,   197,     0,
     198,   199,   200,   201,     0,     0,     0,   202,     0,     0,
     203,   204,   205,     0,     0,     0,   206,     0,   207,   208,
       0,   209,   210,   211,     0,     0,   212,     0,   213,   214,
     215,   216,   217,     0,     0,   218,   219,   220,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
       0,     0,     0,   228,   229,     0,   230,     0,   231,     0,
     232,   233,   234,   235,   236,     0,   237,     0,     0,     0,
     238,   239,     0,   240,     0,     0,   241,   242,     0,     0,
       0,   243,   244,   245,   246,   247,     0,     0,   248,   249,
       0,     0,   250,   251,     0,   252,     0,     0,     0,   253,
     254,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,     0,     0,     0,   260,     0,     0,   261,   262,     0,
       0,   263,     0,     0,   264,   265,     0,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,     0,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,   294,     0,     0,     0,   295,   296,   297,   298,
     299,     0,     0,   300,   301,     0,   302,     0,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,     0,     0,
     312,   313,     0,     0,   314,   315,   316,   317,     0,     0,
       0,   318,   319,     0,     0,     0,     0,   320,   321,   322,
       0,   323,   324,   325,     0,   326,     0,     0,     0,     0,
       0,     0,   327,     0,     0,     0,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,     0,   343,   344,   345,     0,   346,     0,
     347,   348,   349,   350,     0,   351,   352,   353,     0,     0,
     354,     0,     0,     0,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,   364,     0,   365,   366,
     367,     0,     0,   368,     0,   369,   370,   371,     0,   372,
     373,     0,     0,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,     0,     0,
     386,   387,   388,   389,     0,     0,     0,   390,     0,     0,
       0,   391,   392,   393,   394,     0,   395,   396,   397,   398,
     399,     0,     0,     0,     0,     0,     0,   400,   401,     0,
     402,     0,     0,   403,     0,     0,   404,   405,     0,     0,
     406,     0,     0,   407,   408,     0,   409,   410,   411,   412,
     413,     0,     0,   414,   415,   416,   417,     0,   418,   419,
       0,   420,     0,   421,   422,   423,     0,     0,   424,   425,
       0,   426,   427,   428,   429,     0,     0,     0,     0,     0,
     430,   431,     0,     0,     0,   432,   433,   434,   435,     0,
     436,   437,     0,   438,   439,     0,   440,   441,     0,     0,
     442,     0,   443,     0,   444,     0,   445,     0,   446,   447,
     448,     0,     0,     0,     0,     0,     0,   449,     0,     0,
     450,     0,     0,     0,   451,   452,   453,   454,     0,     0,
       0,     0,   455,   456,     0,   457,   458,     0,   138,   459,
     139,   140,   141,   142,   143,  2625,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,   161,   162,     0,     0,   163,     0,     0,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,   182,     0,   183,     0,   184,   185,     0,   186,
       0,     0,   187,     0,     0,   188,     0,     0,     0,     0,
       0,     0,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,   193,   194,     0,     0,     0,     0,   195,     0,
     196,     0,     0,     0,   197,     0,   198,   199,   200,   201,
       0,     0,     0,   202,     0,     0,   203,   204,   205,     0,
       0,     0,   206,     0,   207,   208,     0,   209,   210,   211,
       0,     0,   212,     0,   213,   214,   215,   216,   217,     0,
       0,   218,   219,   220,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,     0,     0,     0,   228,
     229,     0,   230,     0,   231,     0,   232,   233,   234,   235,
     236,     0,   237,     0,     0,     0,   238,   239,     0,   240,
       0,     0,   241,   242,     0,     0,     0,   243,   244,   245,
     246,   247,     0,     0,   248,   249,     0,     0,   250,   251,
       0,   252,     0,     0,     0,   253,   254,     0,     0,     0,
     255,     0,   256,   257,     0,   258,   259,     0,     0,     0,
     260,     0,     0,   261,   262,     0,     0,   263,     0,     0,
     264,   265,     0,     0,     0,     0,     0,   266,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,     0,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
       0,   288,   289,   290,   291,     0,   292,   293,   294,     0,
       0,     0,   295,   296,   297,   298,   299,     0,     0,   300,
     301,     0,   302,     0,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,     0,     0,   312,   313,     0,     0,
     314,   315,   316,   317,     0,     0,     0,   318,   319,     0,
       0,     0,     0,   320,   321,   322,     0,   323,   324,   325,
       0,   326,     0,     0,     0,     0,     0,     0,   327,     0,
       0,     0,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,     0,
     343,   344,   345,     0,   346,     0,   347,   348,   349,   350,
       0,   351,   352,   353,     0,     0,   354,     0,     0,     0,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,   364,     0,   365,   366,   367,     0,     0,   368,
       0,   369,   370,   371,     0,   372,   373,     0,     0,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,     0,     0,   386,   387,   388,   389,
       0,     0,     0,   390,     0,     0,     0,   391,   392,   393,
     394,     0,   395,   396,   397,   398,   399,     0,     0,     0,
       0,     0,     0,   400,   401,     0,   402,     0,     0,   403,
       0,     0,   404,   405,     0,     0,   406,     0,     0,   407,
     408,     0,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   421,
     422,   423,     0,     0,   424,   425,     0,   426,   427,   428,
     429,     0,     0,     0,     0,     0,   430,   431,     0,     0,
       0,   432,   433,   434,   435,     0,   436,   437,     0,   438,
     439,     0,   440,   441,     0,     0,   442,     0,   443,     0,
     444,     0,   445,     0,   446,   447,   448,     0,     0,     0,
       0,     0,     0,   449,     0,     0,   450,     0,     0,     0,
     451,   452,   453,   454,     0,     0,     0,     0,   455,   456,
       0,   457,   458,     0,   138,   459,   139,   140,   141,   142,
     143,  2919,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,   161,   162,     0,
       0,   163,     0,     0,   164,     0,   165,   166,     0,   167,
       0,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,   182,     0,
     183,     0,   184,   185,     0,   186,     0,     0,   187,     0,
       0,   188,     0,     0,     0,     0,     0,     0,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,   193,   194,
       0,     0,     0,     0,   195,     0,   196,     0,     0,     0,
     197,     0,   198,   199,   200,   201,     0,     0,     0,   202,
       0,     0,   203,   204,   205,     0,     0,     0,   206,     0,
     207,   208,     0,   209,   210,   211,     0,     0,   212,     0,
     213,   214,   215,   216,   217,     0,     0,   218,   219,   220,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,     0,     0,     0,   228,   229,     0,   230,     0,
     231,     0,   232,   233,   234,   235,   236,     0,   237,     0,
       0,     0,   238,   239,     0,   240,     0,     0,   241,   242,
       0,     0,     0,   243,   244,   245,   246,   247,     0,     0,
     248,   249,     0,     0,   250,   251,     0,   252,     0,     0,
       0,   253,   254,     0,     0,     0,   255,     0,   256,   257,
       0,   258,   259,     0,     0,     0,   260,     0,     0,   261,
     262,     0,     0,   263,     0,     0,   264,   265,     0,     0,
       0,     0,     0,   266,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,     0,     0,     0,     0,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,     0,   288,   289,   290,
     291,     0,   292,   293,   294,     0,     0,     0,   295,   296,
     297,   298,   299,     0,     0,   300,   301,     0,   302,     0,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
       0,     0,   312,   313,     0,     0,   314,   315,   316,   317,
       0,     0,     0,   318,   319,     0,     0,     0,     0,   320,
     321,   322,     0,   323,   324,   325,     0,   326,     0,     0,
       0,     0,     0,     0,   327,     0,     0,     0,   328,   329,
     330,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,     0,   343,   344,   345,     0,
     346,     0,   347,   348,   349,   350,     0,   351,   352,   353,
       0,     0,   354,     0,     0,     0,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,   364,     0,
     365,   366,   367,     0,     0,   368,     0,   369,   370,   371,
       0,   372,   373,     0,     0,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
       0,     0,   386,   387,   388,   389,     0,     0,     0,   390,
       0,     0,     0,   391,   392,   393,   394,     0,   395,   396,
     397,   398,   399,     0,     0,     0,     0,     0,     0,   400,
     401,     0,   402,     0,     0,   403,     0,     0,   404,   405,
       0,     0,   406,     0,     0,   407,   408,     0,   409,   410,
     411,   412,   413,     0,     0,   414,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   421,   422,   423,     0,     0,
     424,   425,     0,   426,   427,   428,   429,     0,     0,     0,
       0,     0,   430,   431,     0,     0,     0,   432,   433,   434,
     435,     0,   436,   437,     0,   438,   439,     0,   440,   441,
       0,     0,   442,     0,   443,     0,   444,     0,   445,     0,
     446,   447,   448,     0,     0,     0,     0,     0,     0,   449,
       0,     0,   450,     0,     0,     0,   451,   452,   453,   454,
       0,     0,     0,     0,   455,   456,     0,   457,   458,     0,
     138,   459,   139,   140,   141,   142,   143,  3228,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,   161,   162,     0,     0,   163,     0,     0,
     164,     0,   165,   166,     0,   167,     0,   168,   169,   170,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,     0,   183,     0,   184,   185,
       0,   186,     0,     0,   187,     0,     0,   188,     0,     0,
       0,     0,     0,     0,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,  2295,     0,     0,     0,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,     0,     0,     0,   202,     0,     0,   203,   204,
     205,     0,     0,     0,   206,     0,   207,   208,     0,   209,
     210,   211,     0,     0,   212,     0,   213,   214,   215,   216,
     217,     0,     0,   218,   219,   220,     0,   221,     0,   222,
     223,     0,   224,   225,   226,  2296,     0,   227,     0,     0,
       0,   228,   229,     0,   230,     0,   231,     0,   232,   233,
     234,   235,   236,     0,   237,     0,     0,     0,   238,   239,
       0,   240,  2297,     0,   241,   242,     0,     0,     0,   243,
     244,   245,   246,   247,     0,     0,   248,   249,     0,     0,
     250,   251,     0,   252,     0,     0,     0,   253,   254,     0,
       0,     0,   255,     0,   256,   257,     0,   258,   259,     0,
       0,     0,   260,     0,     0,   261,   262,     0,     0,   263,
       0,     0,   264,   265,     0,     0,     0,     0,     0,   266,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
    2298,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
     294,     0,     0,     0,   295,   296,   297,   298,   299,     0,
       0,   300,   301,     0,   302,     0,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,     0,     0,   312,   313,
       0,     0,   314,   315,   316,   317,   978,   979,     0,   318,
     319,     0,     0,  2299,     0,   320,   321,   322,     0,   323,
     324,   325,     0,   326,     0,     0,     0,     0,     0,     0,
     327,     0,     0,     0,   328,   329,   330,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,     0,   343,   344,   345,     0,   346,     0,   347,   348,
     349,   350,     0,   351,   352,   353,     0,     0,   354,     0,
       0,     0,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,   364,     0,   365,   366,   367,     0,
       0,   368,     0,   369,   370,   371,     0,   372,   373,     0,
       0,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,     0,     0,   386,   387,
     388,   389,     0,     0,     0,   390,     0,     0,     0,   391,
     392,   393,   394,     0,   395,   396,   397,   398,   399,     0,
       0,  4132,  4116,  4133,     0,   400,   401,     0,   402,     0,
       0,   403,     0,     0,   404,   405,     0,     0,   406,     0,
       0,   407,   408,     0,   409,   410,   411,   412,   413,     0,
       0,   414,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   421,   422,   423,     0,     0,   424,   425,     0,   426,
     427,   428,   429,     0,     0,     0,     0,     0,   430,   431,
       0,     0,     0,   432,   433,   434,   435,  2300,   436,   437,
       0,   438,   439,     0,   440,   441,     0,     0,   442,     0,
     443,     0,   444,     0,   445,     0,   446,   447,   448,     0,
       0,     0,     0,     0,     0,   449,     0,     0,   450,     0,
       0,     0,   451,   452,   453,   454,     0,     0,     0,     0,
     455,   456,     0,   457,   458,     0,   138,   459,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,  2485,   154,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,   161,
     162,     0,     0,   163,     0,     0,   164,     0,   165,   166,
       0,   167,     0,   168,   169,   170,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,     0,   183,     0,   184,   185,     0,   186,     0,     0,
     187,     0,     0,   188,     0,     0,     0,     0,     0,     0,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
     193,   194,     0,     0,     0,  2633,   195,     0,   196,     0,
       0,     0,   197,     0,   198,   199,   200,   201,     0,     0,
       0,   202,     0,     0,   203,   204,   205,     0,     0,     0,
     206,     0,   207,   208,     0,   209,   210,   211,  2122,     0,
     212,     0,   213,   214,   215,   216,   217,     0,     0,   218,
     219,   220,     0,   221,     0,   222,   223,     0,   224,   225,
     226,     0,     0,   227,     0,     0,     0,   228,   229,     0,
     230,     0,   231,     0,   232,   233,   234,   235,   236,     0,
     237,     0,     0,     0,   238,   239,     0,   240,     0,     0,
     241,   242,     0,     0,     0,   243,   244,   245,   246,   247,
       0,     0,   248,   249,     0,     0,   250,   251,     0,   252,
       0,     0,     0,   253,   254,     0,     0,     0,   255,     0,
     256,   257,     0,   258,   259,     0,     0,     0,   260,     0,
       0,   261,   262,     0,     0,   263,     0,     0,   264,   265,
     579,     0,     0,     0,     0,   266,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,     0,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,     0,   288,
     289,   290,   291,     0,   292,   293,   294,     0,     0,     0,
     295,   296,   297,   298,   299,     0,     0,   300,   301,     0,
     302,     0,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,     0,     0,   312,   313,     0,     0,   314,   315,
     316,   317,     0,     0,     0,   318,   319,     0,     0,     0,
       0,   320,   321,   322,     0,   323,   324,   325,     0,   326,
       0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
     328,   329,   330,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,     0,   343,   344,
     345,     0,   346,     0,   347,   348,   349,   350,     0,   351,
     352,   353,     0,     0,   354,     0,     0,     0,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
     364,     0,   365,   366,   367,     0,     0,   368,     0,   369,
     370,   371,     0,   372,   373,     0,     0,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,     0,     0,   386,   387,   388,   389,     0,     0,
    2123,   390,     0,     0,     0,   391,   392,   393,   394,     0,
     395,   396,   397,   398,   399,     0,     0,     0,     0,     0,
       0,   400,   401,     0,   402,     0,     0,   403,     0,     0,
     404,   405,     0,     0,   406,     0,     0,   407,   408,     0,
     409,   410,   411,   412,   413,     0,     0,   414,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   421,   422,   423,
       0,   135,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,   432,
     433,   434,   435,     0,   436,   437,     0,   438,   439,     0,
     440,   441,     0,     0,   442,     0,   443,     0,   444,     0,
     445,     0,   446,   447,   448,     0,     0,     0,     0,     0,
       0,   449,     0,     0,   450,     0,     0,     0,   451,   452,
     453,   454,     0,     0,     0,     0,   455,   456,     0,   457,
     458,     0,   138,   459,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
    2641,   154,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
       0,     0,   164,     0,   165,   166,     0,   167,     0,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,   182,     0,   183,     0,
     184,   185,     0,   186,     0,     0,   187,     0,     0,   188,
       0,     0,     0,     0,     0,     0,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,   193,   194,     0,     0,
       0,  2642,   195,     0,   196,     0,     0,     0,   197,     0,
     198,   199,   200,   201,     0,     0,     0,   202,     0,     0,
     203,   204,   205,     0,     0,     0,   206,     0,   207,   208,
       0,   209,   210,   211,     0,     0,   212,     0,   213,   214,
     215,   216,   217,     0,     0,   218,   219,   220,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
       0,     0,     0,   228,   229,     0,   230,     0,   231,     0,
     232,   233,   234,   235,   236,     0,   237,     0,     0,     0,
     238,   239,     0,   240,     0,     0,   241,   242,     0,     0,
       0,   243,   244,   245,   246,   247,     0,     0,   248,   249,
       0,     0,   250,   251,     0,   252,     0,     0,     0,   253,
     254,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,     0,     0,     0,   260,     0,     0,   261,   262,     0,
       0,   263,     0,     0,   264,   265,   579,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,     0,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,   294,     0,     0,     0,   295,   296,   297,   298,
     299,     0,     0,   300,   301,     0,   302,     0,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,     0,     0,
     312,   313,     0,     0,   314,   315,   316,   317,     0,     0,
       0,   318,   319,     0,     0,     0,     0,   320,   321,   322,
       0,   323,   324,   325,     0,   326,     0,     0,     0,     0,
       0,     0,   327,     0,     0,     0,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,     0,   343,   344,   345,     0,   346,     0,
     347,   348,   349,   350,     0,   351,   352,   353,     0,     0,
     354,     0,     0,     0,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,   364,     0,   365,   366,
     367,     0,     0,   368,     0,   369,   370,   371,     0,   372,
     373,     0,     0,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,     0,     0,
     386,   387,   388,   389,     0,     0,     0,   390,     0,     0,
       0,   391,   392,   393,   394,     0,   395,   396,   397,   398,
     399,     0,     0,     0,     0,     0,     0,   400,   401,     0,
     402,     0,     0,   403,     0,     0,   404,   405,     0,     0,
     406,     0,     0,   407,   408,     0,   409,   410,   411,   412,
     413,     0,     0,   414,   415,   416,   417,     0,   418,   419,
       0,   420,     0,   421,   422,   423,     0,   135,   424,   425,
       0,   426,   427,   428,   429,     0,     0,     0,     0,     0,
     430,   431,     0,     0,     0,   432,   433,   434,   435,     0,
     436,   437,     0,   438,   439,     0,   440,   441,     0,     0,
     442,     0,   443,     0,   444,     0,   445,     0,   446,   447,
     448,     0,     0,     0,     0,     0,     0,   449,     0,     0,
     450,     0,     0,     0,   451,   452,   453,   454,     0,     0,
       0,     0,   455,   456,     0,   457,   458,     0,   138,   459,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,  2485,   154,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,   161,   162,     0,     0,   163,     0,     0,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,   182,     0,   183,     0,   184,   185,     0,   186,
       0,     0,   187,     0,     0,   188,     0,     0,     0,     0,
       0,     0,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,   193,   194,     0,     0,     0,  2633,   195,     0,
     196,     0,     0,     0,   197,     0,   198,   199,   200,   201,
       0,     0,     0,   202,     0,     0,   203,   204,   205,     0,
       0,     0,   206,     0,   207,   208,     0,   209,   210,   211,
       0,     0,   212,     0,   213,   214,   215,   216,   217,     0,
       0,   218,   219,   220,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,     0,     0,     0,   228,
     229,     0,   230,     0,   231,     0,   232,   233,   234,   235,
     236,     0,   237,     0,     0,     0,   238,   239,     0,   240,
       0,     0,   241,   242,     0,     0,     0,   243,   244,   245,
     246,   247,     0,     0,   248,   249,     0,     0,   250,   251,
       0,   252,     0,     0,     0,   253,   254,     0,     0,     0,
     255,     0,   256,   257,     0,   258,   259,     0,     0,     0,
     260,     0,     0,   261,   262,     0,     0,   263,     0,     0,
     264,   265,   579,     0,     0,     0,     0,   266,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,     0,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
       0,   288,   289,   290,   291,     0,   292,   293,   294,     0,
       0,     0,   295,   296,   297,   298,   299,     0,     0,   300,
     301,     0,   302,     0,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,     0,     0,   312,   313,     0,     0,
     314,   315,   316,   317,     0,     0,     0,   318,   319,     0,
       0,     0,     0,   320,   321,   322,     0,   323,   324,   325,
       0,   326,     0,     0,     0,     0,     0,     0,   327,     0,
       0,     0,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,     0,
     343,   344,   345,     0,   346,     0,   347,   348,   349,   350,
       0,   351,   352,   353,     0,     0,   354,     0,     0,     0,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,   364,     0,   365,   366,   367,     0,     0,   368,
       0,   369,   370,   371,     0,   372,   373,     0,     0,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,     0,     0,   386,   387,   388,   389,
       0,     0,     0,   390,     0,     0,     0,   391,   392,   393,
     394,     0,   395,   396,   397,   398,   399,     0,     0,     0,
       0,     0,     0,   400,   401,     0,   402,     0,     0,   403,
       0,     0,   404,   405,     0,     0,   406,     0,     0,   407,
     408,     0,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   421,
     422,   423,     0,   135,   424,   425,     0,   426,   427,   428,
     429,     0,     0,     0,     0,     0,   430,   431,     0,     0,
       0,   432,   433,   434,   435,     0,   436,   437,     0,   438,
     439,     0,   440,   441,     0,     0,   442,     0,   443,     0,
     444,     0,   445,     0,   446,   447,   448,     0,     0,     0,
       0,     0,     0,   449,     0,     0,   450,     0,     0,     0,
     451,   452,   453,   454,     0,     0,     0,     0,   455,   456,
       0,   457,   458,     0,   138,   459,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,   161,   162,     0,
       0,   163,     0,     0,   164,     0,   165,   166,     0,   167,
       0,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,   182,     0,
     183,     0,   184,   185,     0,   186,     0,     0,   187,     0,
       0,   188,     0,   938,     0,     0,     0,     0,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,   193,   194,
       0,     0,     0,     0,   195,     0,   196,     0,     0,     0,
     197,     0,   198,   199,   200,   201,     0,     0,     0,   202,
       0,     0,   203,   204,   205,     0,     0,     0,   206,     0,
     207,   208,     0,   209,   210,   211,     0,     0,   212,     0,
     213,   214,   215,   216,   217,     0,     0,   218,   219,   220,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,     0,     0,     0,   228,   229,     0,   230,     0,
     231,     0,   232,   233,   234,   235,   236,     0,   237,     0,
       0,     0,   238,   239,     0,   240,     0,     0,   241,   242,
       0,     0,     0,   243,   244,   245,   246,   247,     0,     0,
     248,   249,     0,     0,   250,   251,     0,   252,     0,     0,
       0,   253,   254,     0,     0,     0,   255,     0,   256,   257,
       0,   258,   259,     0,     0,     0,   260,     0,     0,   261,
     262,     0,     0,   263,     0,     0,   264,   265,   579,     0,
       0,     0,     0,   266,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,     0,     0,     0,     0,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,     0,   288,   289,   290,
     291,     0,   292,   293,   294,     0,     0,     0,   295,   296,
     297,   298,   299,     0,     0,   300,   301,     0,   302,     0,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
       0,     0,   312,   313,     0,     0,   314,   315,   316,   317,
       0,     0,     0,   318,   319,     0,     0,     0,     0,   320,
     321,   322,     0,   323,   324,   325,     0,   326,     0,     0,
       0,     0,     0,     0,   327,     0,     0,     0,   328,   329,
     330,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,     0,   343,   344,   345,     0,
     346,     0,   347,   348,   349,   350,     0,   351,   352,   353,
       0,     0,   354,     0,     0,     0,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,   364,     0,
     365,   366,   367,     0,     0,   368,     0,   369,   370,   371,
       0,   372,   373,     0,     0,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
       0,     0,   386,   387,   388,   389,     0,     0,     0,   390,
       0,     0,     0,   391,   392,   393,   394,     0,   395,   396,
     397,   398,   399,     0,     0,     0,     0,     0,     0,   400,
     401,     0,   402,     0,     0,   403,     0,     0,   404,   405,
       0,     0,   406,     0,     0,   407,   408,     0,   409,   410,
     411,   412,   413,     0,     0,   414,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   421,   422,   423,     0,   135,
     424,   425,     0,   426,   427,   428,   429,     0,     0,     0,
       0,     0,   430,   431,     0,     0,     0,   432,   433,   434,
     435,     0,   436,   437,     0,   438,   439,     0,   440,   441,
       0,     0,   442,     0,   443,     0,   444,     0,   445,     0,
     446,   447,   448,     0,     0,     0,     0,     0,     0,   449,
       0,     0,   450,     0,     0,     0,   451,   452,   453,   454,
       0,     0,     0,     0,   455,   456,     0,   457,   458,     0,
     138,   459,   139,   140,   141,   142,   143,  1293,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,   161,   162,     0,     0,   163,     0,     0,
     164,     0,   165,   166,     0,   167,     0,   168,   169,   170,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,     0,   183,     0,   184,   185,
       0,   186,     0,     0,   187,     0,     0,   188,     0,     0,
       0,     0,     0,     0,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,     0,     0,     0,     0,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,     0,     0,     0,   202,     0,     0,   203,   204,
     205,     0,     0,     0,   206,     0,   207,   208,     0,   209,
     210,   211,     0,     0,   212,     0,   213,   214,   215,   216,
     217,     0,     0,   218,   219,   220,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,     0,     0,
       0,   228,   229,     0,   230,     0,   231,     0,   232,   233,
     234,   235,   236,     0,   237,     0,     0,     0,   238,   239,
       0,   240,     0,     0,   241,   242,     0,     0,     0,   243,
     244,   245,   246,   247,     0,     0,   248,   249,     0,     0,
     250,   251,     0,   252,     0,     0,     0,   253,   254,     0,
       0,     0,   255,     0,   256,   257,     0,   258,   259,     0,
       0,     0,   260,     0,     0,   261,   262,     0,     0,   263,
       0,     0,   264,   265,   579,     0,     0,     0,     0,   266,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
       0,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
     294,     0,     0,     0,   295,   296,   297,   298,   299,     0,
       0,   300,   301,     0,   302,     0,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,     0,     0,   312,   313,
       0,     0,   314,   315,   316,   317,     0,     0,     0,   318,
     319,     0,     0,     0,     0,   320,   321,   322,     0,   323,
     324,   325,     0,   326,     0,     0,     0,     0,     0,     0,
     327,     0,     0,     0,   328,   329,   330,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,     0,   343,   344,   345,     0,   346,     0,   347,   348,
     349,   350,     0,   351,   352,   353,     0,     0,   354,     0,
       0,     0,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,   364,     0,   365,   366,   367,     0,
       0,   368,     0,   369,   370,   371,     0,   372,   373,     0,
       0,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,     0,     0,   386,   387,
     388,   389,     0,     0,     0,   390,     0,     0,     0,   391,
     392,   393,   394,     0,   395,   396,   397,   398,   399,     0,
       0,     0,     0,     0,     0,   400,   401,     0,   402,     0,
       0,   403,     0,     0,   404,   405,     0,     0,   406,     0,
       0,   407,   408,     0,   409,   410,   411,   412,   413,     0,
       0,   414,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   421,   422,   423,     0,   135,   424,   425,     0,   426,
     427,   428,   429,     0,     0,     0,     0,     0,   430,   431,
       0,     0,     0,   432,   433,   434,   435,     0,   436,   437,
       0,   438,   439,     0,   440,   441,     0,     0,   442,     0,
     443,     0,   444,     0,   445,     0,   446,   447,   448,     0,
       0,     0,     0,     0,     0,   449,     0,     0,   450,     0,
       0,     0,   451,   452,   453,   454,     0,     0,     0,     0,
     455,   456,     0,   457,   458,     0,   138,   459,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,   155,   916,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,   161,
     162,     0,     0,   163,     0,     0,   164,     0,   165,   166,
       0,   167,     0,   168,   169,   170,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,     0,   183,     0,   184,   185,     0,   186,     0,     0,
     187,     0,     0,   188,     0,     0,     0,     0,     0,     0,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
     193,   194,     0,     0,     0,     0,   195,     0,   196,     0,
       0,     0,   197,     0,   198,   199,   200,   201,     0,     0,
       0,   202,     0,     0,   203,   204,   205,     0,     0,     0,
     206,     0,   207,   208,     0,   209,   210,   211,     0,     0,
     212,     0,   213,   214,   215,   216,   217,     0,     0,   218,
     219,   220,     0,   221,     0,   222,   223,     0,   224,   225,
     226,     0,     0,   227,     0,     0,     0,   228,   229,     0,
     230,     0,   231,     0,   232,   233,   234,   235,   236,     0,
     237,     0,     0,     0,   238,   239,     0,   240,   917,     0,
     241,   242,     0,     0,     0,   243,   244,   245,   246,   247,
       0,     0,   248,   249,     0,     0,   250,   251,     0,   252,
       0,     0,     0,   253,   254,     0,     0,     0,   255,     0,
     256,   257,     0,   258,   259,     0,     0,     0,   260,     0,
       0,   261,   262,     0,     0,   263,     0,     0,   264,   265,
       0,     0,     0,     0,     0,   266,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,     0,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,     0,   288,
     289,   290,   291,     0,   292,   293,   294,     0,     0,     0,
     295,   296,   297,   298,   299,     0,     0,   300,   301,     0,
     302,     0,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,     0,     0,   312,   313,     0,     0,   314,   315,
     316,   317,     0,     0,     0,   318,   319,     0,     0,     0,
       0,   320,   321,   322,     0,   323,   324,   325,     0,   326,
       0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
     328,   329,   330,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,     0,   343,   344,
     345,     0,   346,     0,   347,   348,   349,   350,     0,   351,
     352,   353,     0,     0,   354,     0,     0,     0,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
     364,     0,   365,   366,   367,     0,     0,   368,     0,   369,
     370,   371,     0,   372,   373,     0,     0,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,     0,     0,   386,   387,   388,   389,     0,     0,
       0,   390,     0,     0,     0,   391,   392,   393,   394,     0,
     395,   396,   397,   398,   399,     0,     0,     0,     0,     0,
       0,   400,   401,     0,   402,     0,     0,   403,     0,     0,
     404,   405,     0,     0,   406,     0,     0,   407,   408,     0,
     409,   410,   411,   412,   413,     0,     0,   414,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   421,   422,   423,
       0,   918,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,   432,
     433,   434,   435,     0,   436,   437,     0,   438,   439,     0,
     440,   441,     0,     0,   442,     0,   443,     0,   444,     0,
     445,     0,   446,   447,   448,     0,     0,     0,     0,     0,
       0,   449,     0,     0,   450,     0,     0,     0,   451,   452,
     453,   454,     0,     0,     0,     0,   455,   456,     0,   457,
     458,     0,   138,   459,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
    2485,   154,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
       0,     0,   164,     0,   165,   166,     0,   167,     0,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,   182,     0,   183,     0,
     184,   185,     0,   186,     0,     0,   187,     0,     0,   188,
       0,     0,     0,     0,     0,     0,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,   193,   194,     0,     0,
       0,     0,   195,     0,   196,     0,     0,     0,   197,     0,
     198,   199,   200,   201,     0,     0,     0,   202,     0,     0,
     203,   204,   205,     0,     0,     0,   206,     0,   207,   208,
       0,   209,   210,   211,     0,     0,   212,     0,   213,   214,
     215,   216,   217,     0,     0,   218,   219,   220,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
       0,     0,     0,   228,   229,     0,   230,     0,   231,     0,
     232,   233,   234,   235,   236,     0,   237,     0,     0,     0,
     238,   239,     0,   240,     0,     0,   241,   242,     0,     0,
       0,   243,   244,   245,   246,   247,     0,     0,   248,   249,
       0,     0,   250,   251,     0,   252,     0,     0,     0,   253,
     254,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,     0,     0,     0,   260,     0,     0,   261,   262,     0,
       0,   263,     0,     0,   264,   265,   579,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,     0,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,   294,     0,     0,     0,   295,   296,   297,   298,
     299,     0,     0,   300,   301,     0,   302,     0,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,     0,     0,
     312,   313,     0,     0,   314,   315,   316,   317,     0,     0,
       0,   318,   319,     0,     0,     0,     0,   320,   321,   322,
       0,   323,   324,   325,     0,   326,     0,     0,     0,     0,
       0,     0,   327,     0,     0,     0,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,     0,   343,   344,   345,     0,   346,     0,
     347,   348,   349,   350,     0,   351,   352,   353,     0,     0,
     354,     0,     0,     0,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,   364,     0,   365,   366,
     367,     0,     0,   368,     0,   369,   370,   371,     0,   372,
     373,     0,     0,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,     0,     0,
     386,   387,   388,   389,     0,     0,     0,   390,     0,     0,
       0,   391,   392,   393,   394,     0,   395,   396,   397,   398,
     399,     0,     0,     0,     0,     0,     0,   400,   401,     0,
     402,     0,     0,   403,     0,     0,   404,   405,     0,     0,
     406,     0,     0,   407,   408,     0,   409,   410,   411,   412,
     413,     0,     0,   414,   415,   416,   417,     0,   418,   419,
       0,   420,     0,   421,   422,   423,     0,   135,   424,   425,
       0,   426,   427,   428,   429,     0,     0,     0,     0,     0,
     430,   431,     0,     0,     0,   432,   433,   434,   435,     0,
     436,   437,     0,   438,   439,     0,   440,   441,     0,     0,
     442,     0,   443,     0,   444,     0,   445,     0,   446,   447,
     448,     0,     0,     0,     0,     0,     0,   449,     0,     0,
     450,     0,     0,     0,   451,   452,   453,   454,     0,     0,
       0,     0,   455,   456,     0,   457,   458,     0,   138,   459,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,   161,   162,     0,     0,   163,     0,     0,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,   182,     0,   183,     0,   184,   185,     0,   186,
       0,     0,   187,     0,     0,   188,     0,     0,     0,     0,
       0,     0,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,   193,   194,     0,     0,     0,  2680,   195,     0,
     196,     0,     0,     0,   197,     0,   198,   199,   200,   201,
       0,     0,     0,   202,     0,     0,   203,   204,   205,     0,
       0,     0,   206,     0,   207,   208,     0,   209,   210,   211,
       0,     0,   212,     0,   213,   214,   215,   216,   217,     0,
       0,   218,   219,   220,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,     0,     0,     0,   228,
     229,     0,   230,     0,   231,     0,   232,   233,   234,   235,
     236,     0,   237,     0,     0,     0,   238,   239,     0,   240,
       0,     0,   241,   242,     0,     0,     0,   243,   244,   245,
     246,   247,     0,     0,   248,   249,     0,     0,   250,   251,
       0,   252,     0,     0,     0,   253,   254,     0,     0,     0,
     255,     0,   256,   257,     0,   258,   259,     0,     0,     0,
     260,     0,     0,   261,   262,     0,     0,   263,     0,     0,
     264,   265,   579,     0,     0,     0,     0,   266,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,     0,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
       0,   288,   289,   290,   291,     0,   292,   293,   294,     0,
       0,     0,   295,   296,   297,   298,   299,     0,     0,   300,
     301,     0,   302,     0,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,     0,     0,   312,   313,     0,     0,
     314,   315,   316,   317,     0,     0,     0,   318,   319,     0,
       0,     0,     0,   320,   321,   322,     0,   323,   324,   325,
       0,   326,     0,     0,     0,     0,     0,     0,   327,     0,
       0,     0,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,     0,
     343,   344,   345,     0,   346,     0,   347,   348,   349,   350,
       0,   351,   352,   353,     0,     0,   354,     0,     0,     0,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,   364,     0,   365,   366,   367,     0,     0,   368,
       0,   369,   370,   371,     0,   372,   373,     0,     0,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,     0,     0,   386,   387,   388,   389,
       0,     0,     0,   390,     0,     0,     0,   391,   392,   393,
     394,     0,   395,   396,   397,   398,   399,     0,     0,     0,
       0,     0,     0,   400,   401,     0,   402,     0,     0,   403,
       0,     0,   404,   405,     0,     0,   406,     0,     0,   407,
     408,     0,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   421,
     422,   423,     0,   135,   424,   425,     0,   426,   427,   428,
     429,     0,     0,     0,     0,     0,   430,   431,     0,     0,
       0,   432,   433,   434,   435,     0,   436,   437,     0,   438,
     439,     0,   440,   441,     0,     0,   442,     0,   443,     0,
     444,     0,   445,     0,   446,   447,   448,     0,     0,     0,
       0,     0,     0,   449,     0,     0,   450,     0,     0,     0,
     451,   452,   453,   454,     0,     0,     0,     0,   455,   456,
       0,   457,   458,     0,   138,   459,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,   161,   162,     0,
       0,   163,     0,     0,   164,     0,   165,   166,     0,   167,
       0,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,   182,     0,
     183,     0,   184,   185,     0,   186,     0,     0,   187,     0,
       0,   188,     0,     0,     0,     0,     0,     0,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,   193,   194,
       0,     0,     0,     0,   195,     0,   196,     0,     0,     0,
     197,     0,   198,   199,   200,   201,     0,     0,     0,   202,
       0,     0,   203,   204,   205,     0,     0,     0,   206,     0,
     207,   208,     0,   209,   210,   211,     0,     0,   212,     0,
     213,   214,   215,   216,   217,     0,     0,   218,   219,   220,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,     0,     0,     0,   228,   229,     0,   230,     0,
     231,     0,   232,   233,   234,   235,   236,     0,   237,     0,
       0,     0,   238,   239,     0,   240,     0,     0,   241,   242,
       0,     0,     0,   243,   244,   245,   246,   247,     0,     0,
     248,   249,     0,     0,   250,   251,     0,   252,     0,     0,
       0,   253,   254,     0,     0,     0,   255,     0,   256,   257,
       0,   258,   259,     0,     0,     0,   260,     0,     0,   261,
     262,     0,     0,   263,     0,     0,   264,   265,   579,     0,
       0,     0,     0,   266,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,     0,     0,     0,     0,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,     0,   288,   289,   290,
     291,     0,   292,   293,   294,     0,     0,     0,   295,   296,
     297,   298,   299,     0,     0,   300,   301,     0,   302,     0,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
       0,     0,   312,   313,     0,     0,   314,   315,   316,   317,
       0,     0,     0,   318,   319,     0,     0,     0,     0,   320,
     321,   322,     0,   323,   324,   325,     0,   326,     0,     0,
       0,     0,     0,     0,   327,     0,     0,     0,   328,   329,
     330,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,     0,   343,   344,   345,     0,
     346,     0,   347,   348,   349,   350,     0,   351,   352,   353,
       0,     0,   354,     0,     0,     0,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,   364,     0,
     365,   366,   367,     0,     0,   368,     0,   369,   370,   371,
       0,   372,   373,     0,     0,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
       0,     0,   386,   387,   388,   389,     0,     0,     0,   390,
       0,     0,     0,   391,   392,   393,   394,     0,   395,   396,
     397,   398,   399,     0,     0,     0,     0,     0,     0,   400,
     401,     0,   402,     0,     0,   403,     0,     0,   404,   405,
       0,     0,   406,     0,     0,   407,   408,     0,   409,   410,
     411,   412,   413,     0,     0,   414,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   421,   422,   423,     0,   135,
     424,   425,     0,   426,   427,   428,   429,     0,     0,     0,
       0,     0,   430,   431,     0,     0,     0,   432,   433,   434,
     435,     0,   436,   437,     0,   438,   439,     0,   440,   441,
       0,     0,   442,     0,   443,     0,   444,     0,   445,     0,
     446,   447,   448,     0,     0,     0,     0,     0,     0,   449,
       0,     0,   450,     0,     0,     0,   451,   452,   453,   454,
       0,     0,     0,     0,   455,   456,     0,   457,   458,     0,
     138,   459,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,  2621,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,   161,   162,     0,     0,   163,     0,     0,
     164,     0,   165,   166,     0,   167,     0,   168,   169,   170,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,     0,   183,     0,   184,   185,
       0,   186,     0,     0,   187,     0,     0,   188,     0,     0,
       0,     0,     0,     0,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,     0,     0,     0,     0,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,     0,     0,     0,   202,     0,     0,   203,   204,
     205,     0,     0,     0,   206,     0,   207,   208,     0,   209,
     210,   211,     0,     0,   212,     0,   213,   214,   215,   216,
     217,     0,     0,   218,   219,   220,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,     0,     0,
       0,   228,   229,     0,   230,     0,   231,     0,   232,   233,
     234,   235,   236,     0,   237,     0,     0,     0,   238,   239,
       0,   240,     0,     0,   241,   242,     0,     0,     0,   243,
     244,   245,   246,   247,     0,     0,   248,   249,     0,     0,
     250,   251,     0,   252,     0,     0,     0,   253,   254,     0,
       0,     0,   255,     0,   256,   257,     0,   258,   259,     0,
       0,     0,   260,     0,     0,   261,   262,     0,     0,   263,
       0,     0,   264,   265,     0,     0,     0,     0,     0,   266,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
       0,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
     294,     0,     0,     0,   295,   296,   297,   298,   299,     0,
       0,   300,   301,     0,   302,     0,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,     0,     0,   312,   313,
       0,     0,   314,   315,   316,   317,     0,     0,     0,   318,
     319,     0,     0,     0,     0,   320,   321,   322,     0,   323,
     324,   325,     0,   326,     0,     0,     0,     0,     0,     0,
     327,     0,     0,     0,   328,   329,   330,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,     0,   343,   344,   345,     0,   346,     0,   347,   348,
     349,   350,     0,   351,   352,   353,     0,     0,   354,     0,
       0,     0,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,   364,     0,   365,   366,   367,     0,
       0,   368,     0,   369,   370,   371,     0,   372,   373,     0,
       0,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,     0,     0,   386,   387,
     388,   389,     0,     0,     0,   390,     0,     0,     0,   391,
     392,   393,   394,     0,   395,   396,   397,   398,   399,     0,
       0,     0,     0,     0,     0,   400,   401,     0,   402,     0,
       0,   403,     0,     0,   404,   405,     0,     0,   406,     0,
       0,   407,   408,     0,   409,   410,   411,   412,   413,     0,
       0,   414,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   421,   422,   423,     0,   135,   424,   425,     0,   426,
     427,   428,   429,     0,     0,     0,     0,     0,   430,   431,
       0,     0,     0,   432,   433,   434,   435,     0,   436,   437,
       0,   438,   439,     0,   440,   441,     0,     0,   442,     0,
     443,     0,   444,     0,   445,     0,   446,   447,   448,     0,
       0,     0,     0,     0,     0,   449,     0,     0,   450,     0,
       0,     0,   451,   452,   453,   454,     0,     0,     0,     0,
     455,   456,     0,   457,   458,     0,   138,   459,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,   161,
     162,     0,     0,   163,     0,     0,   164,     0,   165,   166,
       0,   167,     0,   168,   169,   170,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,     0,   183,     0,   184,   185,  4049,   186,     0,     0,
     187,     0,     0,   188,     0,     0,     0,     0,     0,     0,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
     193,   194,     0,     0,     0,     0,   195,     0,   196,     0,
       0,     0,   197,     0,   198,   199,   200,   201,     0,     0,
       0,   202,     0,     0,   203,   204,   205,     0,     0,     0,
     206,     0,   207,   208,     0,   209,   210,   211,     0,     0,
     212,     0,   213,   214,   215,   216,   217,     0,  4050,   218,
     219,   220,     0,   221,     0,   222,   223,     0,   224,   225,
     226,     0,     0,   227,     0,     0,     0,   228,   229,     0,
     230,     0,   231,     0,   232,   233,   234,   235,   236,     0,
     237,     0,     0,     0,   238,   239,     0,   240,     0,     0,
     241,   242,     0,     0,     0,   243,   244,   245,   246,   247,
       0,     0,   248,   249,     0,     0,   250,   251,     0,   252,
       0,     0,     0,   253,   254,     0,     0,     0,   255,     0,
     256,   257,     0,   258,   259,     0,     0,     0,   260,     0,
       0,   261,   262,     0,     0,   263,     0,     0,   264,   265,
       0,     0,     0,     0,     0,   266,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,     0,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,     0,   288,
     289,   290,   291,     0,   292,   293,   294,     0,     0,     0,
     295,   296,   297,   298,   299,     0,     0,   300,   301,     0,
     302,     0,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,     0,     0,   312,   313,     0,     0,   314,   315,
     316,   317,     0,     0,     0,   318,   319,     0,     0,     0,
       0,   320,   321,   322,     0,   323,   324,   325,     0,   326,
       0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
     328,   329,   330,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,     0,   343,   344,
     345,     0,   346,     0,   347,   348,   349,   350,     0,   351,
     352,   353,     0,     0,   354,     0,     0,     0,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
     364,     0,   365,   366,   367,     0,     0,   368,     0,   369,
     370,   371,     0,   372,   373,     0,     0,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,     0,     0,   386,   387,   388,   389,     0,     0,
       0,   390,     0,     0,     0,   391,   392,   393,   394,     0,
     395,   396,   397,   398,   399,     0,     0,     0,     0,     0,
       0,   400,   401,     0,   402,     0,     0,   403,     0,     0,
     404,   405,     0,     0,   406,     0,     0,   407,   408,     0,
     409,   410,   411,   412,   413,     0,     0,   414,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,   432,
     433,   434,   435,     0,   436,   437,     0,   438,   439,     0,
     440,   441,     0,     0,   442,     0,   443,     0,   444,     0,
     445,     0,   446,   447,   448,     0,     0,     0,     0,     0,
       0,   449,     0,     0,   450,     0,     0,     0,   451,   452,
     453,   454,     0,     0,     0,     0,   455,   456,     0,   457,
     458,     0,   138,   459,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
       0,     0,   164,     0,   165,   166,     0,   167,     0,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,   182,     0,   183,     0,
     184,   185,     0,   186,     0,     0,   187,     0,     0,   188,
       0,     0,     0,     0,     0,     0,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,   193,   194,     0,     0,
       0,     0,   195,     0,   196,     0,     0,     0,   197,     0,
     198,   199,   200,   201,     0,     0,     0,   202,     0,     0,
     203,   204,   205,     0,     0,     0,   206,     0,   207,   208,
       0,   209,   210,   211,     0,     0,   212,     0,   213,   214,
     215,   216,   217,     0,     0,   218,   219,   220,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
       0,     0,     0,   228,   229,  1012,   230,     0,   231,     0,
     232,   233,   234,   235,   236,     0,   237,     0,     0,     0,
     238,   239,     0,   240,     0,     0,   241,   242,     0,     0,
       0,   243,   244,   245,   246,   247,     0,     0,   248,   249,
       0,     0,   250,   251,     0,   252,     0,     0,     0,   253,
     254,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,     0,     0,     0,   260,     0,     0,   261,   262,     0,
       0,   263,     0,     0,   264,   265,     0,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,     0,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,   294,     0,     0,     0,   295,   296,   297,   298,
     299,     0,     0,   300,   301,     0,   302,     0,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,     0,     0,
     312,   313,     0,     0,   314,   315,   316,   317,     0,     0,
       0,   318,   319,     0,     0,     0,     0,   320,   321,   322,
       0,   323,   324,   325,     0,   326,     0,     0,     0,     0,
       0,     0,   327,     0,     0,     0,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,     0,   343,   344,   345,     0,   346,     0,
     347,   348,   349,   350,     0,   351,   352,   353,     0,     0,
     354,     0,     0,     0,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,   364,     0,   365,   366,
     367,     0,     0,   368,     0,   369,   370,   371,     0,   372,
     373,     0,     0,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,     0,     0,
     386,   387,   388,   389,     0,     0,     0,   390,     0,     0,
       0,   391,   392,   393,   394,     0,   395,   396,   397,   398,
     399,     0,     0,     0,     0,     0,     0,   400,   401,     0,
     402,     0,     0,   403,     0,     0,   404,   405,     0,     0,
     406,     0,     0,   407,   408,     0,   409,   410,   411,   412,
     413,     0,     0,   414,   415,   416,   417,     0,   418,   419,
       0,   420,     0,   421,   422,   423,     0,     0,   424,   425,
       0,   426,   427,   428,   429,     0,     0,     0,     0,     0,
     430,   431,     0,     0,     0,   432,   433,   434,   435,     0,
     436,   437,     0,   438,   439,     0,   440,   441,     0,     0,
     442,     0,   443,     0,   444,     0,   445,     0,   446,   447,
     448,     0,     0,     0,     0,     0,     0,   449,     0,     0,
     450,     0,     0,     0,   451,   452,   453,   454,     0,     0,
       0,     0,   455,   456,     0,   457,   458,     0,   138,   459,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,   161,   162,     0,     0,   163,     0,     0,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,   182,     0,   183,     0,   184,   185,     0,   186,
       0,     0,   187,     0,     0,   188,     0,     0,     0,     0,
       0,     0,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,   193,   194,     0,     0,     0,  1396,   195,     0,
     196,     0,     0,     0,   197,     0,   198,   199,   200,   201,
       0,     0,     0,   202,     0,     0,   203,   204,   205,     0,
       0,     0,   206,     0,   207,   208,     0,   209,   210,   211,
       0,     0,   212,     0,   213,   214,   215,   216,   217,     0,
       0,   218,   219,   220,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,     0,     0,     0,   228,
     229,     0,   230,     0,   231,     0,   232,   233,   234,   235,
     236,     0,   237,     0,     0,     0,   238,   239,     0,   240,
       0,     0,   241,   242,     0,     0,     0,   243,   244,   245,
     246,   247,     0,     0,   248,   249,     0,     0,   250,   251,
       0,   252,     0,     0,     0,   253,   254,     0,     0,     0,
     255,     0,   256,   257,     0,   258,   259,     0,     0,     0,
     260,     0,     0,   261,   262,     0,     0,   263,     0,     0,
     264,   265,     0,     0,     0,     0,     0,   266,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,     0,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
       0,   288,   289,   290,   291,     0,   292,   293,   294,     0,
       0,     0,   295,   296,   297,   298,   299,     0,     0,   300,
     301,     0,   302,     0,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,     0,     0,   312,   313,     0,     0,
     314,   315,   316,   317,     0,     0,     0,   318,   319,     0,
       0,     0,     0,   320,   321,   322,     0,   323,   324,   325,
       0,   326,     0,     0,     0,     0,     0,     0,   327,     0,
       0,     0,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,     0,
     343,   344,   345,     0,   346,     0,   347,   348,   349,   350,
       0,   351,   352,   353,     0,     0,   354,     0,     0,     0,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,   364,     0,   365,   366,   367,     0,     0,   368,
       0,   369,   370,   371,     0,   372,   373,     0,     0,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,     0,     0,   386,   387,   388,   389,
       0,     0,     0,   390,     0,     0,     0,   391,   392,   393,
     394,     0,   395,   396,   397,   398,   399,     0,     0,     0,
       0,     0,     0,   400,   401,     0,   402,     0,     0,   403,
       0,     0,   404,   405,     0,     0,   406,     0,     0,   407,
     408,     0,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   421,
     422,   423,     0,     0,   424,   425,     0,   426,   427,   428,
     429,     0,     0,     0,     0,     0,   430,   431,     0,     0,
       0,   432,   433,   434,   435,     0,   436,   437,     0,   438,
     439,     0,   440,   441,     0,     0,   442,     0,   443,     0,
     444,     0,   445,     0,   446,   447,   448,     0,     0,     0,
       0,     0,     0,   449,     0,     0,   450,     0,     0,     0,
     451,   452,   453,   454,     0,     0,     0,     0,   455,   456,
       0,   457,   458,     0,   138,   459,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,   161,   162,     0,
       0,   163,     0,     0,   164,     0,   165,   166,     0,   167,
       0,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,   182,     0,
     183,     0,   184,   185,     0,   186,     0,     0,   187,     0,
       0,   188,     0,     0,     0,     0,     0,     0,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,   193,   194,
       0,     0,     0,  2219,   195,     0,   196,     0,     0,     0,
     197,     0,   198,   199,   200,   201,     0,     0,     0,   202,
       0,     0,   203,   204,   205,     0,     0,     0,   206,     0,
     207,   208,     0,   209,   210,   211,     0,     0,   212,     0,
     213,   214,   215,   216,   217,     0,     0,   218,   219,   220,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,     0,     0,     0,   228,   229,     0,   230,     0,
     231,     0,   232,   233,   234,   235,   236,     0,   237,     0,
       0,     0,   238,   239,     0,   240,     0,     0,   241,   242,
       0,     0,     0,   243,   244,   245,   246,   247,     0,     0,
     248,   249,     0,     0,   250,   251,     0,   252,     0,     0,
       0,   253,   254,     0,     0,     0,   255,     0,   256,   257,
       0,   258,   259,     0,     0,     0,   260,     0,     0,   261,
     262,     0,     0,   263,     0,     0,   264,   265,     0,     0,
       0,     0,     0,   266,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,     0,     0,     0,     0,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,     0,   288,   289,   290,
     291,     0,   292,   293,   294,     0,     0,     0,   295,   296,
     297,   298,   299,     0,     0,   300,   301,     0,   302,     0,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
       0,     0,   312,   313,     0,     0,   314,   315,   316,   317,
       0,     0,     0,   318,   319,     0,     0,     0,     0,   320,
     321,   322,     0,   323,   324,   325,     0,   326,     0,     0,
       0,     0,     0,     0,   327,     0,     0,     0,   328,   329,
     330,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,     0,   343,   344,   345,     0,
     346,     0,   347,   348,   349,   350,     0,   351,   352,   353,
       0,     0,   354,     0,     0,     0,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,   364,     0,
     365,   366,   367,     0,     0,   368,     0,   369,   370,   371,
       0,   372,   373,     0,     0,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
       0,     0,   386,   387,   388,   389,     0,     0,     0,   390,
       0,     0,     0,   391,   392,   393,   394,     0,   395,   396,
     397,   398,   399,     0,     0,     0,     0,     0,     0,   400,
     401,     0,   402,     0,     0,   403,     0,     0,   404,   405,
       0,     0,   406,     0,     0,   407,   408,     0,   409,   410,
     411,   412,   413,     0,     0,   414,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   421,   422,   423,     0,     0,
     424,   425,     0,   426,   427,   428,   429,     0,     0,     0,
       0,     0,  2220,   431,     0,     0,     0,   432,   433,   434,
     435,     0,   436,   437,     0,   438,   439,     0,   440,   441,
       0,     0,   442,     0,   443,     0,   444,     0,   445,     0,
     446,   447,   448,     0,     0,     0,     0,     0,     0,   449,
       0,     0,   450,     0,     0,     0,   451,   452,   453,   454,
       0,     0,     0,     0,   455,   456,     0,   457,   458,     0,
     138,   459,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,   161,   162,     0,     0,   163,     0,     0,
     164,     0,   165,   166,     0,   167,     0,   168,   169,   170,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,     0,   183,     0,   184,   185,
       0,   186,     0,     0,   187,     0,     0,   188,     0,     0,
       0,     0,     0,     0,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,     0,     0,     0,     0,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,     0,     0,     0,   202,     0,     0,   203,   204,
     205,     0,     0,     0,   206,     0,   207,   208,     0,   209,
     210,   211,     0,     0,   212,     0,   213,   214,   215,   216,
     217,     0,     0,   218,   219,   220,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,     0,     0,
       0,   228,   229,     0,   230,     0,   231,     0,   232,   233,
     234,   235,   236,     0,   237,     0,     0,     0,   238,   239,
       0,   240,     0,     0,   241,   242,     0,     0,     0,   243,
     244,   245,   246,   247,     0,     0,   248,   249,     0,     0,
     250,   251,     0,   252,     0,     0,     0,   253,   254,     0,
       0,     0,   255,     0,   256,   257,     0,   258,   259,     0,
       0,     0,   260,     0,     0,   261,   262,     0,     0,   263,
       0,     0,   264,   265,     0,     0,     0,     0,     0,   266,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
       0,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
     294,     0,     0,     0,   295,   296,   297,   298,   299,     0,
       0,   300,   301,     0,   302,     0,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,     0,     0,   312,   313,
       0,     0,   314,   315,   316,   317,     0,     0,     0,   318,
     319,     0,     0,     0,     0,   320,   321,   322,     0,   323,
     324,   325,     0,   326,     0,     0,     0,     0,     0,     0,
     327,     0,     0,     0,   328,   329,   330,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,     0,   343,   344,   345,  2391,   346,     0,   347,   348,
     349,   350,     0,   351,   352,   353,     0,     0,   354,     0,
       0,     0,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,   364,     0,   365,   366,   367,     0,
       0,   368,     0,   369,   370,   371,     0,   372,   373,     0,
       0,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,     0,     0,   386,   387,
     388,   389,     0,     0,     0,   390,     0,     0,     0,   391,
     392,   393,   394,     0,   395,   396,   397,   398,   399,     0,
       0,     0,     0,     0,     0,   400,   401,     0,   402,     0,
       0,   403,     0,     0,   404,   405,     0,     0,   406,     0,
       0,   407,   408,     0,   409,   410,   411,   412,   413,     0,
       0,   414,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   421,   422,   423,     0,     0,   424,   425,     0,   426,
     427,   428,   429,     0,     0,     0,     0,     0,   430,   431,
       0,     0,     0,   432,   433,   434,   435,     0,   436,   437,
       0,   438,   439,     0,   440,   441,     0,     0,   442,     0,
     443,     0,   444,     0,   445,     0,   446,   447,   448,     0,
       0,     0,     0,     0,     0,   449,     0,     0,   450,     0,
       0,     0,   451,   452,   453,   454,     0,     0,     0,     0,
     455,   456,     0,   457,   458,     0,   138,   459,   139,   140,
     141,   142,   143,  2720,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,   161,
     162,     0,     0,   163,     0,     0,   164,     0,   165,   166,
       0,   167,     0,   168,   169,   170,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,     0,   183,     0,   184,   185,     0,   186,     0,     0,
     187,     0,     0,   188,     0,     0,     0,     0,     0,     0,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
     193,   194,     0,     0,     0,     0,   195,     0,   196,     0,
       0,     0,   197,     0,   198,   199,   200,   201,     0,     0,
       0,   202,     0,     0,   203,   204,   205,     0,     0,     0,
     206,     0,   207,   208,     0,   209,   210,   211,     0,     0,
     212,     0,   213,   214,   215,   216,   217,     0,     0,   218,
     219,   220,     0,   221,     0,   222,   223,     0,   224,   225,
     226,     0,     0,   227,     0,     0,     0,   228,   229,     0,
     230,     0,   231,     0,   232,   233,   234,   235,   236,     0,
     237,     0,     0,     0,   238,   239,     0,   240,     0,     0,
     241,   242,     0,     0,     0,   243,   244,   245,   246,   247,
       0,     0,   248,   249,     0,     0,   250,   251,     0,   252,
       0,     0,     0,   253,   254,     0,     0,     0,   255,     0,
     256,   257,     0,   258,   259,     0,     0,     0,   260,     0,
       0,   261,   262,     0,     0,   263,     0,     0,   264,   265,
       0,     0,     0,     0,     0,   266,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,     0,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,     0,   288,
     289,   290,   291,     0,   292,   293,   294,     0,     0,     0,
     295,   296,   297,   298,   299,     0,     0,   300,   301,     0,
     302,     0,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,     0,     0,   312,   313,     0,     0,   314,   315,
     316,   317,     0,     0,     0,   318,   319,     0,     0,     0,
       0,   320,   321,   322,     0,   323,   324,   325,     0,   326,
       0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
     328,   329,   330,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,     0,   343,   344,
     345,     0,   346,     0,   347,   348,   349,   350,     0,   351,
     352,   353,     0,     0,   354,     0,     0,     0,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
     364,     0,   365,   366,   367,     0,     0,   368,     0,   369,
     370,   371,     0,   372,   373,     0,     0,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,     0,   384,
     385,     0,     0,     0,   386,   387,   388,   389,     0,     0,
       0,   390,     0,     0,     0,   391,   392,   393,   394,     0,
     395,   396,   397,   398,   399,     0,     0,     0,     0,     0,
       0,   400,   401,     0,   402,     0,     0,   403,     0,     0,
     404,   405,     0,     0,   406,     0,     0,   407,   408,     0,
     409,   410,   411,   412,   413,     0,     0,   414,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,   432,
     433,   434,   435,     0,   436,   437,     0,   438,   439,     0,
     440,   441,     0,     0,   442,     0,   443,     0,   444,     0,
     445,     0,   446,   447,   448,     0,     0,     0,     0,     0,
       0,   449,     0,     0,   450,     0,     0,     0,   451,   452,
     453,   454,     0,     0,     0,     0,   455,   456,     0,   457,
     458,     0,   138,   459,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,   161,   162,     0,     0,   163,
       0,     0,   164,     0,   165,   166,     0,   167,     0,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,   182,     0,   183,     0,
     184,   185,     0,   186,     0,     0,   187,     0,     0,   188,
       0,     0,     0,     0,     0,     0,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,   193,   194,     0,     0,
       0,     0,   195,     0,   196,     0,     0,     0,   197,     0,
     198,   199,   200,   201,     0,     0,     0,   202,     0,     0,
     203,   204,   205,     0,     0,     0,   206,     0,   207,   208,
       0,   209,   210,   211,     0,     0,   212,     0,   213,   214,
     215,   216,   217,     0,     0,   218,   219,   220,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
       0,     0,     0,   228,   229,     0,   230,     0,   231,     0,
     232,   233,   234,   235,   236,     0,   237,     0,     0,     0,
     238,   239,     0,   240,     0,     0,   241,   242,     0,     0,
       0,   243,   244,   245,   246,   247,     0,     0,   248,   249,
       0,     0,   250,   251,     0,   252,     0,     0,     0,   253,
     254,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,     0,     0,     0,   260,     0,     0,   261,   262,     0,
       0,   263,     0,     0,   264,   265,     0,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,     0,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,   294,     0,     0,     0,   295,   296,   297,   298,
     299,     0,     0,   300,   301,     0,   302,     0,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,     0,     0,
     312,   313,     0,     0,   314,   315,   316,   317,     0,     0,
       0,   318,   319,     0,     0,     0,     0,   320,   321,   322,
       0,   323,   324,   325,     0,   326,     0,     0,     0,     0,
       0,     0,   327,     0,     0,     0,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,     0,   343,   344,   345,     0,   346,     0,
     347,   348,   349,   350,     0,   351,   352,   353,     0,     0,
     354,     0,     0,     0,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,   364,     0,   365,   366,
     367,     0,     0,   368,     0,   369,   370,   371,     0,   372,
     373,     0,     0,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,     0,   384,   385,     0,     0,     0,
     386,   387,   388,   389,     0,     0,     0,   390,     0,     0,
       0,   391,   392,   393,   394,     0,   395,   396,   397,   398,
     399,     0,     0,     0,     0,     0,     0,   400,   401,     0,
     402,     0,     0,   403,     0,     0,   404,   405,     0,     0,
     406,     0,     0,   407,   408,     0,   409,   410,   411,   412,
     413,     0,     0,   414,   415,   416,   417,     0,   418,   419,
       0,   420,     0,   421,   422,   423,     0,   135,   424,   425,
       0,   426,   427,   428,   429,     0,     0,     0,     0,     0,
     430,   431,     0,     0,     0,   432,   433,   434,   435,     0,
     436,   437,     0,   438,   439,     0,   440,   441,     0,     0,
     442,     0,   443,     0,   444,     0,   445,     0,   446,   447,
     448,     0,     0,     0,     0,     0,     0,   449,     0,     0,
     450,     0,     0,     0,   451,   452,   453,   454,     0,     0,
       0,     0,   455,   456,     0,   457,   458,     0,   138,   459,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,   161,   162,     0,     0,   163,     0,     0,   164,     0,
     165,   166,     0,   167,     0,   168,   169,   170,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,   182,     0,   183,     0,   184,   185,     0,   186,
       0,     0,   187,     0,     0,   188,     0,     0,     0,     0,
       0,     0,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,   193,   194,     0,     0,     0,  2219,   195,     0,
     196,     0,     0,     0,   197,     0,   198,   199,   200,   201,
       0,     0,     0,   202,     0,     0,   203,   204,   205,     0,
       0,     0,   206,     0,   207,   208,     0,   209,   210,   211,
       0,     0,   212,     0,   213,   214,   215,   216,   217,     0,
       0,   218,   219,   220,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,     0,     0,     0,   228,
     229,     0,   230,     0,   231,     0,   232,   233,   234,   235,
     236,     0,   237,     0,     0,     0,   238,   239,     0,   240,
       0,     0,   241,   242,     0,     0,     0,   243,   244,   245,
     246,   247,     0,     0,   248,   249,     0,     0,   250,   251,
       0,   252,     0,     0,     0,   253,   254,     0,     0,     0,
     255,     0,   256,   257,     0,   258,   259,     0,     0,     0,
     260,     0,     0,   261,   262,     0,     0,   263,     0,     0,
     264,   265,     0,     0,     0,     0,     0,   266,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,     0,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
       0,   288,   289,   290,   291,     0,   292,   293,   294,     0,
       0,     0,   295,   296,   297,   298,   299,     0,     0,   300,
     301,     0,   302,     0,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,     0,     0,   312,   313,     0,     0,
     314,   315,   316,   317,     0,     0,     0,   318,   319,     0,
       0,     0,     0,   320,   321,   322,     0,   323,   324,   325,
       0,   326,     0,     0,     0,     0,     0,     0,   327,     0,
       0,     0,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,     0,
     343,   344,   345,     0,   346,     0,   347,   348,   349,   350,
       0,   351,   352,   353,     0,     0,   354,     0,     0,     0,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,   364,     0,   365,   366,   367,     0,     0,   368,
       0,   369,   370,   371,     0,   372,   373,     0,     0,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
       0,   384,   385,     0,     0,     0,   386,   387,   388,   389,
       0,     0,     0,   390,     0,     0,     0,   391,   392,   393,
     394,     0,   395,   396,   397,   398,   399,     0,     0,     0,
       0,     0,     0,   400,   401,     0,   402,     0,     0,   403,
       0,     0,   404,   405,     0,     0,   406,     0,     0,   407,
     408,     0,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   421,
     422,   423,     0,     0,   424,   425,     0,   426,   427,   428,
     429,     0,     0,     0,     0,     0,   430,   431,     0,     0,
       0,   432,   433,   434,   435,     0,   436,   437,     0,   438,
     439,     0,   440,   441,     0,     0,   442,     0,   443,     0,
     444,     0,   445,     0,   446,   447,   448,     0,     0,     0,
       0,     0,     0,   449,     0,     0,   450,     0,     0,     0,
     451,   452,   453,   454,     0,     0,     0,     0,   455,   456,
       0,   457,   458,     0,   138,   459,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,   161,   162,     0,
       0,   163,     0,     0,   164,     0,   165,   166,     0,   167,
       0,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,   182,     0,
     183,     0,   184,   185,     0,   186,     0,     0,   187,     0,
       0,   188,     0,     0,     0,     0,     0,     0,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,   193,   194,
       0,     0,     0,     0,   195,     0,   196,     0,     0,     0,
     197,     0,   198,   199,   200,   201,     0,     0,     0,   202,
       0,     0,   203,   204,   205,     0,     0,     0,   206,     0,
     207,   208,     0,   209,   210,   211,     0,     0,   212,     0,
     213,   214,   215,   216,   217,     0,     0,   218,   219,   220,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,     0,     0,     0,   228,   229,     0,   230,     0,
     231,     0,   232,   233,   234,   235,   236,     0,   237,     0,
       0,     0,   238,   239,     0,   240,     0,     0,   241,   242,
       0,     0,     0,   243,   244,   245,   246,   247,     0,     0,
     248,   249,     0,     0,   250,   251,     0,   252,     0,     0,
       0,   253,   254,     0,     0,     0,   255,     0,   256,   257,
       0,   258,   259,     0,     0,     0,   260,     0,     0,   261,
     262,     0,     0,   263,     0,     0,   264,   265,     0,     0,
       0,     0,     0,   266,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,     0,     0,     0,     0,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,     0,   288,   289,   290,
     291,     0,   292,   293,   294,     0,     0,     0,   295,   296,
     297,   298,   299,     0,     0,   300,   301,     0,   302,     0,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
       0,     0,   312,   313,     0,     0,   314,   315,   316,   317,
       0,     0,     0,   318,   319,     0,     0,     0,     0,   320,
     321,   322,     0,   323,   324,   325,     0,   326,     0,     0,
       0,     0,     0,     0,   327,     0,     0,     0,   328,   329,
     330,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,     0,   343,   344,   345,     0,
     346,     0,   347,   348,   349,   350,     0,   351,   352,   353,
       0,     0,   354,     0,     0,     0,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,   364,     0,
     365,   366,   367,     0,     0,   368,     0,   369,   370,   371,
       0,   372,   373,     0,     0,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,     0,   384,   385,     0,
       0,     0,   386,   387,   388,   389,     0,     0,     0,   390,
       0,     0,     0,   391,   392,   393,   394,     0,   395,   396,
     397,   398,   399,     0,     0,     0,     0,     0,     0,   400,
     401,     0,   402,     0,     0,   403,     0,     0,   404,   405,
       0,     0,   406,     0,     0,   407,   408,     0,   409,   410,
     411,   412,   413,     0,     0,   414,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   421,   422,   423,     0,     0,
     424,   425,     0,   426,   427,   428,   429,     0,     0,     0,
       0,     0,   430,   431,     0,     0,     0,   432,   433,   434,
     435,     0,   436,   437,     0,   438,   439,     0,   440,   441,
       0,     0,   442,     0,   443,     0,   444,     0,   445,     0,
     446,   447,   448,     0,     0,     0,     0,     0,     0,   449,
       0,     0,   450,     0,     0,     0,   451,   452,   453,   454,
       0,     0,     0,     0,   455,   456,     0,   457,   458,     0,
     138,   459,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,   161,   162,     0,     0,   163,     0,     0,
     164,     0,   165,   166,     0,   167,     0,   168,   169,   170,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,     0,   183,     0,   184,   185,
       0,   186,     0,     0,   187,     0,     0,   188,     0,     0,
       0,     0,     0,     0,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,   194,     0,     0,     0,     0,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,     0,     0,     0,   202,     0,     0,   203,   204,
     205,     0,     0,     0,   206,     0,   207,   208,     0,   209,
     210,   211,     0,     0,   212,     0,   213,   214,   215,   216,
     217,     0,     0,   218,   219,   220,     0,   221,     0,   222,
     223,     0,   224,  1679,   226,     0,     0,   227,     0,     0,
       0,   228,   229,     0,   230,     0,   231,     0,   232,   233,
     234,   235,   236,     0,   237,     0,     0,     0,   238,   239,
       0,   240,     0,     0,   241,   242,     0,     0,     0,   243,
     244,   245,   246,   247,     0,     0,   248,   249,     0,     0,
     250,   251,     0,   252,     0,     0,     0,   253,   254,     0,
       0,     0,   255,     0,   256,   257,     0,   258,   259,     0,
       0,     0,   260,     0,     0,   261,   262,     0,     0,   263,
       0,     0,   264,   265,     0,     0,     0,     0,     0,   266,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
       0,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
     294,     0,     0,     0,   295,   296,   297,   298,   299,     0,
       0,   300,   301,     0,   302,     0,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,     0,     0,   312,   313,
       0,     0,   314,  1680,   316,   317,     0,     0,     0,   318,
     319,     0,     0,     0,     0,   320,   321,   322,     0,   323,
     324,   325,     0,   326,     0,     0,     0,     0,     0,     0,
     327,     0,     0,     0,   328,   329,   330,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,     0,   343,   344,   345,     0,   346,     0,   347,   348,
     349,   350,     0,   351,   352,   353,     0,     0,   354,     0,
       0,     0,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,   364,     0,   365,   366,   367,     0,
       0,   368,     0,   369,   370,   371,     0,   372,   373,     0,
       0,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,     0,   384,   385,     0,     0,     0,   386,   387,
     388,   389,     0,     0,     0,   390,     0,     0,     0,   391,
     392,   393,   394,     0,   395,   396,   397,   398,   399,     0,
       0,     0,     0,     0,     0,   400,   401,     0,   402,     0,
       0,   403,     0,     0,   404,   405,     0,     0,   406,     0,
       0,   407,   408,     0,   409,   410,   411,   412,   413,     0,
       0,   414,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   421,   422,   423,     0,     0,   424,   425,     0,   426,
     427,   428,   429,     0,     0,     0,     0,     0,   430,   431,
       0,     0,     0,   432,   433,   434,   435,     0,   436,   437,
       0,   438,   439,     0,   440,   441,     0,     0,   442,     0,
     443,     0,   444,     0,   445,     0,   446,   447,   448,     0,
       0,     0,     0,     0,     0,   449,     0,     0,   450,     0,
       0,     0,   451,   452,   453,   454,     0,     0,     0,     0,
     455,   456,     0,   457,   458,     0,   138,   459,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
       0,  -296,     0,     0,     0,   154,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,     0,
       0,     0,     0,   163,  3634,     0,   164,     0,   165,     0,
       0,     0,     0,   168,   169,  3635,   171,   172,     0,   173,
     174,     0,     0,   176,     0,   178,   179,   180,   181,     0,
     182,     0,   183,     0,     0,   185,     0,   186,     0,     0,
     187,     0,     0,   188,     0,     0,     0,     0,     0,     0,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
     193,     0,     0,     0,     0,     0,   195,     0,   196,     0,
       0,     0,   197,     0,   198,   199,   200,   201,     0,     0,
       0,     0,     0,     0,   203,   204,   205,     0,  -266,  -266,
     206,     0,  -266,   208,     0,   209,   210,   211,     0,     0,
     212,     0,   213,   214,   215,   216,     0,     0,     0,   218,
     219,   220,     0,   221,     0,   222,   223,  3636,   224,   225,
     226,     0,     0,     0,     0,     0,     0,   228,   229,     0,
     230,     0,   231,     0,   232,   233,   234,   235,     0,     0,
     237,     0,     0,     0,     0,   239,     0,     0,     0,     0,
       0,   242,     0,     0,     0,   243,   244,   245,   246,   247,
    3637,     0,   248,   249,     0,     0,   250,   251,     0,   252,
       0,     0,     0,   253,     0,     0,     0,     0,   255,     0,
     256,   257,     0,   258,   259,  3638,     0,     0,   260,     0,
       0,     0,   262,     0,     0,   263,  3639,     0,   264,   265,
       0,     0,     0,     0,     0,   266,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,     0,     0,  -251,     0,
       0,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,     0,   288,
     289,   290,   291,     0,   292,   293,   294,     0,     0,     0,
     295,   296,   297,   298,   299,     0,     0,   300,   301,     0,
     302,     0,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,     0,     0,   312,   313,     0,     0,   314,   315,
     316,   317,     0,     0,     0,     0,   319,     0,     0,     0,
       0,   320,   321,   322,     0,   323,   324,  3640,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,   330,     0,     0,   332,   333,   334,     0,   336,
     337,   338,   339,   340,   341,     0,     0,     0,     0,   344,
     345,     0,   346,     0,   347,   348,   349,   350,     0,   351,
     352,   353,     0,     0,   354,     0,     0,     0,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
       0,     0,   365,     0,   367,  -251,     0,   368,     0,     0,
     370,     0,     0,   372,   373,  3641,     0,     0,     0,     0,
     376,   377,   378,   379,   380,   381,     0,   383,     0,   384,
       0,     0,     0,     0,   386,   387,   388,     0,     0,     0,
       0,   390,     0,     0,     0,   391,     0,   393,     0,     0,
     395,     0,     0,   398,   399,     0,     0,     0,     0,     0,
       0,   400,   401,     0,   402,     0,     0,   403,     0,     0,
     404,     0,     0,     0,   406,     0,     0,     0,   408,     0,
     409,   410,   411,   412,   413,     0,     0,   414,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,     0,
     433,   434,   435,     0,   436,   437,     0,   438,   439,     0,
       0,     0,     0,     0,   442,     0,     0,     0,   444,     0,
       0,     0,   446,   447,   448,     0,     0,     0,     0,     0,
       0,   449,     0,     0,   450,     0,     0,     0,   451,   452,
     453,   454,     0,     0,  -251,     0,   455,     0,     0,   457,
       0,     0,   138,   459,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,     0,     0,   146,
     147,   148,   149,   150,   151,     0,     0,  -296,     0,     0,
       0,   154,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,     0,     0,     0,     0,   163,
    3634,     0,   164,     0,   165,     0,     0,     0,     0,   168,
     169,  3635,   171,   172,     0,   173,   174,     0,     0,   176,
       0,   178,   179,   180,   181,     0,   182,     0,   183,     0,
       0,   185,     0,   186,     0,     0,   187,     0,     0,   188,
       0,     0,     0,     0,     0,     0,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,   193,     0,     0,     0,
       0,     0,   195,     0,   196,     0,     0,     0,   197,     0,
     198,   199,   200,   201,     0,     0,     0,     0,     0,     0,
     203,   204,   205,     0,  -287,     0,   206,     0,  -287,   208,
       0,   209,   210,   211,     0,     0,   212,     0,   213,   214,
     215,   216,     0,     0,     0,   218,   219,   220,     0,   221,
       0,   222,   223,  3636,   224,   225,   226,     0,     0,     0,
       0,     0,     0,   228,   229,     0,   230,     0,   231,     0,
     232,   233,   234,   235,     0,     0,   237,     0,     0,     0,
       0,   239,     0,     0,     0,     0,     0,   242,     0,     0,
       0,   243,   244,   245,   246,   247,  3637,     0,   248,   249,
       0,     0,   250,   251,     0,   252,     0,     0,     0,   253,
       0,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,  3638,     0,     0,   260,     0,     0,     0,   262,     0,
       0,   263,  3639,     0,   264,   265,     0,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,     0,     0,  -251,     0,     0,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,   294,     0,     0,     0,   295,   296,   297,   298,
     299,     0,     0,   300,   301,     0,   302,     0,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,     0,     0,
     312,   313,     0,     0,   314,   315,   316,   317,     0,     0,
       0,     0,   319,     0,     0,     0,     0,   320,   321,   322,
       0,   323,   324,  3640,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   329,   330,     0,
       0,   332,   333,   334,     0,   336,   337,   338,   339,   340,
     341,     0,     0,     0,     0,   344,   345,     0,   346,     0,
     347,   348,   349,   350,     0,   351,   352,   353,     0,     0,
     354,     0,     0,     0,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,     0,     0,   365,     0,
     367,  -251,     0,   368,     0,     0,   370,     0,     0,   372,
     373,  3641,     0,     0,     0,     0,   376,   377,   378,   379,
     380,   381,     0,   383,     0,   384,     0,     0,     0,     0,
     386,   387,   388,     0,     0,     0,     0,   390,     0,     0,
       0,   391,     0,   393,     0,     0,   395,     0,     0,   398,
     399,     0,     0,     0,     0,     0,     0,   400,   401,     0,
     402,     0,     0,   403,     0,     0,   404,     0,     0,     0,
     406,     0,     0,     0,   408,     0,   409,   410,   411,   412,
     413,     0,     0,   414,   415,   416,   417,     0,   418,   419,
       0,   420,     0,   421,   422,   423,     0,     0,   424,   425,
       0,   426,   427,   428,   429,     0,     0,     0,     0,     0,
     430,   431,     0,     0,     0,     0,   433,   434,   435,     0,
     436,   437,     0,   438,   439,     0,     0,     0,     0,     0,
     442,     0,     0,     0,   444,     0,     0,     0,   446,   447,
     448,     0,     0,     0,     0,     0,     0,   449,     0,     0,
     450,     0,     0,     0,   451,   452,   453,   454,  -287,     0,
    -251,     0,   455,     0,     0,   457,     0,     0,   138,   459,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,     0,  -296,     0,     0,     0,   154,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,     0,     0,     0,     0,   163,  3634,     0,   164,     0,
     165,     0,     0,     0,     0,   168,   169,  3635,   171,   172,
       0,   173,   174,     0,     0,   176,     0,   178,   179,   180,
     181,     0,   182,     0,   183,     0,     0,   185,     0,   186,
       0,     0,   187,     0,     0,   188,     0,     0,     0,     0,
       0,     0,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,   193,     0,     0,     0,     0,     0,   195,     0,
     196,     0,     0,     0,   197,     0,   198,   199,   200,   201,
       0,     0,     0,     0,     0,     0,   203,   204,   205,     0,
    -284,     0,   206,     0,  -284,   208,     0,   209,   210,   211,
       0,     0,   212,     0,   213,   214,   215,   216,     0,     0,
       0,   218,   219,   220,     0,   221,     0,   222,   223,  3636,
     224,   225,   226,     0,     0,     0,     0,     0,     0,   228,
     229,     0,   230,     0,   231,     0,   232,   233,   234,   235,
       0,     0,   237,     0,     0,     0,     0,   239,     0,     0,
       0,     0,     0,   242,     0,     0,     0,   243,   244,   245,
     246,   247,  3637,     0,   248,   249,     0,     0,   250,   251,
       0,   252,     0,     0,     0,   253,     0,     0,     0,     0,
     255,     0,   256,   257,     0,   258,   259,  3638,     0,     0,
     260,     0,     0,     0,   262,     0,     0,   263,  3639,     0,
     264,   265,     0,     0,     0,     0,     0,   266,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,     0,     0,
    -251,     0,     0,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
       0,   288,   289,   290,   291,     0,   292,   293,   294,     0,
       0,     0,   295,   296,   297,   298,   299,     0,     0,   300,
     301,     0,   302,     0,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,     0,     0,   312,   313,     0,     0,
     314,   315,   316,   317,     0,     0,     0,     0,   319,     0,
       0,     0,     0,   320,   321,   322,     0,   323,   324,  3640,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   329,   330,     0,     0,   332,   333,   334,
       0,   336,   337,   338,   339,   340,   341,     0,     0,     0,
       0,   344,   345,     0,   346,     0,   347,   348,   349,   350,
       0,   351,   352,   353,     0,     0,   354,     0,     0,     0,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,     0,   365,     0,   367,  -251,     0,   368,
       0,     0,   370,     0,     0,   372,   373,  3641,     0,     0,
       0,     0,   376,   377,   378,   379,   380,   381,     0,   383,
       0,   384,     0,     0,     0,     0,   386,   387,   388,     0,
       0,     0,     0,   390,     0,     0,     0,   391,     0,   393,
       0,     0,   395,     0,     0,   398,   399,     0,     0,     0,
       0,     0,     0,   400,   401,     0,   402,     0,     0,   403,
       0,     0,   404,     0,     0,     0,   406,     0,     0,     0,
     408,     0,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   421,
     422,   423,     0,     0,   424,   425,     0,   426,   427,   428,
     429,     0,     0,     0,     0,     0,   430,   431,     0,     0,
       0,     0,   433,   434,   435,     0,   436,   437,     0,   438,
     439,     0,     0,     0,     0,     0,   442,     0,     0,     0,
     444,     0,     0,     0,   446,   447,   448,     0,     0,     0,
       0,     0,     0,   449,     0,     0,   450,     0,     0,     0,
     451,   452,   453,   454,  -284,     0,  -251,     0,   455,     0,
       0,   457,     0,     0,   138,   459,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,     0,
       0,   146,   147,   148,   149,   150,   151,     0,     0,  -296,
       0,     0,     0,   154,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,     0,     0,     0,
       0,   163,  3634,     0,   164,     0,   165,     0,     0,     0,
       0,   168,   169,  3635,   171,   172,     0,   173,   174,     0,
       0,   176,     0,   178,   179,   180,   181,     0,   182,     0,
     183,     0,     0,   185,     0,   186,     0,     0,   187,     0,
       0,   188,     0,     0,     0,     0,     0,     0,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,   193,     0,
       0,     0,     0,     0,   195,     0,   196,     0,     0,     0,
     197,     0,   198,   199,   200,   201,     0,     0,     0,     0,
       0,     0,   203,   204,   205,     0,     0,     0,   206,     0,
    3957,   208,     0,   209,   210,   211,     0,     0,   212,     0,
     213,   214,   215,   216,     0,     0,     0,   218,   219,   220,
       0,   221,     0,   222,   223,  3636,   224,   225,   226,     0,
       0,     0,     0,     0,     0,   228,   229,     0,   230,     0,
     231,     0,   232,   233,   234,   235,     0,     0,   237,     0,
       0,     0,     0,   239,     0,     0,     0,     0,     0,   242,
       0,     0,     0,   243,   244,   245,   246,   247,  3637,     0,
     248,   249,     0,     0,   250,   251,     0,   252,     0,     0,
       0,   253,     0,     0,     0,     0,   255,     0,   256,   257,
       0,   258,   259,  3638,     0,     0,   260,     0,     0,     0,
     262,     0,     0,   263,  3639,     0,   264,   265,     0,     0,
       0,     0,     0,   266,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,     0,     0,  -251,     0,     0,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,     0,   288,   289,   290,
     291,     0,   292,   293,   294,     0,     0,     0,   295,   296,
     297,   298,   299,     0,     0,   300,   301,     0,   302,     0,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
       0,     0,   312,   313,     0,     0,   314,   315,   316,   317,
       0,     0,     0,     0,   319,     0,     0,     0,     0,   320,
     321,   322,     0,   323,   324,  3640,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   329,
     330,     0,     0,   332,   333,   334,     0,   336,   337,   338,
     339,   340,   341,     0,     0,     0,     0,   344,   345,     0,
     346,     0,   347,   348,   349,   350,     0,   351,   352,   353,
       0,     0,   354,     0,     0,     0,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,     0,     0,
     365,     0,   367,  -251,     0,   368,     0,     0,   370,     0,
       0,   372,   373,  3641,     0,     0,     0,     0,   376,   377,
     378,   379,   380,   381,     0,   383,     0,   384,     0,     0,
       0,     0,   386,   387,   388,     0,     0,     0,     0,   390,
       0,     0,     0,   391,     0,   393,     0,     0,   395,     0,
       0,   398,   399,     0,     0,     0,     0,     0,     0,   400,
     401,     0,   402,     0,     0,   403,     0,     0,   404,     0,
       0,     0,   406,     0,     0,     0,   408,     0,   409,   410,
     411,   412,   413,     0,     0,   414,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   421,   422,   423,     0,     0,
     424,   425,     0,   426,   427,   428,   429,     0,     0,     0,
       0,     0,   430,   431,     0,     0,     0,     0,   433,   434,
     435,     0,   436,   437,     0,   438,   439,     0,     0,     0,
       0,     0,   442,     0,     0,     0,   444,     0,     0,     0,
     446,   447,   448,     0,     0,     0,     0,     0,     0,   449,
       0,     0,   450,     0,     0,     0,   451,   452,   453,   454,
       0,     0,  -251,     0,   455,     0,     0,   457,     0,     0,
     138,   459,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,   151,     0,     0,  -296,     0,     0,     0,   154,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,     0,     0,     0,     0,   163,  3634,     0,
     164,     0,   165,     0,     0,     0,     0,   168,   169,  3635,
     171,   172,     0,   173,   174,     0,     0,   176,     0,   178,
     179,   180,   181,     0,   182,     0,   183,     0,     0,   185,
       0,   186,     0,     0,   187,     0,     0,   188,     0,     0,
       0,     0,     0,     0,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,     0,     0,     0,     0,     0,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,     0,     0,     0,     0,     0,     0,   203,   204,
     205,     0,     0,     0,   206,     0,  -289,   208,     0,   209,
     210,   211,     0,     0,   212,     0,   213,   214,   215,   216,
       0,     0,     0,   218,   219,   220,     0,   221,     0,   222,
     223,  3636,   224,   225,   226,     0,     0,     0,     0,     0,
       0,   228,   229,     0,   230,     0,   231,     0,   232,   233,
     234,   235,     0,     0,   237,     0,     0,     0,     0,   239,
       0,     0,     0,     0,     0,   242,     0,     0,     0,   243,
     244,   245,   246,   247,  3637,     0,   248,   249,     0,     0,
     250,   251,     0,   252,     0,     0,     0,   253,     0,     0,
       0,     0,   255,     0,   256,   257,     0,   258,   259,  3638,
       0,     0,   260,     0,     0,     0,   262,     0,     0,   263,
    3639,     0,   264,   265,     0,     0,     0,     0,     0,   266,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
       0,     0,  -251,     0,     0,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
     294,     0,     0,     0,   295,   296,   297,   298,   299,     0,
       0,   300,   301,     0,   302,     0,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,     0,     0,   312,   313,
       0,     0,   314,   315,   316,   317,     0,     0,     0,     0,
     319,     0,     0,     0,     0,   320,   321,   322,     0,   323,
     324,  3640,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,   330,     0,     0,   332,
     333,   334,     0,   336,   337,   338,   339,   340,   341,     0,
       0,     0,     0,   344,   345,     0,   346,     0,   347,   348,
     349,   350,     0,   351,   352,   353,     0,     0,   354,     0,
       0,     0,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,     0,     0,   365,     0,   367,  -251,
       0,   368,     0,     0,   370,     0,     0,   372,   373,  3641,
       0,     0,     0,     0,   376,   377,   378,   379,   380,   381,
       0,   383,     0,   384,     0,     0,     0,     0,   386,   387,
     388,     0,     0,     0,     0,   390,     0,     0,     0,   391,
       0,   393,     0,     0,   395,     0,     0,   398,   399,     0,
       0,     0,     0,     0,     0,   400,   401,     0,   402,     0,
       0,   403,     0,     0,   404,     0,     0,     0,   406,     0,
       0,     0,   408,     0,   409,   410,   411,   412,   413,     0,
       0,   414,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   421,   422,   423,     0,     0,   424,   425,     0,   426,
     427,   428,   429,     0,     0,     0,     0,     0,   430,   431,
       0,     0,     0,     0,   433,   434,   435,     0,   436,   437,
       0,   438,   439,     0,     0,     0,     0,     0,   442,     0,
       0,     0,   444,     0,     0,     0,   446,   447,   448,     0,
       0,     0,     0,     0,     0,   449,     0,     0,   450,     0,
       0,     0,   451,   452,   453,   454,     0,     0,  -251,     0,
     455,     0,     0,   457,     0,     0,   138,   459,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
       0,  -296,     0,     0,     0,   154,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,     0,
       0,     0,     0,   163,  3634,     0,   164,     0,   165,     0,
       0,     0,     0,   168,   169,  3635,   171,   172,     0,   173,
     174,     0,     0,   176,     0,   178,   179,   180,   181,     0,
     182,     0,   183,     0,     0,   185,     0,   186,     0,     0,
     187,     0,     0,   188,     0,     0,     0,     0,     0,     0,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
     193,     0,     0,     0,     0,     0,   195,     0,   196,     0,
       0,     0,   197,     0,   198,   199,   200,   201,     0,     0,
       0,     0,     0,     0,   203,   204,   205,     0,     0,     0,
     206,     0,  4054,   208,     0,   209,   210,   211,     0,     0,
     212,     0,   213,   214,   215,   216,     0,     0,     0,   218,
     219,   220,     0,   221,     0,   222,   223,  3636,   224,   225,
     226,     0,     0,     0,     0,     0,     0,   228,   229,     0,
     230,     0,   231,     0,   232,   233,   234,   235,     0,     0,
     237,     0,     0,     0,     0,   239,     0,     0,     0,     0,
       0,   242,     0,     0,     0,   243,   244,   245,   246,   247,
    3637,     0,   248,   249,     0,     0,   250,   251,     0,   252,
       0,     0,     0,   253,     0,     0,     0,     0,   255,     0,
     256,   257,     0,   258,   259,  3638,     0,     0,   260,     0,
       0,     0,   262,     0,     0,   263,  3639,     0,   264,   265,
       0,     0,     0,     0,     0,   266,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,     0,     0,  -251,     0,
       0,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,     0,   288,
     289,   290,   291,     0,   292,   293,   294,     0,     0,     0,
     295,   296,   297,   298,   299,     0,     0,   300,   301,     0,
     302,     0,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,     0,     0,   312,   313,     0,     0,   314,   315,
     316,   317,     0,     0,     0,     0,   319,     0,     0,     0,
       0,   320,   321,   322,     0,   323,   324,  3640,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,   330,     0,     0,   332,   333,   334,     0,   336,
     337,   338,   339,   340,   341,     0,     0,     0,     0,   344,
     345,     0,   346,     0,   347,   348,   349,   350,     0,   351,
     352,   353,     0,     0,   354,     0,     0,     0,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
       0,     0,   365,     0,   367,  -251,     0,   368,     0,     0,
     370,     0,     0,   372,   373,  3641,     0,     0,     0,     0,
     376,   377,   378,   379,   380,   381,     0,   383,     0,   384,
       0,     0,     0,     0,   386,   387,   388,     0,     0,     0,
       0,   390,     0,     0,     0,   391,     0,   393,     0,     0,
     395,     0,     0,   398,   399,     0,     0,     0,     0,     0,
       0,   400,   401,     0,   402,     0,     0,   403,     0,     0,
     404,     0,     0,     0,   406,     0,     0,     0,   408,     0,
     409,   410,   411,   412,   413,     0,     0,   414,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,     0,
     433,   434,   435,     0,   436,   437,     0,   438,   439,     0,
       0,     0,     0,     0,   442,     0,     0,     0,   444,     0,
       0,     0,   446,   447,   448,     0,     0,     0,     0,     0,
       0,   449,     0,     0,   450,     0,     0,     0,   451,   452,
     453,   454,     0,     0,  -251,     0,   455,     0,     0,   457,
       0,     0,   138,   459,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,     0,     0,   146,
     147,   148,   149,   150,   151,     0,     0,  -296,     0,     0,
       0,   154,   155,     0,     0,     0,   156,     0,     0,   157,
     158,   159,     0,   160,     0,     0,     0,     0,     0,   163,
    3634,     0,   164,     0,   165,     0,     0,     0,     0,   168,
     169,  3635,   171,   172,     0,   173,   174,     0,     0,   176,
       0,   178,   179,   180,   181,     0,   182,     0,   183,     0,
       0,   185,     0,   186,     0,     0,   187,     0,     0,   188,
       0,     0,     0,     0,     0,     0,   189,   190,   191,     0,
       0,   192,     0,     0,     0,     0,   193,     0,     0,     0,
       0,     0,   195,     0,   196,     0,     0,     0,   197,     0,
     198,   199,   200,   201,     0,     0,     0,     0,     0,     0,
     203,   204,   205,     0,     0,     0,   206,     0,  4096,   208,
       0,   209,   210,   211,     0,     0,   212,     0,   213,   214,
     215,   216,     0,     0,     0,   218,   219,   220,     0,   221,
       0,   222,   223,  3636,   224,   225,   226,     0,     0,     0,
       0,     0,     0,   228,   229,     0,   230,     0,   231,     0,
     232,   233,   234,   235,     0,     0,   237,     0,     0,     0,
       0,   239,     0,     0,     0,     0,     0,   242,     0,     0,
       0,   243,   244,   245,   246,   247,  3637,     0,   248,   249,
       0,     0,   250,   251,     0,   252,     0,     0,     0,   253,
       0,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,  3638,     0,     0,   260,     0,     0,     0,   262,     0,
       0,   263,  3639,     0,   264,   265,     0,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,     0,     0,  -251,     0,     0,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,   294,     0,     0,     0,   295,   296,   297,   298,
     299,     0,     0,   300,   301,     0,   302,     0,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,     0,     0,
     312,   313,     0,     0,   314,   315,   316,   317,     0,     0,
       0,     0,   319,     0,     0,     0,     0,   320,   321,   322,
       0,   323,   324,  3640,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   329,   330,     0,
       0,   332,   333,   334,     0,   336,   337,   338,   339,   340,
     341,     0,     0,     0,     0,   344,   345,     0,   346,     0,
     347,   348,   349,   350,     0,   351,   352,   353,     0,     0,
     354,     0,     0,     0,   355,   356,   357,   358,   359,     0,
       0,   360,   361,   362,     0,   363,     0,     0,   365,     0,
     367,  -251,     0,   368,     0,     0,   370,     0,     0,   372,
     373,  3641,     0,     0,     0,     0,   376,   377,   378,   379,
     380,   381,     0,   383,     0,   384,     0,     0,     0,     0,
     386,   387,   388,     0,     0,     0,     0,   390,     0,     0,
       0,   391,     0,   393,     0,     0,   395,     0,     0,   398,
     399,     0,     0,     0,     0,     0,     0,   400,   401,     0,
     402,     0,     0,   403,     0,     0,   404,     0,     0,     0,
     406,     0,     0,     0,   408,     0,   409,   410,   411,   412,
     413,     0,     0,   414,   415,   416,   417,     0,   418,   419,
       0,   420,     0,   421,   422,   423,     0,     0,   424,   425,
       0,   426,   427,   428,   429,     0,     0,     0,     0,     0,
     430,   431,     0,     0,     0,     0,   433,   434,   435,     0,
     436,   437,     0,   438,   439,     0,     0,     0,     0,     0,
     442,     0,     0,     0,   444,     0,     0,     0,   446,   447,
     448,     0,     0,     0,     0,     0,     0,   449,     0,     0,
     450,     0,     0,     0,   451,   452,   453,   454,     0,     0,
    -251,     0,   455,     0,     0,   457,     0,     0,   138,   459,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,     0,  -296,     0,     0,     0,   154,   155,     0,
       0,     0,   156,     0,     0,   157,   158,   159,     0,   160,
       0,     0,     0,     0,     0,   163,  3634,     0,   164,     0,
     165,     0,     0,     0,     0,   168,   169,  3635,   171,   172,
       0,   173,   174,     0,     0,   176,     0,   178,   179,   180,
     181,     0,   182,     0,   183,     0,     0,   185,     0,   186,
       0,     0,   187,     0,     0,   188,     0,     0,     0,     0,
       0,     0,   189,   190,   191,     0,     0,   192,     0,     0,
       0,     0,   193,     0,     0,     0,     0,     0,   195,     0,
     196,     0,     0,     0,   197,     0,   198,   199,   200,   201,
       0,     0,     0,     0,     0,     0,   203,   204,   205,     0,
       0,     0,   206,     0,  -270,   208,     0,   209,   210,   211,
       0,     0,   212,     0,   213,   214,   215,   216,     0,     0,
       0,   218,   219,   220,     0,   221,     0,   222,   223,  3636,
     224,   225,   226,     0,     0,     0,     0,     0,     0,   228,
     229,     0,   230,     0,   231,     0,   232,   233,   234,   235,
       0,     0,   237,     0,     0,     0,     0,   239,     0,     0,
       0,     0,     0,   242,     0,     0,     0,   243,   244,   245,
     246,   247,  3637,     0,   248,   249,     0,     0,   250,   251,
       0,   252,     0,     0,     0,   253,     0,     0,     0,     0,
     255,     0,   256,   257,     0,   258,   259,  3638,     0,     0,
     260,     0,     0,     0,   262,     0,     0,   263,  3639,     0,
     264,   265,     0,     0,     0,     0,     0,   266,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,     0,     0,
    -251,     0,     0,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
       0,   288,   289,   290,   291,     0,   292,   293,   294,     0,
       0,     0,   295,   296,   297,   298,   299,     0,     0,   300,
     301,     0,   302,     0,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,     0,     0,   312,   313,     0,     0,
     314,   315,   316,   317,     0,     0,     0,     0,   319,     0,
       0,     0,     0,   320,   321,   322,     0,   323,   324,  3640,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   329,   330,     0,     0,   332,   333,   334,
       0,   336,   337,   338,   339,   340,   341,     0,     0,     0,
       0,   344,   345,     0,   346,     0,   347,   348,   349,   350,
       0,   351,   352,   353,     0,     0,   354,     0,     0,     0,
     355,   356,   357,   358,   359,     0,     0,   360,   361,   362,
       0,   363,     0,     0,   365,     0,   367,  -251,     0,   368,
       0,     0,   370,     0,     0,   372,   373,  3641,     0,     0,
       0,     0,   376,   377,   378,   379,   380,   381,     0,   383,
       0,   384,     0,     0,     0,     0,   386,   387,   388,     0,
       0,     0,     0,   390,     0,     0,     0,   391,     0,   393,
       0,     0,   395,     0,     0,   398,   399,     0,     0,     0,
       0,     0,     0,   400,   401,     0,   402,     0,     0,   403,
       0,     0,   404,     0,     0,     0,   406,     0,     0,     0,
     408,     0,   409,   410,   411,   412,   413,     0,     0,   414,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   421,
     422,   423,     0,     0,   424,   425,     0,   426,   427,   428,
     429,     0,     0,     0,     0,     0,   430,   431,     0,     0,
       0,     0,   433,   434,   435,     0,   436,   437,     0,   438,
     439,     0,     0,     0,     0,     0,   442,     0,     0,     0,
     444,     0,     0,     0,   446,   447,   448,     0,     0,     0,
       0,     0,     0,   449,     0,     0,   450,     0,     0,     0,
     451,   452,   453,   454,     0,     0,  -251,     0,   455,     0,
       0,   457,     0,     0,   138,   459,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,     0,
       0,   146,   147,   148,   149,   150,   151,     0,     0,  -296,
       0,     0,     0,   154,   155,     0,     0,     0,   156,     0,
       0,   157,   158,   159,     0,   160,     0,     0,     0,     0,
       0,   163,  3634,     0,   164,     0,   165,     0,     0,     0,
       0,   168,   169,  3635,   171,   172,     0,   173,   174,     0,
       0,   176,     0,   178,   179,   180,   181,     0,   182,     0,
     183,     0,     0,   185,     0,   186,     0,     0,   187,     0,
       0,   188,     0,     0,     0,     0,     0,     0,   189,   190,
     191,     0,     0,   192,     0,     0,     0,     0,   193,     0,
       0,     0,     0,     0,   195,     0,   196,     0,     0,     0,
     197,     0,   198,   199,   200,   201,     0,     0,     0,     0,
       0,     0,   203,   204,   205,     0,     0,     0,   206,     0,
       0,   208,     0,   209,   210,   211,     0,     0,   212,     0,
     213,   214,   215,   216,     0,     0,     0,   218,   219,   220,
       0,   221,     0,   222,   223,  3636,   224,   225,   226,     0,
       0,     0,     0,     0,     0,   228,   229,     0,   230,     0,
     231,     0,   232,   233,   234,   235,     0,     0,   237,     0,
       0,     0,     0,   239,     0,     0,     0,     0,     0,   242,
       0,     0,     0,   243,   244,   245,   246,   247,  3637,     0,
     248,   249,     0,     0,   250,   251,     0,   252,     0,     0,
       0,   253,     0,     0,     0,     0,   255,     0,   256,   257,
       0,   258,   259,  3638,     0,     0,   260,     0,     0,     0,
     262,     0,     0,   263,  3639,     0,   264,   265,     0,     0,
       0,     0,     0,   266,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,     0,     0,  -251,     0,     0,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,     0,   288,   289,   290,
     291,     0,   292,   293,   294,     0,     0,     0,   295,   296,
     297,   298,   299,     0,     0,   300,   301,     0,   302,     0,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
       0,     0,   312,   313,     0,     0,   314,   315,   316,   317,
       0,     0,     0,     0,   319,     0,     0,     0,     0,   320,
     321,   322,     0,   323,   324,  3640,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   329,
     330,     0,     0,   332,   333,   334,     0,   336,   337,   338,
     339,   340,   341,     0,     0,     0,     0,   344,   345,     0,
     346,     0,   347,   348,   349,   350,     0,   351,   352,   353,
       0,     0,   354,     0,     0,     0,   355,   356,   357,   358,
     359,     0,     0,   360,   361,   362,     0,   363,     0,     0,
     365,     0,   367,  -251,     0,   368,     0,     0,   370,     0,
       0,   372,   373,  3641,     0,     0,     0,     0,   376,   377,
     378,   379,   380,   381,     0,   383,     0,   384,     0,     0,
       0,     0,   386,   387,   388,     0,     0,     0,     0,   390,
       0,     0,     0,   391,     0,   393,     0,     0,   395,     0,
       0,   398,   399,     0,     0,     0,     0,     0,     0,   400,
     401,     0,   402,     0,     0,   403,     0,     0,   404,     0,
       0,     0,   406,     0,     0,     0,   408,     0,   409,   410,
     411,   412,   413,     0,     0,   414,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   421,   422,   423,     0,     0,
     424,   425,     0,   426,   427,   428,   429,     0,     0,     0,
       0,     0,   430,   431,     0,     0,     0,     0,   433,   434,
     435,     0,   436,   437,     0,   438,   439,     0,     0,     0,
       0,     0,   442,     0,     0,     0,   444,     0,     0,     0,
     446,   447,   448,     0,     0,     0,     0,     0,     0,   449,
       0,     0,   450,     0,     0,     0,   451,   452,   453,   454,
       0,     0,  -251,     0,   455,     0,     0,   457,     0,     0,
     138,   459,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,   151,     0,     0,  -296,     0,     0,     0,   154,
     155,     0,     0,     0,   156,     0,     0,   157,   158,   159,
       0,   160,     0,     0,     0,     0,     0,   163,  3634,     0,
     164,     0,   165,     0,     0,     0,     0,   168,   169,  3635,
     171,   172,     0,   173,   174,     0,     0,   176,     0,   178,
     179,   180,   181,     0,   182,     0,   183,     0,     0,   185,
       0,   186,     0,     0,   187,     0,     0,   188,     0,     0,
       0,     0,     0,     0,   189,   190,   191,     0,     0,   192,
       0,     0,     0,     0,   193,     0,     0,     0,     0,     0,
     195,     0,   196,     0,     0,     0,   197,     0,   198,   199,
     200,   201,     0,     0,     0,     0,     0,     0,   203,   204,
     205,     0,     0,     0,   206,     0,     0,   208,     0,   209,
     210,   211,     0,     0,   212,     0,   213,   214,   215,   216,
       0,     0,     0,   218,   219,   220,     0,   221,     0,   222,
     223,  3636,   224,   225,   226,     0,     0,     0,     0,     0,
       0,   228,   229,     0,   230,     0,   231,     0,   232,   233,
     234,   235,     0,     0,   237,     0,     0,     0,     0,   239,
       0,     0,     0,     0,     0,   242,     0,     0,     0,   243,
     244,   245,   246,   247,  3637,     0,   248,   249,     0,     0,
     250,   251,     0,   252,     0,     0,     0,   253,     0,     0,
       0,     0,   255,     0,   256,   257,     0,   258,   259,  3638,
       0,     0,   260,     0,     0,     0,   262,     0,     0,   263,
    3639,     0,   264,   265,     0,     0,     0,     0,     0,   266,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
       0,     0,  -251,     0,     0,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
     294,     0,     0,     0,   295,   296,   297,   298,   299,     0,
       0,   300,   301,     0,   302,     0,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,     0,     0,   312,   313,
       0,     0,   314,   315,   316,   317,     0,     0,     0,     0,
     319,     0,     0,     0,     0,   320,   321,   322,     0,   323,
     324,  3640,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,   330,     0,     0,   332,
     333,   334,     0,   336,   337,   338,   339,   340,   341,     0,
       0,     0,     0,   344,   345,     0,   346,     0,   347,   348,
     349,   350,     0,   351,   352,   353,     0,     0,   354,     0,
       0,     0,   355,   356,   357,   358,   359,     0,     0,   360,
     361,   362,     0,   363,     0,     0,   365,     0,   367,  -251,
       0,   368,     0,     0,   370,     0,     0,   372,   373,  3641,
       0,     0,     0,     0,   376,   377,   378,   379,   380,   381,
       0,   383,     0,   384,     0,     0,     0,     0,   386,   387,
     388,     0,     0,     0,     0,   390,     0,     0,     0,   391,
       0,   393,     0,     0,   395,     0,     0,   398,   399,     0,
       0,     0,     0,     0,     0,   400,   401,     0,   402,     0,
       0,   403,     0,     0,   404,     0,     0,     0,   406,     0,
       0,     0,   408,     0,   409,   410,   411,   412,   413,     0,
       0,   414,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   421,   422,   423,     0,     0,   424,   425,     0,   426,
     427,   428,   429,     0,     0,     0,     0,     0,   430,   431,
       0,     0,     0,     0,   433,   434,   435,     0,   436,   437,
       0,   438,   439,     0,     0,     0,     0,     0,   442,     0,
       0,     0,  3960,     0,     0,     0,   446,   447,   448,     0,
       0,     0,     0,     0,     0,   449,     0,     0,   450,     0,
       0,     0,   451,   452,   453,   454,     0,     0,  -251,     0,
     455,     0,     0,   457,     0,     0,   138,   459,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
       0,     0,     0,     0,     0,   154,   155,     0,     0,     0,
     156,     0,     0,   157,   158,   159,     0,   160,     0,     0,
       0,     0,     0,   163,     0,     0,   164,     0,   165,     0,
       0,     0,     0,   168,   169,     0,   171,   172,     0,   173,
     174,     0,     0,   176,     0,   178,   179,   180,   181,     0,
     182,     0,   183,     0,     0,   185,     0,   186,     0,     0,
     187,     0,     0,   188,     0,     0,     0,     0,     0,     0,
     189,   190,   191,     0,     0,   192,     0,     0,     0,     0,
     193,     0,     0,     0,     0,     0,   195,     0,   196,     0,
       0,     0,   197,     0,   198,   199,   200,   201,     0,     0,
       0,     0,     0,     0,   203,   204,   205,     0,     0,     0,
     206,     0,     0,   208,     0,   209,   210,   211,     0,     0,
     212,     0,   213,   214,   215,   216,     0,     0,     0,   218,
     219,   220,     0,   221,     0,   222,   223,     0,   224,   225,
     226,     0,     0,     0,     0,     0,     0,   228,   229,     0,
     230,     0,   231,     0,   232,   233,   234,   235,     0,     0,
     237,     0,     0,     0,     0,   239,     0,     0,     0,     0,
       0,   242,     0,     0,     0,   243,   244,   245,   246,   247,
       0,     0,   248,   249,     0,     0,   250,   251,     0,   252,
       0,     0,     0,   253,     0,     0,     0,     0,   255,     0,
     256,   257,     0,   258,   259,     0,     0,     0,   260,     0,
       0,     0,   262,     0,     0,   263,     0,     0,   264,   265,
       0,     0,     0,     0,     0,   266,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,     0,     0,     0,     0,
       0,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,     0,   288,
     289,   290,   291,     0,   292,   293,   294,     0,     0,     0,
     295,   296,   297,   298,   299,     0,     0,   300,   301,     0,
     302,     0,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,     0,     0,   312,   313,     0,     0,   314,   315,
     316,   317,     0,     0,     0,     0,   319,     0,     0,     0,
       0,   320,   321,   322,     0,   323,   324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,   330,     0,     0,   332,   333,   334,     0,   336,
     337,   338,   339,   340,   341,     0,     0,     0,     0,   344,
     345,     0,   346,     0,   347,   348,   349,   350,     0,   351,
     352,   353,     0,     0,   354,     0,     0,     0,   355,   356,
     357,   358,   359,     0,     0,   360,   361,   362,     0,   363,
       0,     0,   365,     0,   367,     0,     0,   368,     0,     0,
     370,     0,     0,   372,   373,     0,     0,     0,     0,     0,
     376,   377,   378,   379,   380,   381,     0,   383,     0,   384,
       0,     0,     0,     0,   386,   387,   388,     0,     0,     0,
       0,   390,     0,     0,     0,   391,     0,   393,     0,     0,
     395,     0,     0,   398,   399,     0,     0,     0,     0,     0,
       0,   400,   401,     0,   402,     0,     0,   403,     0,     0,
     404,     0,     0,     0,   406,     0,     0,     0,   408,     0,
     409,   410,   411,   412,   413,     0,     0,   414,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,     0,
     433,   434,   435,     0,   436,   437,     0,   438,   439,     0,
       0,     0,     0,     0,   442,     0,     0,     0,   444,     0,
       0,     0,   446,   447,   448,     0,     0,     0,     0,     0,
       0,   449,     0,     0,   450,     0,     0,     0,   451,   452,
     453,   454,     0,     0,     0,     0,   455,     0,     0,   457,
       0,     0,     0,   459
};

#define yypact_value_is_default(yystate) \
  ((yystate) == (-3115))

#define yytable_value_is_error(yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       7,   749,   605,   540,   540,   613,   614,   932,   931,    21,
    1113,   647,   648,    20,   561,  1113,    23,   842,    30,   652,
     121,  1011,   966,  1016,    36,    32,  1696,     7,  1009,  1010,
     765,  1058,   895,  1235,  1595,    42,  1924,    23,   869,  1296,
    2347,   575,  2553,  2155,  2222,  1177,    53,  2225,  2226,   685,
     867,  1136,  2000,  2277,  2198,  1362,  2657,  2005,  1143,  1659,
    1380,  1978,  2606,   936,   895,   489,  2373,   936,  1048,  1388,
     706,  2265,   632,  3037,  1854,   708,  2462,  1310,   711,   896,
    2443,  3008,  2445,   719,   720,   721,    93,  1083,  1907,  2342,
    1852,     5,  1852,  1783,  1327,   547,  1855,  1958,  2241,  2242,
    1859,  2213,   618,   672,  1337,  1338,  2788,    93,   115,  2258,
     117,  1870,  1958,   120,   121,   122,  3014,  2266,   593,    16,
    2476,  1880,    40,  1443,  2480,    59,   601,   602,  2321,    18,
     137,    18,    24,    33,    98,   738,    18,   117,    16,  1835,
     120,  1370,  3070,  3071,    15,    16,  3074,  3261,  1144,  1145,
    1947,   137,  1148,  1149,  1150,  1151,   897,  1153,  1154,  1155,
    1156,  1157,  1158,  1159,  1160,  3093,   127,   727,   728,   729,
      20,  3099,    15,    16,    15,    16,    29,  1722,  1982,   739,
     118,   149,  1695,  1826,   137,   159,   111,    51,  2599,   137,
     111,  2424,  1798,   114,   114,  2264,  1958,   137,  1958,    36,
     228,  2310,  2306,  2307,    63,   114,  3258,    51,    58,    59,
      15,    16,   341,    10,    24,  3270,  2710,    15,    16,    15,
      16,    61,    67,   143,   295,  1921,   114,   131,  1844,    75,
    1926,    20,   250,   352,   143,    64,  1932,  1933,    72,    43,
    1936,    18,    55,    36,    33,   170,   143,   346,  1380,   170,
    1807,  1808,   366,   133,   143,   143,    57,   126,   147,    48,
     147,  3154,   143,  2479,  3157,   147,   321,  1824,  1470,    58,
      59,   190,   197,   423,   417,   399,   197,   178,     8,    22,
      15,    16,  3209,   132,  1841,  1842,    15,    16,   343,   440,
     824,  2324,   767,    15,    16,   427,   178,  1045,    66,   251,
    1857,  1858,   938,  1860,   335,    12,  1863,  1864,   479,  2593,
    1867,  1443,  2416,  2417,   219,  1872,   235,    15,    16,  1876,
    1877,  1878,  1879,   228,   216,    66,  1883,   455,  1885,   210,
      15,    16,  2249,    61,  1891,    15,    16,  1894,  1895,  1896,
     265,   100,   541,  2231,   265,   159,    15,    16,    15,    16,
    1098,   114,    15,    16,  1102,    41,    12,   587,   159,   213,
     197,   836,    61,   164,   594,    15,    16,  3295,   587,    20,
     147,   510,    24,   474,   175,   594,  3304,   829,  3430,   987,
     988,   989,    33,    15,    16,  1942,  1943,  1944,  1945,   219,
      15,    16,  2676,   118,  3358,   594,  3324,    48,   228,   291,
     352,  3329,    15,    16,   197,  2209,   216,    58,    59,   510,
     285,   154,   536,   338,   178,  2447,   390,   338,   546,    20,
     127,  2932,    15,    16,   173,  1350,   575,   328,   147,    15,
      16,   300,    33,   352,  3327,   173,    46,  3330,   168,  1174,
    2328,   101,   593,   178,   104,   616,   174,    48,   134,    15,
      16,   601,   595,   358,   213,   583,   175,    58,    59,   371,
     147,   210,  2640,   595,  2352,  2353,   595,   474,  3366,   476,
    2664,   127,   210,    15,    16,   174,   595,   357,  1047,   593,
     351,   291,   237,   354,  1301,   960,   493,  1304,  3415,  3382,
     497,   268,  1061,   178,  2672,  1312,   221,  1370,   299,   506,
     555,  1370,   601,   510,  2728,   512,  1826,  2326,   353,   178,
     351,  2330,   519,   354,  2707,    92,  1648,   321,   525,  2712,
    2713,   334,   593,  1340,  1341,  2344,  2345,  3021,   358,   613,
     614,  1362,  1852,   519,   415,  2354,  1139,   568,  2731,  2950,
     547,   548,   467,  1776,   448,    62,   351,  2464,  2310,   354,
    2310,    15,    16,   351,   572,   351,   354,   421,   354,   566,
    3615,  2380,   402,  2424,   216,   394,  3464,   595,   575,  1442,
     577,   268,  2805,  1442,   337,  2271,   390,   421,  2424,   553,
    1899,   588,   589,   237,   194,   382,   593,  1147,  2697,   390,
     436,   440,   599,  1334,   601,   602,  2665,  2666,   457,   606,
     607,   569,   588,   567,  1164,  1029,  1030,   532,   526,   589,
     548,   532,  3213,   620,   621,   622,   351,   394,   571,   354,
     627,  2418,   351,   571,  2443,   354,  1050,  1947,   562,   351,
    1626,   571,   354,  2329,   521,  2331,  1060,  3751,  1958,   291,
    1620,  1637,  2338,   521,  1640,  1380,  2289,  1181,  1072,  1073,
    1074,  2257,   380,   351,   615,  2351,   354,  2461,  1082,    15,
      16,  2357,  2424,   764,  2424,   672,   351,  2180,   521,   354,
    2215,   351,  2705,   510,   354,  3727,  2372,   574,   475,   599,
    2824,   380,   351,   335,   351,   354,  3584,   354,   351,   539,
     599,   354,  2308,   593,  1826,  2612,  2613,   394,  3054,   533,
    2804,   351,   599,   595,   354,   623,  3670,  1182,  1443,   580,
     599,   599,  1941,   595,   555,   483,   233,   510,   599,   351,
      15,    16,   354,   594,   595,   732,   351,   734,   525,   354,
     449,   595,  3088,  3089,    15,    16,    62,   580,   351,   580,
    3096,   354,   483,  2631,   593,  2415,   505,  3103,   597,    31,
     539,   758,   759,   760,   595,   762,   763,   764,   351,   766,
     767,   354,   449,  1238,   594,   351,  2944,   868,   354,  1285,
     567,  1305,   561,   562,  1226,   580,    15,    16,  1253,   759,
    2337,   595,   580,   763,   580,   351,   766,  3685,   354,    15,
      16,  3044,  2349,   598,   595,  2827,   803,   595,   594,   595,
     577,    11,  1254,  2947,  2998,   554,  2984,   814,  3002,   351,
      15,    16,   354,   330,   542,  1947,   554,   824,   825,   574,
     200,   181,   829,   548,   434,  3018,  1958,   210,   814,   836,
    3794,   595,  3760,    33,  3762,   487,  3052,  3053,  1374,   825,
     435,    15,    16,   542,  3060,   580,  2958,  3063,  3064,  2998,
     768,   580,   429,  3002,   514,   159,  3538,   517,   580,   116,
     595,   868,    15,    16,  3080,  2422,   595,  3253,    15,    16,
      35,  3790,   594,   595,   128,   959,   530,   440,  3094,   140,
     577,   513,   580,  3099,  3100,  3101,  3102,   351,   539,   150,
     354,    15,    16,    58,    59,   580,   594,   595,   181,   368,
     580,   555,   152,   427,   818,   115,    69,   233,  3610,   594,
    1773,   580,   349,   580,   594,   595,   568,   580,   235,  2836,
     143,  1005,   267,    15,    16,   932,  1870,   594,   595,  3827,
     580,   594,   595,  1449,    79,  2697,  2632,  2697,   539,   179,
    1803,  3542,  1773,  1395,  2805,   595,   228,   562,   580,  1766,
     565,    15,    16,   960,   367,   580,   963,   964,  1775,  2805,
     477,  1778,  1779,  1780,   565,   215,  2656,   580,   250,  2289,
     595,   287,  1803,  1542,   491,  3902,    15,    16,   964,   186,
      67,   594,   595,  1973,  2241,  2242,   607,   580,  2768,   143,
    2310,  1984,   593,   322,   580,   351,   409,   162,   354,  3362,
    1007,   457,   595,  3146,  1011,  1012,   510,    15,    16,   595,
    2769,   268,    15,    16,   580,   440,  2101,  2250,   111,    15,
      16,  1007,   382,    15,    16,  1126,  1012,   343,   251,   595,
     593,   251,   415,   262,  2030,    12,  1644,    51,   580,   440,
    1047,   510,   440,  2805,  3746,  2805,  3432,    15,    16,  1596,
     257,  3245,  3246,   595,  1061,  2725,   351,  2376,   312,   354,
    3238,   578,  1163,   208,   151,    15,    16,  2269,  1941,   414,
     351,   595,  1941,   354,   115,    15,    16,    15,    16,  1639,
    2107,  2108,   505,    15,    16,   285,   390,    12,   317,   350,
    3007,  1826,   483,    15,    16,  2198,   600,   251,  2418,   382,
    2198,  4020,   111,   483,  2424,   422,  1113,   216,  1532,   371,
      15,    16,   351,    18,  4078,   354,   580,   111,   235,  1126,
    2100,   403,   130,   501,   364,   351,   521,   505,   354,   246,
    2110,   595,   352,  1557,  3678,  2735,   175,   344,   529,    15,
      16,   762,    61,  1244,   354,   505,   351,    15,    16,   354,
     127,    70,   168,   318,    15,    16,  1163,  2289,    15,    16,
     301,  1168,  1586,    82,  2267,   491,  1173,    91,   593,  2267,
    1704,  1705,   265,   257,  1181,  1182,   170,   351,    15,    16,
     354,   510,   595,    15,    16,  3786,   227,  1173,    15,    16,
    2497,     0,   593,    15,    16,   593,  3707,  1733,   351,   597,
     595,   354,   127,   368,   351,   265,   535,   354,   371,  3028,
    3158,   111,  1947,    15,    16,  1222,   456,  1224,   440,  1226,
    3364,   384,   505,  1958,   580,   241,   335,   351,   573,  3048,
     354,  1238,    15,    16,    15,    16,   124,  1244,   445,   595,
      15,    16,    15,    16,   389,   338,  1253,  1254,   509,   553,
     112,   139,   336,  2356,   483,   174,   265,  1264,  2356,   351,
     116,   180,   354,   143,  2466,  1272,   353,    15,    16,   115,
     170,   265,    15,    16,    15,    16,  1377,   593,   338,  1286,
    1287,  1288,  1289,  1290,  1291,   580,  2418,   351,    77,   128,
     354,   595,  2424,   217,   213,  1302,  1303,  3898,  1305,   580,
     595,   111,   362,  1289,  1311,  1291,  1286,  1287,  1288,   426,
    1290,   235,   351,  1227,   595,   354,    15,    16,   334,   238,
     334,   541,   246,  1303,  1331,  3638,  3639,   342,   377,   338,
     175,  1311,   586,   587,   588,   589,   590,   591,   501,   147,
     210,   580,   198,   351,   338,  1331,   354,    19,   351,   572,
     334,   354,   178,   368,   580,   351,   595,   186,   354,   351,
     170,   524,   354,  3587,   226,   265,  1280,   508,    24,   595,
    1377,   593,   440,   147,   322,   580,   599,  2697,   487,  2323,
    2324,   227,   194,   351,  1391,    12,   354,   197,  1395,   178,
     595,   163,   808,   534,   111,    15,    16,   321,   268,   225,
    3544,   351,   190,    12,   354,  1391,   580,   421,    15,    16,
     440,   351,   268,   351,   354,   260,   354,   406,   572,   351,
    3269,   595,   354,   407,    15,    16,   238,   580,   257,   351,
      91,  3379,   354,   580,   448,   600,   505,   178,   338,   532,
    1447,  1448,   595,  1450,  1451,   599,   351,   119,   595,   354,
     483,   111,    74,   170,    76,   265,   580,    15,    16,   568,
    1467,   380,  1469,  3312,  2549,    15,    16,  1447,  1448,  1383,
    2463,   595,   532,   312,  3586,   351,   457,   178,   354,   268,
    1394,    15,    16,   351,    78,  2805,   354,   476,   580,   145,
     351,  2594,   114,   354,   351,   510,  2594,   354,   153,   915,
     127,    95,   426,   595,    15,    16,    15,    16,    15,    16,
     170,   501,   440,   135,   351,   505,   580,   354,   127,   351,
     390,  3780,   354,   532,   351,   593,   352,   354,   338,   351,
     563,   595,   354,   285,   396,  1542,  1543,   197,   532,    15,
      16,   580,   523,   115,  2104,   464,    30,   169,   265,   351,
     251,   287,   354,   322,  2289,   594,   217,   440,  2166,  1660,
     216,   551,   510,   593,   488,   337,    15,    16,   351,   601,
     351,   354,   580,   354,   235,  4086,   351,   580,   351,   354,
     194,   354,   521,  2007,   580,   246,  2582,   535,   580,    73,
    3260,   594,  2126,    15,    16,   332,  2020,  1604,   594,    15,
      16,  2941,   594,   351,  3527,   265,   354,   343,   351,   209,
     351,   354,   580,   354,    15,    16,   445,   252,    15,    16,
     255,   338,  3929,   542,   238,     8,   594,   489,  3806,    52,
     580,  2055,   532,   190,   178,   291,    16,   389,    61,  1646,
     580,   378,   580,   382,   594,   593,    29,   574,   580,   507,
    3963,  3964,   351,  1660,   594,   354,   594,   141,   580,  1666,
     321,  1668,   594,    15,    16,   593,  1673,  1674,   595,  1676,
      24,  3011,   594,  2805,   598,   580,   559,   560,   338,   335,
     476,   505,  1689,  2418,   228,  1692,   593,  1673,  1674,  2424,
    1676,   213,  3951,  2117,   601,   948,   949,  1704,  1705,  1706,
    1707,   497,   178,  1689,   580,   457,  1692,  1714,  1715,  1716,
     593,    16,   580,    15,    16,  3638,  3639,    71,   594,   580,
    1706,  1707,   532,   580,   213,  1732,   594,   213,  1714,  1715,
    1716,   351,   985,   594,   354,  1742,   475,   594,    15,    16,
     228,   510,   209,   580,   351,   153,   153,   354,   580,   588,
     589,   590,   591,   580,   478,   527,   391,   594,   580,   247,
     351,  2705,   594,   354,   430,   426,   535,   594,    71,   555,
    1777,   543,   594,   181,   181,   551,    15,    16,   580,   401,
     190,  2606,   188,  1790,  2647,   509,   525,  4046,  1702,  4048,
    1797,  1777,   594,   351,   273,   274,   354,   580,  1712,   580,
    2336,   351,    15,    16,   354,   580,   160,   580,   594,   595,
     346,  1797,  4071,   594,  2841,   532,  2647,   351,    16,   594,
     354,   594,  1736,   128,   593,  2769,   551,   488,   567,    15,
      16,   487,   580,   225,   257,  2862,  2863,   580,  2655,   580,
     351,   507,   351,   354,   351,   354,   594,   354,  2951,  4108,
    4109,   594,   205,  2951,   207,  1956,  3779,  3780,  2885,    15,
      16,    70,   216,    47,    15,    16,   178,   213,  3564,  3565,
    3566,  3567,   532,  1974,   145,   351,    15,    16,   354,   394,
     574,   580,   288,   289,   268,   551,  1893,   293,   294,  3146,
     530,    70,   238,   377,  3590,   594,   594,  1811,   413,  2000,
    1907,   567,   351,  3006,  2005,   354,  1820,  1821,  3006,    15,
      16,  1918,   568,   216,   398,   555,   593,  1831,  1832,  1833,
    1834,   480,  1836,  1837,   601,   404,   405,   486,   443,   351,
     128,   599,   354,    58,    59,   351,  3039,   291,   354,   595,
     555,  3039,    67,  3866,   428,   216,  3834,  2555,   601,  1956,
     351,   549,  1959,   354,   351,  1962,   475,   354,  3881,  3737,
     580,  3739,  1969,  1970,  1971,   174,  1973,  1974,  3529,  1976,
     348,  3894,  1979,   580,   594,   329,   593,    97,   594,   595,
     595,   335,  1962,  1969,  1970,  1971,   601,   594,     6,   580,
      15,    16,  2093,  2000,    71,   174,   480,   174,  2005,   351,
     331,   332,   354,   594,   213,   593,    12,   312,  1922,  1923,
     555,  1925,   415,  1927,  1928,  1929,  1930,  1931,   147,   148,
    1934,  1935,   580,   100,  2125,  1674,   329,  1676,  3951,   238,
     580,    11,   335,   153,   213,    57,   594,   593,  3708,  3241,
    3963,  3964,  3023,  3024,   594,    24,   580,   594,   595,   351,
     595,   593,   354,   182,   594,   595,   601,  2591,   593,   238,
     594,   181,   593,   192,   335,  1714,  1715,  1716,   145,   580,
    2805,   580,   593,   580,   351,   322,  1211,   354,   595,  1214,
    4003,  3108,  1217,   594,   510,   594,  2093,   594,   554,   555,
    4013,   557,    71,   559,    18,   542,   543,   400,   545,   594,
     595,  3797,   231,  2637,   580,  3208,   343,   594,   595,   601,
    3208,  2118,   351,   242,   312,   354,   141,   555,  2125,  2126,
    2544,   127,  3679,  4046,  2225,  4048,  2227,  2228,   156,   594,
     595,   580,   593,   487,    97,  4058,   213,   159,   351,   593,
     269,   354,   164,   594,   595,   594,   451,   452,  4071,  3819,
    4073,  3144,  4075,   175,   594,   595,   593,  3714,   580,  4082,
    3717,  3718,  3719,  3720,   580,   351,   145,    91,   354,  4092,
     487,   380,   594,   593,  2181,  2276,  2277,   381,   594,   580,
     593,   160,   593,   580,   487,  4108,  4109,   430,   367,    15,
      16,  2198,   198,   594,   593,   351,   325,   594,   354,  3189,
     351,   380,   593,   354,   593,  2715,  4129,  4130,   593,  2216,
    2217,  4134,   351,   290,   568,   354,   487,   180,  2225,   143,
    2227,  2228,   593,   147,   594,   595,     6,   593,   580,   593,
     307,   594,   595,   128,   537,   593,  2746,   216,   593,  3164,
      58,    59,   594,    97,  2754,   351,  2347,  2757,   354,   593,
     213,   175,   329,   451,   452,   594,   595,   593,  3815,  3816,
    2267,   593,   382,   510,   593,   568,   190,  3824,    71,  2276,
    2277,   195,  2373,   593,   513,   593,    56,   299,   580,   584,
     585,   586,   587,   588,   589,   590,   591,   593,   535,   349,
     594,   595,   594,   217,   594,   595,  3060,   568,   261,  3063,
    3064,   225,  2216,   580,   593,  2317,   593,   270,   593,  2316,
     593,   235,   291,   593,  2321,  2327,  3080,   594,   593,  2326,
     593,  2333,   246,  2330,   595,  2332,   351,   251,   593,   354,
     593,   440,   593,   228,   593,  2342,   260,  2344,  2345,   448,
    2347,   580,   145,  2355,   593,   199,   593,  2354,  2360,  2356,
     329,   131,   594,   595,  2366,  2367,   335,   593,  2365,   594,
     595,   594,   595,   594,   595,   593,  2373,   580,   390,   593,
       3,   593,  4068,  2380,  2381,   593,     9,    10,   593,  2365,
     501,   594,   593,  3141,  3142,   505,   584,   585,   586,   587,
     588,   589,   590,   591,   580,   343,    29,   321,    25,    26,
     594,   595,    35,   593,    71,   525,    39,   513,   594,   210,
     487,   594,   595,   216,  2974,   593,    83,   312,   593,   343,
    2334,  2335,   594,   595,   580,   502,   593,    33,   352,   580,
     593,    58,    59,    60,   593,  2442,  2443,   111,   594,   593,
      67,   580,   595,   594,    71,  2359,   593,   567,  2872,   593,
     559,   560,    79,    59,   461,   594,  2442,   593,   382,   593,
     128,   594,   595,   469,   470,   471,   472,   473,   474,  1099,
    1100,   491,   492,   100,   580,   495,   496,    71,   593,   499,
     500,   593,   488,   446,   593,   137,   138,   114,  2912,    83,
     117,   594,   595,   594,   595,   101,   170,   130,   104,    36,
    2414,   464,   426,   593,   163,   359,   112,  3265,   487,   594,
     595,   594,   595,   593,   368,  3459,  3460,  3125,   145,   593,
     374,   594,   595,   197,   448,   593,   329,   593,   122,   594,
     595,   205,   335,   594,   595,   594,   595,   594,   595,   502,
    3289,  3290,   505,   593,   507,    31,   594,   595,   594,   595,
     594,   595,   332,  3302,   593,   580,   451,   452,  2565,  3308,
    2567,  2568,  2569,  2570,   488,    15,    16,   104,   594,   595,
     593,  2578,  3497,   240,   111,   594,   595,  3573,  3503,   542,
     594,   595,  3331,   593,  2591,  3334,   213,  2594,   551,   568,
     593,   265,  2578,   594,   595,   222,   593,   400,  2568,  2569,
    2570,  2608,  2609,  2610,    12,   593,   460,  3705,   594,   595,
     237,   594,   595,   393,  2621,   395,   595,   541,    49,  3155,
    2627,   178,  2629,   594,   595,   262,   163,  2728,   594,   595,
    2637,   555,    11,   170,    42,   594,   595,    49,  2608,  2609,
    2610,   595,   128,   310,   312,   343,   240,   435,   572,   541,
     574,   594,   595,   594,   595,   105,   106,   107,   108,   109,
     197,  3817,  3818,   290,   338,  3475,  3476,   334,  2960,  2961,
     594,   595,   331,   332,   598,   599,    84,   588,   337,   448,
     307,    89,  2922,  2923,   487,  3191,  3192,   529,   593,   584,
     585,   586,   587,   588,   589,   590,   591,   551,   251,   175,
    2707,   483,   483,   285,   483,  2712,  2713,  2621,  2715,  3467,
    3468,   501,  3470,  3471,    61,   262,   310,   323,    97,   144,
     481,  2728,    81,    70,  2731,   392,   595,   345,   265,   497,
     594,  3550,  3551,   360,   537,    82,   115,   331,   332,  2746,
     334,   368,   228,   143,   114,    25,    26,  2754,   100,   769,
    2757,   201,   202,   203,   204,   600,     6,   593,    99,     4,
    2767,   439,   567,    55,   250,   568,   407,   156,   100,  2776,
     595,   601,  2779,    67,    12,   571,  2783,   594,    58,    59,
      60,   594,  2789,   451,   452,   322,  2793,    67,   510,  2796,
     127,    71,   595,  2779,     9,   595,  2803,   601,   392,    79,
     337,   338,   181,  3901,   601,   432,   593,  2814,   475,  2789,
     594,  3419,   250,    49,  2821,  2729,  3812,  1022,  1023,  1024,
     100,   594,   230,  2737,   601,   145,   312,   174,  2835,  1034,
     600,   210,   574,   180,   114,  2821,  3761,   117,   595,  3472,
    3473,  3474,   593,   501,   285,   331,   332,   257,   285,   455,
     595,   366,   302,  3678,   304,   305,   306,   595,   532,   521,
     487,  1066,  2963,   313,  1069,   145,   213,   595,   527,   502,
    3689,   521,  3508,   228,  3693,   502,   595,   595,   595,   506,
    2981,   475,   261,   588,   543,  1090,  1091,   175,   521,  1094,
     175,   238,   300,   229,   499,   528,   165,  3433,   175,  2906,
     595,   351,   483,   530,   354,   547,   595,  2914,   459,  1114,
    1115,   517,   369,   123,   541,  3911,   549,   403,   586,   587,
     588,   589,   590,   591,   343,   595,   595,   593,   147,  3748,
    3749,   594,  2939,   213,    36,   147,   147,   549,   388,   147,
     546,   147,   222,   147,  2951,  2952,   147,  2954,   147,   147,
     147,   147,   147,   361,   147,   147,  2963,   237,   147,   147,
     595,   576,  2969,   554,   181,   451,   452,   343,   595,   343,
     250,   343,   206,   510,  2981,   595,   462,   514,   595,   595,
     517,  3977,  2989,  3530,  2954,   594,   109,   437,   438,   588,
     527,   178,   594,   594,  3630,   532,   594,   594,   535,  3006,
    2914,  4104,   104,   382,   594,   594,  4104,   178,   587,   111,
     290,  3018,   595,   593,   449,   493,   594,   594,   594,   594,
     367,  3028,   594,  3030,    25,   595,   594,   307,   594,  4127,
     594,   593,  3039,   380,   593,   591,   594,  3044,   593,   572,
     394,  3048,  3579,  4146,   214,   595,   595,   593,  4146,   586,
     587,   593,   188,   601,   177,   463,   178,  3158,   594,   457,
     389,   163,  3987,  3988,   448,  3990,    67,   446,   170,   595,
      71,   595,   175,    47,   475,   319,   147,   439,   475,   475,
     360,   204,   475,   475,    70,   367,   367,   521,   368,   367,
     498,   123,   236,   502,   236,   197,   502,   168,   584,   585,
     586,   587,   588,   589,   590,   591,  4031,   367,  4033,  4034,
     123,   182,   128,   114,    47,   367,   365,   464,   261,   367,
     570,   192,  3223,   502,   367,   593,   505,   410,    47,   555,
     580,   581,   582,  3140,  3141,  3142,   601,   141,   594,   594,
     224,   224,   601,   594,   260,   594,   594,   601,   601,   601,
     594,  3158,   432,   595,   594,   601,   601,   521,   521,    25,
      26,   521,   510,   265,   577,   595,   257,    47,   521,   593,
     241,   242,   593,     6,   349,   178,   178,   121,   178,   302,
      13,    14,  3189,   306,  3792,  3722,   225,  3790,    97,   178,
     313,   232,    25,    26,    60,   542,  3203,  4120,   269,  3113,
     147,  3208,   601,   574,   147,    71,   601,   487,   338,  3310,
      12,    13,   228,    79,   595,   235,  3223,  3131,   235,   356,
     322,   303,   502,    56,   100,   128,   506,    60,    61,   100,
     238,   333,    65,   238,   100,   337,   338,   238,    71,   595,
     601,   348,   593,   593,   153,   521,    79,   423,   114,   594,
     530,   117,   190,   593,    87,   367,   200,   328,  3265,   489,
     352,   541,   601,  3275,   588,   388,    91,   100,   593,  1474,
     593,  3807,   181,   226,    91,   226,   594,   594,  3379,   145,
     594,   114,   594,   594,   117,   594,   516,   594,    90,   594,
     594,   124,   125,   601,   594,   588,   312,   593,   131,   128,
     343,   367,   210,  3310,   213,   594,   139,   252,   379,   595,
     143,   595,   145,   593,   601,   438,   118,   178,   262,   594,
     548,   228,   248,    67,   273,   235,  3240,   595,  3335,   131,
     331,   332,   343,   235,  3435,  3342,   337,   238,   238,  1544,
     173,   285,   343,  1548,   595,   378,   343,   213,   595,   343,
    3357,   153,   261,   155,    71,    18,   222,   461,   593,   343,
     343,   270,    47,   440,   593,   167,   593,  1572,   593,   510,
     251,   237,  3379,   594,   442,   134,   594,   244,   211,   380,
     213,   594,   190,   574,   593,   450,   188,   147,   595,   222,
     595,   594,   217,   595,  4142,   235,   235,  3311,   114,   593,
     217,   114,   632,   376,   237,   595,    75,   637,   510,   312,
     235,   213,   514,   593,  3421,   517,   594,  4020,   235,   221,
    4028,   246,   601,   457,   290,   527,   593,   130,  3435,   246,
     532,   461,  3346,   535,   594,   451,   452,   381,   668,   595,
     436,   307,   594,   444,   594,   389,    18,   570,  3455,   594,
      33,   309,   240,   389,   684,   594,   594,   290,   260,   582,
    3467,  3468,   594,  3470,  3471,   594,   594,   594,   377,   574,
     225,   595,   593,   382,   307,   419,   594,   594,   311,  3486,
    4088,   601,   593,   312,   586,   587,  3587,    47,  4025,   195,
     309,   277,   510,   555,   360,   595,   321,   727,   728,   729,
     730,   394,   368,   510,   321,   555,   593,   593,   593,   739,
    4113,   565,   593,   457,   347,   593,   565,   593,   343,   352,
     593,   548,   114,   238,   238,   337,   343,   360,   338,  3536,
    3537,   594,   593,   338,   367,   368,   595,   446,   482,   483,
    3547,   542,   309,   158,   510,  4148,   510,   510,   451,   452,
     238,  3537,   147,   505,   594,    16,   594,   501,   225,   333,
     504,   505,   555,   479,   397,  3572,   432,   559,   584,   585,
     586,   587,   588,   589,   590,   591,   409,   410,   411,   412,
    3587,   383,   560,   555,   574,   595,  3572,   423,   338,   237,
     548,   349,   274,   502,   492,   594,   142,   175,   507,   432,
     402,   426,   593,   571,    30,   593,   408,   602,   552,   426,
     175,   593,   363,   594,   416,   594,   525,   594,   593,   123,
     512,   487,   451,   452,   123,   145,   593,    69,  3635,   382,
     147,   402,   574,  3640,     5,   178,   502,   571,   440,    30,
     506,    61,   551,    61,   349,   595,   594,   493,   253,   418,
      47,   453,   454,    47,   487,   225,   593,   141,   567,   599,
     349,   593,   349,   488,   530,   122,   130,    47,    47,   502,
     140,   488,    47,   506,    16,   541,   571,   209,   141,   267,
     602,   584,   585,   586,   587,   588,   589,   590,   591,   113,
     136,    47,    47,   599,   496,   594,   593,   530,  3705,    47,
     594,   277,    53,   594,  3711,   433,   594,   147,   541,   599,
     141,   595,   513,   193,   599,   210,   595,   594,    53,  3820,
     595,   414,   175,   525,   175,   175,   338,   114,   593,   513,
    3737,   573,  3739,   560,  3741,   253,   448,   967,   176,  3645,
    1937,  2129,  3119,  2305,   614,  3672,   548,  3355,   550,  3793,
    3970,  3353,  3759,  3971,    80,  3535,   585,   586,   587,   588,
     589,   590,   591,   945,  4148,  3772,   599,  3357,  4100,  3527,
    3527,  3527,  4110,  3527,  3527,  3527,  3527,  3527,  4000,  3527,
    3527,  3859,  3527,  4000,  3964,  3527,  3884,  3527,  1018,  1019,
    3885,  1386,  1648,  2358,  3711,  1388,  2583,  1027,  1028,  1029,
    1030,  1031,  1032,  1033,  3543,  2939,   983,  3573,  1038,  3810,
    3977,  1041,  1042,  3820,  1044,  3205,  1046,  3911,  3984,  4025,
    1050,  3828,   483,  3722,  1054,  1055,  1056,  1057,  3929,  1059,
    1060,  1442,  3134,  3463,  2807,  1899,  3048,  1067,  1068,    18,
    1070,  1071,  1072,  1073,  1074,  1907,  1076,  2443,  1078,  2319,
    1080,  1081,  1082,  1083,  1084,  1085,  1086,  1087,  1088,  1089,
    2383,  3028,  1092,  1093,  3495,  1095,  3104,  1097,  3071,  3071,
    3274,  1101,  3319,  1103,  1104,  3807,  3310,  3032,  2981,  3745,
    3489,  3982,  3758,    12,  3621,    12,  1116,  1117,  3748,  1454,
    3681,  3749,  1122,  3693,  3901,  1125,  1967,  3689,  3503,  3547,
    3814,  1906,  1132,  1133,  1134,  3030,  1136,  2376,  1785,  3279,
    3029,  1347,    91,  1143,  1144,  1145,  1438,  1147,  1148,  1149,
    1150,  1151,  3929,  1153,  1154,  1155,  1156,  1157,  1158,  1159,
    1160,  2193,  1706,   964,  1164,  1165,  2578,   516,  2207,  3946,
    3947,  2160,   560,    12,    13,   271,   272,   273,   274,   275,
     276,  2914,   278,   279,   280,   281,   282,   283,   284,  3581,
     286,  1721,  2555,  3866,   143,   854,  2006,  1061,   147,  2268,
    2996,  3462,  3947,  3946,  3603,  3982,  2796,  1034,  3881,  2111,
    3039,  1100,  3456,  3818,  4088,  3435,  2212,    18,  1254,  1976,
    2156,  3894,  3208,  1226,   173,  2197,   175,  2946,  4005,  2945,
    3006,  4127,  3916,  3917,  1467,  4012,  3901,   628,   550,  1774,
     540,   190,  1665,  2767,  2928,  1294,   195,  1259,  3975,  4021,
    3936,    90,  4123,  3994,  4146,  3312,  1272,  1727,  2951,  2639,
    2989,   210,  3444,   837,  3235,  1692,  1262,  3562,   217,   532,
    2457,  2565,  1272,   533,   841,  1219,   225,  3568,   614,   118,
    2087,  1281,  1121,  2534,   479,   614,   235,   479,   637,   614,
      -1,    -1,   131,    -1,    -1,  4072,    -1,   246,    -1,    -1,
    4077,    -1,   251,    -1,    -1,    -1,    -1,    -1,   404,   405,
      -1,   260,    -1,    -1,   153,    -1,   155,    -1,    -1,   668,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4104,   167,    -1,
    4003,    -1,    -1,    -1,    -1,   684,  4113,    -1,    -1,    -1,
    4013,   105,   106,   107,   108,   109,  4123,    -1,    -1,   188,
    4127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4146,
      -1,  4148,   321,    -1,   213,    -1,    -1,    -1,    -1,    -1,
      -1,   730,   221,    -1,    -1,  4058,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   343,    -1,    -1,    -1,    -1,    -1,
    4073,    -1,  4075,   352,    -1,    -1,    -1,    -1,    -1,  4082,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4092,
      -1,   260,    -1,    -1,    -1,    -1,    -1,    -1,    13,    14,
      -1,    -1,    -1,   382,    -1,    -1,    -1,   201,   202,   203,
     204,    -1,    -1,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    -1,  4129,  4130,    -1,    -1,
      -1,  4134,    -1,    -1,    49,    50,    -1,    -1,    -1,    -1,
      -1,    56,    -1,    -1,    -1,    60,    61,   426,    -1,    -1,
    1480,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   448,
      -1,    -1,    -1,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,
      -1,    -1,  1532,   118,   119,   120,    -1,    -1,   302,   488,
     304,   305,   306,    -1,   383,   130,   131,    -1,    -1,   313,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1557,   143,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,    -1,   408,
     155,    -1,    -1,    -1,    -1,    -1,    -1,   416,    -1,    -1,
      -1,  1581,  1582,  1583,    -1,    -1,  1586,   172,    -1,    -1,
      -1,    -1,   541,    -1,    -1,    -1,    -1,    -1,  1598,    -1,
      -1,   440,    -1,   188,    -1,   554,   555,    -1,   193,    -1,
      -1,   196,    -1,    -1,   453,   454,    -1,    -1,   967,    -1,
    1620,    -1,    -1,   572,   388,   574,  1626,    -1,    -1,  1629,
      -1,  1631,    -1,    -1,    -1,    -1,   221,  1637,   223,  1639,
    1640,    -1,    -1,    -1,    -1,   594,   595,    -1,    -1,   598,
     599,    -1,    -1,    -1,   239,    -1,    -1,   496,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1018,
    1019,   256,    -1,   437,   438,   260,    -1,    -1,  1027,  1028,
      -1,    -1,  1031,  1032,  1033,    -1,   525,    -1,    -1,  1038,
      -1,    -1,  1041,  1042,    -1,  1044,    -1,  1046,    -1,    -1,
      -1,  1701,    -1,    -1,    -1,  1054,  1055,  1056,  1057,   548,
    1059,   550,    -1,    -1,    -1,    -1,    -1,    -1,  1067,  1068,
      -1,  1070,  1071,    -1,    -1,    -1,    -1,  1076,    -1,  1078,
      -1,  1080,  1081,    -1,    -1,  1084,  1085,  1086,  1087,  1088,
    1089,    -1,    -1,  1092,  1093,    -1,  1095,    -1,  1097,    -1,
      -1,    -1,  1101,    -1,  1103,  1104,    -1,    -1,    -1,    -1,
      -1,    -1,   347,    -1,    13,    -1,    -1,  1116,  1117,    -1,
      -1,    -1,    -1,  1122,    -1,    -1,  1125,    -1,    -1,    -1,
      -1,    -1,   367,  1132,  1133,  1134,    -1,    -1,    -1,    -1,
      -1,    -1,   377,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   387,    -1,    -1,    -1,   570,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1165,   581,   582,    -1,
      -1,    -1,   407,    -1,    -1,   410,    -1,   412,    -1,    -1,
     415,    -1,    -1,   418,    -1,   420,    -1,    -1,    -1,    -1,
     425,    90,    -1,   428,    -1,    -1,    -1,    -1,    -1,    -1,
     435,    -1,    -1,    -1,    -1,   440,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   448,    -1,    -1,    -1,    -1,   453,   118,
      -1,    -1,   457,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   480,    -1,    -1,    -1,    -1,
      -1,   486,    -1,    -1,   153,    -1,   155,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    25,    26,    -1,    -1,   167,    -1,
    1920,    -1,    -1,  1272,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1281,    -1,    -1,    -1,    -1,    -1,    -1,   188,
      -1,    -1,    -1,   528,    -1,    -1,    -1,    58,    59,    60,
      -1,    -1,    -1,    -1,    -1,   540,    67,    -1,    -1,   544,
      71,    -1,    -1,   548,   213,    -1,    -1,    -1,    79,   554,
      -1,    -1,   221,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1986,    -1,    -1,   100,
    1990,    -1,    -1,    -1,   579,  1995,  1996,    -1,    -1,    -1,
      -1,    -1,    -1,   114,  2004,    -1,   117,  2007,   593,    -1,
      -1,   260,    -1,    -1,    -1,    -1,    -1,  2017,    -1,  2019,
    2020,    -1,    -1,  2023,  2024,  2025,  2026,  2027,    -1,    -1,
    2030,    -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,  2039,
      -1,    -1,    -1,    13,    14,    -1,    -1,    -1,  2048,    -1,
    2050,    -1,  2052,  2053,  2054,  2055,    -1,    -1,    28,  2059,
    2060,  2061,    -1,    -1,    34,    -1,  2066,  2067,  2068,    -1,
    2070,    -1,  2072,    -1,  2074,    -1,  2076,    -1,  2078,    49,
      50,    -1,    -1,    -1,  2084,    -1,    56,    -1,    -1,    -1,
      60,    61,    -1,    -1,  2094,    -1,    -1,    -1,    -1,    -1,
      -1,  2101,   213,    73,  2104,    -1,    -1,    -1,    -1,    -1,
    2110,   222,    -1,  2113,    -1,    -1,    -1,  2117,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,
      -1,  1480,    -1,    -1,   383,    -1,    -1,    -1,    -1,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,   119,
     120,    -1,    -1,   402,    -1,    -1,    -1,    -1,    -1,   408,
     130,   131,    -1,    -1,    -1,    -1,    -1,   416,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,
      -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,    -1,
      -1,   440,    -1,    -1,    -1,    -1,   307,    -1,    -1,    -1,
      -1,    -1,   172,    -1,   453,   454,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,
      -1,    -1,    -1,   193,    -1,    -1,   196,    -1,    -1,    -1,
      -1,    -1,  1581,  1582,  1583,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,    -1,   360,
      -1,   221,    -1,   223,    -1,    -1,    -1,   368,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   239,
      -1,  1620,    -1,    -1,    -1,    -1,   525,    -1,    -1,    -1,
    1629,    -1,  1631,    -1,    -1,    -1,   256,    -1,    -1,    -1,
     260,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   548,
      -1,   550,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   432,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1701,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   487,   347,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   502,    -1,    -1,    -1,   506,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   387,    -1,   530,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     541,    -1,    -1,    -1,    -1,    -1,    -1,   407,    -1,    -1,
     410,    -1,   412,    -1,    -1,   415,    -1,    -1,   418,    -1,
     420,    -1,    -1,    -1,    -1,   425,    -1,    -1,   428,    -1,
      -1,    -1,    -1,    -1,    -1,   435,    -1,  2467,    -1,    -1,
     440,  2471,    -1,    -1,    -1,    -1,    -1,    -1,   448,    -1,
      -1,    -1,    -1,   453,    -1,    -1,    -1,   457,    -1,    -1,
      -1,    -1,    -1,  2493,  2494,    -1,    -1,    -1,    -1,    -1,
       6,    -1,    -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,
     480,    -1,    -1,    -1,    -1,  2515,   486,    -1,    -1,    25,
      26,    -1,    -1,    -1,  2524,    -1,  2526,    -1,  2528,    -1,
      -1,    -1,    -1,    -1,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    41,  2544,    43,    44,    -1,    -1,  2549,
      56,    -1,    -1,    -1,    60,    -1,    -1,    -1,   528,    -1,
      -1,    59,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,
     540,  1920,  2572,    79,   544,    -1,    -1,    -1,   548,    -1,
      -1,    87,  2582,    -1,   554,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,   104,    -1,   114,   579,
      -1,   117,    -1,    -1,   112,    -1,    -1,    23,   124,    -1,
      -1,    -1,    -1,   593,    -1,   131,    -1,    33,    34,    -1,
    2630,   129,    -1,   139,    -1,    -1,  2636,  1986,    -1,   145,
      -1,  1990,    -1,    -1,    -1,    -1,  1995,  1996,   146,    -1,
      -1,    57,    58,    59,    -1,  2004,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    70,    -1,    -1,   173,  2017,    -1,
    2019,   169,    -1,   171,  2023,  2024,  2025,  2026,  2027,  2679,
      86,    -1,    88,    -1,    90,   183,   184,    -1,    -1,    -1,
    2039,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,  2048,
      -1,  2050,  2702,  2052,  2053,  2054,    -1,   213,    -1,    -1,
    2059,  2060,  2061,    -1,    -1,    -1,   222,  2066,  2067,  2068,
      -1,  2070,    -1,  2072,    -1,  2074,    -1,  2076,   226,  2078,
      -1,   237,    -1,    -1,    -1,  2084,    -1,    -1,   144,   145,
      -1,    -1,    -1,   149,    -1,  2094,   152,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,
      -1,  2110,    -1,    -1,  2113,   263,   264,    -1,   266,    -1,
      -1,    -1,    -1,   179,    -1,   181,    -1,    -1,    -1,    -1,
     186,    -1,    -1,   189,   290,    -1,  2786,  2787,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   307,    -1,    -1,    -1,   311,   212,   213,    -1,    -1,
      -1,    -1,   218,    -1,    -1,    -1,   314,   315,   316,    -1,
      -1,    -1,   320,    -1,    -1,   323,    -1,    -1,    -1,    -1,
     236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   339,   340,    -1,  2844,    -1,   352,    -1,    -1,    -1,
      -1,   257,    -1,    -1,   360,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,  2869,
    2870,    -1,  2872,    -1,   372,   373,    -1,    -1,    -1,   285,
      -1,    -1,  2882,    -1,    -1,    -1,    -1,  2887,    -1,    -1,
    2890,    -1,  2892,  2893,    -1,    -1,    -1,    -1,   396,    -1,
      -1,    -1,    -1,    -1,   410,    -1,    -1,    -1,    -1,    -1,
      -1,   317,  2912,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   327,    -1,    -1,  2924,    -1,   432,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     346,    -1,    -1,    -1,    -1,  2945,   444,    -1,    -1,    -1,
     448,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2974,   381,   382,    -1,    -1,   385,
     386,   487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2990,    -1,    -1,    -1,    -1,    -1,   502,    -1,    -1,    -1,
     506,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3008,    -1,
      -1,    -1,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,
     518,   519,   520,    -1,   530,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   541,    -1,    -1,    -1,   445,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   457,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   561,   562,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   481,    -1,   483,    -1,    -1,
      -1,   487,    -1,    -1,   582,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2467,    -1,
      -1,    -1,  2471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2493,  2494,   552,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   563,    -1,    -1,
      -1,    -1,    -1,   569,    -1,    -1,  2515,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2524,    -1,  2526,    -1,  2528,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3209,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2572,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3249,
    3250,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3258,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2630,    -1,    -1,    -1,    -1,    -1,  2636,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2702,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3389,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3415,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3430,    -1,    -1,    -1,    -1,    -1,    -1,  2786,  2787,    -1,
      -1,    -1,    -1,    -1,  3444,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2844,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2869,  2870,    -1,    -1,    -1,    -1,    -1,  3527,    -1,    -1,
      -1,    -1,    -1,  2882,    -1,    -1,    -1,    -1,  2887,    -1,
      -1,  2890,    -1,  2892,  2893,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3573,    -1,  2924,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3585,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3595,  2945,  3597,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3632,    -1,    -1,    -1,    -1,    -1,  3638,  3639,
      -1,  2990,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3008,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3727,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3765,    -1,  3767,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3777,    -1,  3779,
    3780,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3801,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3812,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3209,    -1,    -1,    -1,  3864,    -1,  3866,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3881,  3882,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3894,    -1,    -1,    -1,    -1,    -1,
    3249,  3250,  3902,    -1,    -1,    -1,    -1,    -1,    -1,  3258,
      -1,  3911,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3950,  3951,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3963,  3964,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3977,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4003,    -1,    -1,    -1,    -1,    -1,    -1,
    4010,    -1,    -1,  4013,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4039,
    3389,    -1,    -1,    -1,    -1,    -1,  4046,    -1,  4048,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4058,    -1,
      -1,  4061,    -1,    -1,    -1,    -1,  3415,    -1,    -1,    -1,
      -1,  4071,    -1,  4073,    -1,  4075,    -1,    -1,    -1,    -1,
      -1,  3430,  4082,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4092,    -1,    -1,  3444,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4108,  4109,
      -1,    -1,    -1,    -1,  4114,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4129,
    4130,    -1,    -1,    -1,  4134,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3585,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3595,    -1,  3597,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3632,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3727,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3765,    -1,  3767,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3777,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3864,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3882,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3902,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,  3950,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    45,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    -1,    71,    72,    73,    74,    75,    76,
      77,  4010,    79,    -1,    81,    -1,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    -1,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,    -1,    -1,
    4039,    -1,   109,   110,   111,    -1,    -1,   114,   115,    -1,
     117,    -1,    -1,    -1,   121,    -1,   123,   124,   125,   126,
      -1,    -1,  4061,   130,    -1,    -1,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,    -1,   144,   145,   146,
      -1,    -1,   149,    -1,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,    -1,   179,    -1,   181,  4114,   183,   184,   185,   186,
     187,    -1,   189,    -1,   191,    -1,   193,   194,    -1,   196,
     197,    -1,   199,   200,    -1,    -1,    -1,   204,   205,   206,
     207,   208,   209,    -1,   211,   212,    -1,    -1,   215,   216,
      -1,   218,    -1,    -1,   221,   222,   223,   224,    -1,    -1,
     227,    -1,   229,   230,    -1,   232,   233,    -1,    -1,    -1,
     237,    -1,    -1,   240,   241,    -1,   243,   244,    -1,   246,
     247,   248,    -1,    -1,    -1,    -1,    -1,   254,   255,    -1,
     257,    -1,   259,    -1,   261,   262,    -1,    -1,   265,    -1,
      -1,    -1,    -1,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,    -1,
      -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,    -1,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,    -1,   340,   341,   342,    -1,   344,   345,   346,
      -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,
      -1,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,    -1,    -1,   476,
      -1,    -1,   479,   480,    -1,    -1,   483,   484,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,    -1,   504,    -1,   506,
     507,   508,    -1,   510,   511,   512,    -1,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,   522,   523,   524,    -1,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,    -1,   539,   540,    -1,    -1,   543,    -1,   545,    -1,
     547,    -1,   549,    -1,   551,   552,   553,    -1,    -1,   556,
     557,   558,   559,   560,    -1,    -1,   563,   564,    -1,   566,
     567,   568,   569,   570,    -1,    -1,    -1,    -1,   575,   576,
      -1,   578,   579,    -1,    -1,   582,    -1,    -1,    -1,   586,
     587,    -1,    -1,    -1,    -1,   592,   593,    -1,    -1,   596,
     597,    -1,    -1,   600,   601,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
      -1,    71,    72,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    -1,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    -1,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,    -1,    -1,    -1,    -1,   109,
     110,   111,    -1,    -1,   114,   115,    -1,   117,    -1,    -1,
      -1,   121,    -1,   123,   124,   125,   126,    -1,    -1,    -1,
     130,    -1,    -1,   133,   134,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,    -1,   144,   145,   146,    -1,    -1,   149,
      -1,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,    -1,    -1,   176,   177,    -1,   179,
      -1,   181,    -1,   183,   184,   185,   186,   187,    -1,   189,
      -1,   191,    -1,   193,   194,    -1,   196,   197,    -1,   199,
     200,    -1,    -1,    -1,   204,   205,   206,   207,   208,   209,
      -1,   211,   212,    -1,    -1,   215,   216,    -1,   218,    -1,
      -1,   221,   222,   223,   224,    -1,    -1,   227,    -1,   229,
     230,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,
     240,   241,    -1,    -1,   244,    -1,   246,   247,   248,    -1,
      -1,    -1,    -1,    -1,   254,   255,    -1,   257,    -1,   259,
      -1,   261,   262,    -1,    -1,   265,    -1,    -1,    -1,    -1,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,    -1,    -1,    -1,   299,
     300,   301,   302,   303,    -1,    -1,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,    -1,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,    -1,   348,    -1,
      -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,    -1,    -1,   476,    -1,    -1,   479,
     480,    -1,    -1,   483,   484,   485,   486,   487,    -1,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,    -1,   504,    -1,   506,   507,   508,    -1,
     510,   511,   512,    -1,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,    -1,   523,   524,    -1,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,    -1,   539,
     540,    -1,    -1,   543,    -1,   545,    -1,   547,    -1,   549,
      -1,   551,   552,   553,    -1,    -1,   556,   557,   558,   559,
     560,    -1,    -1,   563,   564,    -1,   566,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,   575,   576,    -1,   578,   579,
      -1,    -1,   582,    -1,    -1,    -1,   586,   587,    -1,    -1,
      -1,    -1,   592,   593,    -1,    -1,   596,   597,    -1,    -1,
     600,   601,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    -1,    71,    72,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    -1,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,    -1,    -1,    -1,    -1,   109,   110,   111,    -1,
      -1,   114,   115,    -1,   117,    -1,    -1,    -1,   121,    -1,
     123,   124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,
     133,   134,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
      -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,    -1,    -1,   176,   177,    -1,   179,    -1,   181,    -1,
     183,   184,   185,   186,   187,    -1,   189,    -1,   191,    -1,
     193,   194,    -1,   196,   197,    -1,   199,   200,    -1,    -1,
      -1,   204,   205,   206,   207,   208,   209,    -1,   211,   212,
      -1,    -1,   215,   216,    -1,   218,    -1,    -1,   221,   222,
     223,   224,    -1,    -1,   227,    -1,   229,   230,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,
      -1,   244,    -1,   246,   247,   248,    -1,    -1,    -1,    -1,
      -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,   262,
      -1,    -1,   265,    -1,    -1,    -1,    -1,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,    -1,    -1,    -1,   299,   300,   301,   302,
     303,    -1,    -1,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,    -1,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,    -1,   340,   341,   342,
      -1,   344,   345,   346,    -1,   348,    -1,    -1,    -1,    -1,
      -1,    -1,   355,    -1,    -1,    -1,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,    -1,    -1,   476,    -1,    -1,   479,   480,    -1,    -1,
     483,   484,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
      -1,   504,    -1,   506,   507,   508,    -1,   510,   511,   512,
      -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
     523,   524,    -1,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,    -1,   539,   540,    -1,    -1,
     543,    -1,   545,    -1,   547,    -1,   549,    -1,   551,   552,
     553,    -1,    -1,   556,   557,   558,   559,   560,    -1,    -1,
     563,   564,    -1,   566,   567,   568,   569,   570,    -1,    -1,
      -1,    -1,   575,   576,    -1,   578,   579,    -1,    -1,   582,
      -1,    -1,    -1,   586,   587,    -1,    -1,    -1,    -1,   592,
     593,    -1,    -1,   596,   597,    -1,    -1,   600,   601,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    -1,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    -1,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,    -1,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,   115,
      -1,   117,    -1,    -1,    -1,   121,    -1,   123,   124,   125,
     126,    -1,    -1,    -1,   130,    -1,    -1,   133,   134,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,    -1,   144,   145,
     146,    -1,    -1,   149,    -1,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,    -1,    -1,
     176,   177,    -1,   179,    -1,   181,    -1,   183,   184,   185,
     186,   187,    -1,   189,    -1,   191,    -1,   193,   194,    -1,
     196,   197,    -1,   199,   200,    -1,    -1,    -1,   204,   205,
     206,   207,   208,   209,    -1,   211,   212,    -1,    -1,   215,
     216,    -1,   218,    -1,    -1,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,   230,    -1,   232,   233,    -1,    -1,
      -1,   237,    -1,    -1,   240,   241,    -1,    -1,   244,    -1,
     246,   247,   248,    -1,    -1,    -1,    -1,    -1,   254,   255,
      -1,   257,    -1,   259,    -1,   261,   262,    -1,    -1,   265,
      -1,    -1,    -1,    -1,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
      -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,    -1,   340,   341,   342,    -1,   344,   345,
     346,    -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,   355,
      -1,    -1,    -1,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,   422,   423,    -1,    -1,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,    -1,    -1,
     476,    -1,    -1,   479,   480,    -1,    -1,   483,   484,   485,
     486,   487,    -1,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,    -1,   504,    -1,
     506,   507,   508,    -1,   510,   511,   512,    -1,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   537,    -1,   539,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,    -1,   549,    -1,   551,   552,   553,    -1,    -1,
     556,   557,   558,   559,   560,    -1,    -1,   563,   564,    -1,
     566,   567,   568,   569,   570,    -1,    -1,    -1,    -1,   575,
     576,    -1,   578,   579,    -1,    -1,   582,    -1,    -1,    -1,
     586,   587,    -1,    -1,    -1,    -1,   592,   593,   594,    -1,
     596,   597,    -1,    -1,   600,   601,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    -1,    57,    58,
      59,    60,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    -1,    71,    72,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    -1,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    -1,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,    -1,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,   115,    -1,   117,    -1,
      -1,    -1,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,   130,    -1,    -1,   133,   134,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,    -1,   144,   145,   146,    -1,    -1,
     149,    -1,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,
     179,    -1,   181,    -1,   183,   184,   185,   186,   187,    -1,
     189,    -1,   191,    -1,   193,   194,    -1,   196,   197,    -1,
     199,   200,    -1,    -1,    -1,   204,   205,   206,   207,   208,
     209,    -1,   211,   212,    -1,    -1,   215,   216,    -1,   218,
      -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,
      -1,   240,   241,    -1,    -1,   244,    -1,   246,   247,   248,
      -1,    -1,    -1,    -1,    -1,   254,   255,    -1,   257,    -1,
     259,    -1,   261,   262,    -1,    -1,   265,    -1,    -1,    -1,
      -1,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,    -1,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
      -1,   340,   341,   342,    -1,   344,   345,   346,    -1,   348,
      -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,    -1,    -1,   476,    -1,    -1,
     479,   480,    -1,    -1,   483,   484,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,    -1,   504,    -1,   506,   507,   508,
      -1,   510,   511,   512,    -1,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,    -1,
     539,   540,    -1,    -1,   543,    -1,   545,    -1,   547,    -1,
     549,    -1,   551,   552,   553,    -1,    -1,   556,   557,   558,
     559,   560,    -1,    -1,   563,   564,    -1,   566,   567,   568,
     569,   570,    -1,    -1,    -1,    -1,   575,   576,    -1,   578,
     579,    -1,    -1,   582,    -1,    -1,    -1,   586,   587,    -1,
      -1,    -1,    -1,   592,   593,    -1,    -1,   596,   597,    -1,
      -1,   600,   601,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      -1,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    -1,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,    -1,    -1,    -1,    -1,   109,   110,   111,
      -1,    -1,   114,   115,    -1,   117,    -1,    -1,    -1,   121,
      -1,   123,   124,   125,   126,    -1,    -1,    -1,   130,    -1,
      -1,   133,   134,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,    -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,   179,    -1,   181,
      -1,   183,   184,   185,   186,   187,    -1,   189,    -1,   191,
      -1,   193,   194,    -1,   196,   197,    -1,   199,   200,    -1,
      -1,    -1,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,    -1,    -1,   215,   216,    -1,   218,    -1,    -1,   221,
     222,   223,   224,    -1,    -1,   227,    -1,   229,   230,    -1,
     232,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,
      -1,    -1,   244,    -1,   246,   247,   248,    -1,    -1,    -1,
      -1,    -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,
     262,    -1,    -1,   265,    -1,    -1,    -1,    -1,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,    -1,    -1,    -1,   299,   300,   301,
     302,   303,    -1,    -1,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,    -1,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,    -1,   348,    -1,    -1,    -1,
      -1,    -1,    -1,   355,    -1,    -1,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
     422,   423,    -1,    -1,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,    -1,    -1,   476,    -1,    -1,   479,   480,    -1,
      -1,   483,   484,   485,   486,   487,    -1,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,    -1,   504,    -1,   506,   507,   508,    -1,   510,   511,
     512,    -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,   523,   524,    -1,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,    -1,   539,   540,    -1,
      -1,   543,    -1,   545,    -1,   547,    -1,   549,    -1,   551,
     552,   553,    -1,    -1,   556,   557,   558,   559,   560,    -1,
      -1,   563,   564,    -1,   566,   567,   568,   569,   570,    -1,
      -1,    -1,    -1,   575,   576,    -1,   578,   579,    -1,    -1,
     582,    -1,    -1,    -1,   586,   587,    -1,    -1,    -1,    -1,
     592,   593,    -1,    -1,   596,   597,    -1,    -1,   600,   601,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    -1,    71,    72,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    -1,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      -1,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
      -1,    -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,
     115,    -1,   117,    -1,    -1,    -1,   121,    -1,   123,   124,
     125,   126,    -1,    -1,    -1,   130,    -1,    -1,   133,   134,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,    -1,   144,
     145,   146,    -1,    -1,   149,    -1,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,    -1,
      -1,   176,   177,   178,   179,    -1,   181,    -1,   183,   184,
     185,   186,   187,    -1,   189,    -1,   191,    -1,   193,   194,
      -1,   196,   197,    -1,   199,   200,    -1,    -1,    -1,   204,
     205,   206,   207,   208,   209,    -1,   211,   212,    -1,    -1,
     215,   216,    -1,   218,    -1,    -1,   221,   222,   223,   224,
      -1,    -1,   227,    -1,   229,   230,    -1,   232,   233,    -1,
      -1,    -1,   237,    -1,    -1,   240,   241,    -1,    -1,   244,
      -1,   246,   247,   248,    -1,    -1,    -1,    -1,    -1,   254,
     255,    -1,   257,    -1,   259,    -1,   261,   262,    -1,    -1,
     265,    -1,    -1,    -1,    -1,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,    -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,
      -1,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
      -1,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,    -1,   340,   341,   342,    -1,   344,
     345,   346,    -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,
     355,    -1,    -1,    -1,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,    -1,
      -1,   476,    -1,    -1,   479,   480,    -1,    -1,   483,   484,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,    -1,   504,
      -1,   506,   507,   508,    -1,   510,   511,   512,    -1,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,    -1,   539,   540,    -1,    -1,   543,    -1,
     545,    -1,   547,    -1,   549,    -1,   551,   552,   553,    -1,
      -1,   556,   557,   558,   559,   560,    -1,    -1,   563,   564,
      -1,   566,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
     575,   576,    -1,   578,   579,    -1,    -1,   582,    -1,    -1,
      -1,   586,   587,    -1,    -1,    -1,    -1,   592,   593,    -1,
      -1,   596,   597,    -1,    -1,   600,   601,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    -1,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    -1,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,    -1,    -1,    -1,
      -1,   109,   110,   111,    -1,    -1,   114,   115,    -1,   117,
      -1,    -1,    -1,   121,    -1,   123,   124,   125,   126,    -1,
      -1,    -1,   130,    -1,    -1,   133,   134,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,    -1,   144,   145,   146,    -1,
      -1,   149,    -1,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,    -1,    -1,    -1,   176,   177,
      -1,   179,    -1,   181,    -1,   183,   184,   185,   186,   187,
      -1,   189,    -1,   191,    -1,   193,   194,    -1,   196,   197,
      -1,   199,   200,    -1,    -1,    -1,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,    -1,    -1,   215,   216,    -1,
     218,    -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,
      -1,   229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,
      -1,    -1,   240,   241,    -1,    -1,   244,    -1,   246,   247,
     248,    -1,    -1,    -1,    -1,    -1,   254,   255,    -1,   257,
      -1,   259,    -1,   261,   262,    -1,    -1,   265,    -1,    -1,
      -1,    -1,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,    -1,    -1,
      -1,   299,   300,   301,   302,   303,    -1,    -1,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,    -1,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,    -1,   340,   341,   342,    -1,   344,   345,   346,    -1,
     348,    -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,
      -1,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,   414,   415,   416,    -1,
     418,   419,   420,    -1,   422,   423,    -1,    -1,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,    -1,    -1,   476,    -1,
      -1,   479,   480,    -1,    -1,   483,   484,   485,   486,   487,
      -1,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,    -1,   504,    -1,   506,   507,
     508,    -1,   510,   511,   512,    -1,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   537,
      -1,   539,   540,    -1,    -1,   543,    -1,   545,    -1,   547,
      -1,   549,    -1,   551,   552,   553,    -1,    -1,   556,   557,
     558,   559,   560,    -1,    -1,   563,   564,    -1,   566,   567,
     568,   569,   570,    -1,    -1,    -1,    -1,   575,   576,    -1,
     578,   579,    -1,    -1,   582,    -1,    -1,    -1,   586,   587,
      -1,    -1,    -1,    -1,   592,   593,    -1,    -1,   596,   597,
      -1,    -1,   600,   601,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    -1,
      71,    72,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    -1,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    -1,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,    -1,    -1,    -1,    -1,   109,   110,
     111,    -1,    -1,   114,   115,    -1,   117,    -1,    -1,    -1,
     121,    -1,   123,   124,   125,   126,    -1,    -1,    -1,   130,
      -1,    -1,   133,   134,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,    -1,   144,   145,   146,    -1,    -1,   149,    -1,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,    -1,    -1,    -1,   176,   177,    -1,   179,    -1,
     181,    -1,   183,   184,   185,   186,   187,    -1,   189,    -1,
     191,    -1,   193,   194,    -1,   196,   197,    -1,   199,   200,
      -1,    -1,    -1,   204,   205,   206,   207,   208,   209,    -1,
     211,   212,    -1,    -1,   215,   216,    -1,   218,    -1,    -1,
     221,   222,   223,   224,    -1,    -1,   227,    -1,   229,   230,
      -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,
     241,    -1,    -1,   244,    -1,   246,   247,   248,    -1,    -1,
      -1,    -1,    -1,   254,   255,    -1,   257,    -1,   259,    -1,
     261,   262,    -1,    -1,   265,    -1,    -1,    -1,    -1,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,    -1,    -1,    -1,   299,   300,
     301,   302,   303,    -1,    -1,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,    -1,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,    -1,   340,
     341,   342,    -1,   344,   345,   346,    -1,   348,    -1,    -1,
      -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
      -1,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,    -1,    -1,   476,    -1,    -1,   479,   480,
      -1,    -1,   483,   484,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,    -1,   504,    -1,   506,   507,   508,    -1,   510,
     511,   512,    -1,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,   523,   524,    -1,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,    -1,   539,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,    -1,   549,    -1,
     551,   552,   553,    -1,    -1,   556,   557,   558,   559,   560,
      -1,    -1,   563,   564,    -1,   566,   567,   568,   569,   570,
      -1,    -1,    -1,    -1,   575,   576,    -1,   578,   579,    -1,
      -1,   582,    -1,    -1,    -1,   586,   587,    -1,    -1,    -1,
      -1,   592,   593,    -1,    -1,   596,   597,    -1,    -1,   600,
     601,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    -1,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    -1,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,    -1,    -1,    -1,    -1,   109,   110,   111,    -1,    -1,
     114,   115,    -1,   117,    -1,    -1,    -1,   121,    -1,   123,
     124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,   133,
     134,   135,    -1,    -1,    -1,   139,    -1,   141,   142,    -1,
     144,   145,   146,    -1,    -1,   149,    -1,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,    -1,
      -1,    -1,   176,   177,    -1,   179,    -1,   181,    -1,   183,
     184,   185,   186,   187,    -1,   189,    -1,   191,    -1,   193,
     194,    -1,   196,   197,    -1,   199,   200,    -1,    -1,    -1,
     204,   205,   206,   207,   208,   209,    -1,   211,   212,    -1,
      -1,   215,   216,    -1,   218,    -1,    -1,   221,   222,   223,
     224,    -1,    -1,   227,    -1,   229,   230,    -1,   232,   233,
      -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,    -1,
     244,    -1,   246,   247,   248,    -1,    -1,    -1,    -1,    -1,
     254,   255,    -1,   257,    -1,   259,    -1,   261,   262,    -1,
      -1,   265,    -1,    -1,    -1,    -1,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,    -1,    -1,   327,   328,   329,   330,   331,    -1,   333,
     334,   335,    -1,   337,   338,    -1,   340,   341,   342,    -1,
     344,   345,   346,    -1,   348,    -1,    -1,    -1,    -1,    -1,
      -1,   355,    -1,    -1,    -1,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,    -1,   418,   419,   420,    -1,   422,   423,
      -1,    -1,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
      -1,    -1,   476,    -1,    -1,   479,   480,    -1,    -1,   483,
     484,   485,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,    -1,
     504,    -1,   506,   507,   508,    -1,   510,   511,   512,    -1,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,    -1,   539,   540,    -1,    -1,   543,
      -1,   545,    -1,   547,    -1,   549,    -1,   551,   552,   553,
      -1,    -1,   556,   557,   558,   559,   560,    -1,    -1,   563,
     564,    -1,   566,   567,   568,   569,   570,    -1,    -1,    -1,
      -1,   575,   576,    -1,   578,   579,    -1,    -1,   582,    -1,
      -1,    -1,   586,   587,    -1,    -1,    -1,    -1,   592,   593,
      -1,    -1,   596,   597,    -1,    -1,   600,   601,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    -1,    71,    72,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    -1,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    -1,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,    -1,    -1,
      -1,    -1,   109,   110,   111,    -1,    -1,   114,   115,    -1,
     117,    -1,    -1,    -1,   121,    -1,   123,   124,   125,   126,
      -1,    -1,    -1,   130,    -1,    -1,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,    -1,   144,   145,   146,
      -1,    -1,   149,    -1,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,    -1,   179,    -1,   181,    -1,   183,   184,   185,   186,
     187,    -1,   189,    -1,   191,    -1,   193,   194,    -1,   196,
     197,    -1,   199,   200,    -1,    -1,    -1,   204,   205,   206,
     207,   208,   209,    -1,   211,   212,    -1,    -1,   215,   216,
      -1,   218,    -1,    -1,   221,   222,   223,   224,    -1,    -1,
     227,    -1,   229,   230,    -1,   232,   233,    -1,    -1,    -1,
     237,    -1,    -1,   240,   241,    -1,    -1,   244,    -1,   246,
     247,   248,    -1,    -1,    -1,    -1,    -1,   254,   255,    -1,
     257,    -1,   259,    -1,   261,   262,    -1,    -1,   265,    -1,
      -1,    -1,    -1,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,    -1,
      -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,    -1,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,    -1,   340,   341,   342,    -1,   344,   345,   346,
      -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,
      -1,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
      -1,   418,   419,   420,    -1,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,    -1,    -1,   476,
      -1,    -1,   479,   480,    -1,    -1,   483,   484,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,    -1,   504,    -1,   506,
     507,   508,    -1,   510,   511,   512,    -1,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,    -1,   539,   540,    -1,    -1,   543,    -1,   545,    -1,
     547,    -1,   549,    -1,   551,   552,   553,    -1,    -1,   556,
     557,   558,   559,   560,    -1,    -1,   563,   564,    -1,   566,
     567,   568,   569,   570,    -1,    -1,    -1,    -1,   575,   576,
      -1,   578,   579,    -1,    -1,   582,    -1,    -1,    -1,   586,
     587,    -1,    -1,    -1,    -1,   592,   593,    -1,    -1,   596,
     597,    -1,    -1,   600,   601,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
      -1,    71,    72,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    -1,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    -1,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,    -1,    -1,    -1,    -1,   109,
     110,   111,    -1,    -1,   114,   115,    -1,   117,    -1,    -1,
      -1,   121,    -1,   123,   124,   125,   126,    -1,    -1,    -1,
     130,    -1,    -1,   133,   134,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,    -1,   144,   145,   146,    -1,    -1,   149,
      -1,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,    -1,    -1,    -1,   176,   177,    -1,   179,
      -1,   181,    -1,   183,   184,   185,   186,   187,    -1,   189,
      -1,   191,    -1,   193,   194,    -1,   196,   197,    -1,   199,
     200,    -1,    -1,    -1,   204,   205,   206,   207,   208,   209,
      -1,   211,   212,    -1,    -1,   215,   216,    -1,   218,    -1,
      -1,   221,   222,   223,   224,    -1,    -1,   227,    -1,   229,
     230,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,
     240,   241,    -1,    -1,   244,    -1,   246,   247,   248,    -1,
      -1,    -1,    -1,    -1,   254,   255,    -1,   257,    -1,   259,
      -1,   261,   262,    -1,    -1,   265,    -1,    -1,    -1,    -1,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,    -1,    -1,    -1,   299,
     300,   301,   302,   303,    -1,    -1,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,    -1,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,    -1,
     340,   341,   342,    -1,   344,   345,   346,    -1,   348,    -1,
      -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
      -1,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,    -1,   418,   419,
     420,    -1,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,
     470,   471,    -1,   473,    -1,    -1,   476,    -1,    -1,   479,
     480,    -1,    -1,   483,   484,   485,   486,   487,    -1,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,    -1,   504,    -1,   506,   507,   508,    -1,
     510,   511,   512,    -1,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,    -1,   523,   524,    -1,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,    -1,   539,
     540,    -1,    -1,   543,    -1,   545,    -1,   547,    -1,   549,
      -1,   551,   552,   553,    -1,    -1,   556,   557,   558,   559,
     560,    -1,    -1,   563,   564,    -1,   566,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,   575,   576,    -1,   578,   579,
      -1,    -1,   582,    -1,    -1,    -1,   586,   587,    -1,    -1,
      -1,    -1,   592,   593,    -1,    -1,   596,   597,    -1,    -1,
     600,   601,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    -1,    71,    72,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    -1,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    -1,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,    -1,    -1,    -1,    -1,   109,   110,   111,    -1,
      -1,   114,   115,    -1,   117,    -1,    -1,    -1,   121,    -1,
     123,   124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,
     133,   134,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
      -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
      -1,    -1,    -1,   176,   177,    -1,   179,    -1,   181,    -1,
     183,   184,   185,   186,   187,    -1,   189,    -1,   191,    -1,
     193,   194,    -1,   196,   197,    -1,   199,   200,    -1,    -1,
      -1,   204,   205,   206,   207,   208,   209,    -1,   211,   212,
      -1,    -1,   215,   216,    -1,   218,    -1,    -1,   221,   222,
     223,   224,    -1,    -1,   227,    -1,   229,   230,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,
      -1,   244,    -1,   246,   247,   248,    -1,    -1,    -1,    -1,
      -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,   262,
      -1,    -1,   265,    -1,    -1,    -1,    -1,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,    -1,    -1,    -1,   299,   300,   301,   302,
     303,    -1,    -1,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,    -1,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,    -1,   340,   341,   342,
      -1,   344,   345,   346,    -1,   348,    -1,    -1,    -1,    -1,
      -1,    -1,   355,    -1,    -1,    -1,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,   414,   415,   416,    -1,   418,   419,   420,    -1,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,    -1,    -1,   476,    -1,    -1,   479,   480,    -1,    -1,
     483,   484,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
      -1,   504,    -1,   506,   507,   508,    -1,   510,   511,   512,
      -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
     523,   524,    -1,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,    -1,   539,   540,    -1,    -1,
     543,    -1,   545,    -1,   547,    -1,   549,    -1,   551,   552,
     553,    -1,    -1,   556,   557,   558,   559,   560,    -1,    -1,
     563,   564,    -1,   566,   567,   568,   569,   570,    -1,    -1,
      -1,    -1,   575,   576,    -1,   578,   579,    -1,    -1,   582,
      -1,    -1,    -1,   586,   587,    -1,    -1,    -1,    -1,   592,
     593,    -1,    -1,   596,   597,    -1,    -1,   600,   601,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    -1,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    -1,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,    -1,
      -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,   115,
      -1,   117,    -1,    -1,    -1,   121,    -1,   123,   124,   125,
     126,    -1,    -1,    -1,   130,    -1,    -1,   133,   134,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,    -1,   144,   145,
     146,    -1,    -1,   149,    -1,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,    -1,    -1,    -1,
     176,   177,    -1,   179,    -1,   181,    -1,   183,   184,   185,
     186,   187,    -1,   189,    -1,   191,    -1,   193,   194,    -1,
     196,   197,    -1,   199,   200,    -1,    -1,    -1,   204,   205,
     206,   207,   208,   209,    -1,   211,   212,    -1,    -1,   215,
     216,    -1,   218,    -1,    -1,   221,   222,   223,   224,    -1,
      -1,   227,    -1,   229,   230,    -1,   232,   233,    -1,    -1,
      -1,   237,    -1,    -1,   240,   241,    -1,    -1,   244,    -1,
     246,   247,   248,    -1,    -1,    -1,    -1,    -1,   254,   255,
      -1,   257,    -1,   259,    -1,   261,   262,    -1,    -1,   265,
      -1,    -1,    -1,    -1,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
      -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,    -1,
      -1,   327,   328,   329,   330,   331,    -1,   333,   334,   335,
      -1,   337,   338,    -1,   340,   341,   342,    -1,   344,   345,
     346,    -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,   355,
      -1,    -1,    -1,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,    -1,   418,   419,   420,    -1,   422,   423,    -1,    -1,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,    -1,    -1,
     476,    -1,    -1,   479,   480,    -1,    -1,   483,   484,   485,
     486,   487,    -1,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,    -1,   504,    -1,
     506,   507,   508,    -1,   510,   511,   512,    -1,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   537,    -1,   539,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,    -1,   549,    -1,   551,   552,   553,    -1,    -1,
     556,   557,   558,   559,   560,    -1,    -1,   563,   564,    -1,
     566,   567,   568,   569,   570,    -1,    -1,    -1,    -1,   575,
     576,    -1,   578,   579,    -1,    -1,   582,    -1,    -1,    -1,
     586,   587,    -1,    -1,    -1,    -1,   592,   593,    -1,    -1,
     596,   597,    -1,    -1,   600,   601,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    -1,    57,    58,
      59,    60,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    -1,    71,    72,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    -1,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    -1,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,    -1,    -1,    -1,    -1,
     109,   110,   111,    -1,    -1,   114,   115,    -1,   117,    -1,
      -1,    -1,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,   130,    -1,    -1,   133,   134,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,    -1,   144,   145,   146,    -1,    -1,
     149,    -1,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,    -1,    -1,    -1,   176,   177,    -1,
     179,    -1,   181,    -1,   183,   184,   185,   186,   187,    -1,
     189,    -1,   191,    -1,   193,   194,    -1,   196,   197,    -1,
     199,   200,    -1,    -1,    -1,   204,   205,   206,   207,   208,
     209,    -1,   211,   212,    -1,    -1,   215,   216,    -1,   218,
      -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,    -1,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,
      -1,   240,   241,    -1,    -1,   244,    -1,   246,   247,   248,
      -1,    -1,    -1,    -1,    -1,   254,   255,    -1,   257,    -1,
     259,    -1,   261,   262,    -1,    -1,   265,    -1,    -1,    -1,
      -1,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,    -1,    -1,   327,   328,
     329,   330,   331,    -1,   333,   334,   335,    -1,   337,   338,
      -1,   340,   341,   342,    -1,   344,   345,   346,    -1,   348,
      -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,    -1,   418,
     419,   420,    -1,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,    -1,    -1,   476,    -1,    -1,
     479,   480,    -1,    -1,   483,   484,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,    -1,   504,    -1,   506,   507,   508,
      -1,   510,   511,   512,    -1,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,    -1,
     539,   540,    -1,    -1,   543,    -1,   545,    -1,   547,    -1,
     549,    -1,   551,   552,   553,    -1,    -1,   556,   557,   558,
     559,   560,    -1,    -1,   563,   564,    -1,   566,   567,   568,
     569,   570,    -1,    -1,    -1,    -1,   575,   576,    -1,   578,
     579,    -1,    -1,   582,    -1,    -1,    -1,   586,   587,    -1,
      -1,    -1,    -1,   592,   593,    -1,    -1,   596,   597,    -1,
      -1,   600,   601,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      -1,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    -1,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,    -1,    -1,    -1,    -1,   109,   110,   111,
      -1,    -1,   114,   115,    -1,   117,    -1,    -1,    -1,   121,
      -1,   123,   124,   125,   126,    -1,    -1,    -1,   130,    -1,
      -1,   133,   134,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,    -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,    -1,   179,    -1,   181,
      -1,   183,   184,   185,   186,   187,    -1,   189,    -1,   191,
      -1,   193,   194,    -1,   196,   197,    -1,   199,   200,    -1,
      -1,    -1,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,    -1,    -1,   215,   216,    -1,   218,    -1,    -1,   221,
     222,   223,   224,    -1,    -1,   227,    -1,   229,   230,    -1,
     232,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,
      -1,    -1,   244,    -1,   246,   247,   248,    -1,    -1,    -1,
      -1,    -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,
     262,    -1,    -1,   265,    -1,    -1,    -1,    -1,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,    -1,    -1,    -1,   299,   300,   301,
     302,   303,    -1,    -1,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,    -1,    -1,   327,   328,   329,   330,   331,
      -1,   333,   334,   335,    -1,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,    -1,   348,    -1,    -1,    -1,
      -1,    -1,    -1,   355,    -1,    -1,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,    -1,   418,   419,   420,    -1,
     422,   423,    -1,    -1,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,    -1,    -1,   476,    -1,    -1,   479,   480,    -1,
      -1,   483,   484,   485,   486,   487,    -1,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,    -1,   504,    -1,   506,   507,   508,    -1,   510,   511,
     512,    -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,   523,   524,    -1,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,    -1,   539,   540,    -1,
      -1,   543,    -1,   545,    -1,   547,    -1,   549,    -1,   551,
     552,   553,    -1,    -1,   556,   557,   558,   559,   560,    -1,
      -1,   563,   564,    -1,   566,   567,   568,   569,   570,    -1,
      -1,    -1,    -1,   575,   576,    -1,   578,   579,    -1,    -1,
     582,    -1,    -1,    -1,   586,   587,    -1,    -1,    -1,    -1,
     592,   593,    -1,    -1,   596,   597,    -1,    -1,   600,   601,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    -1,    71,    72,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    -1,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      -1,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
      -1,    -1,    -1,    -1,   109,   110,   111,    -1,    -1,   114,
     115,    -1,   117,    -1,    -1,    -1,   121,    -1,   123,   124,
     125,   126,    -1,    -1,    -1,   130,    -1,    -1,   133,   134,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,    -1,   144,
     145,   146,    -1,    -1,   149,    -1,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,    -1,
      -1,   176,   177,    -1,   179,    -1,   181,    -1,   183,   184,
     185,   186,   187,    -1,   189,    -1,   191,    -1,   193,   194,
      -1,   196,   197,    -1,   199,   200,    -1,    -1,    -1,   204,
     205,   206,   207,   208,   209,    -1,   211,   212,    -1,    -1,
     215,   216,    -1,   218,    -1,    -1,   221,   222,   223,   224,
      -1,    -1,   227,    -1,   229,   230,    -1,   232,   233,    -1,
      -1,    -1,   237,    -1,    -1,   240,   241,    -1,    -1,   244,
      -1,   246,   247,   248,    -1,    -1,    -1,    -1,    -1,   254,
     255,    -1,   257,    -1,   259,    -1,   261,   262,    -1,    -1,
     265,    -1,    -1,    -1,    -1,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,    -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,
      -1,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
      -1,    -1,   327,   328,   329,   330,   331,    -1,   333,   334,
     335,    -1,   337,   338,    -1,   340,   341,   342,    -1,   344,
     345,   346,    -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,
     355,    -1,    -1,    -1,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,    -1,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,    -1,
      -1,   476,    -1,    -1,   479,   480,    -1,    -1,   483,   484,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,    -1,   504,
      -1,   506,   507,   508,    -1,   510,   511,   512,    -1,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,    -1,   539,   540,    -1,    -1,   543,    -1,
     545,    -1,   547,    -1,   549,    -1,   551,   552,   553,    -1,
      -1,   556,   557,   558,   559,   560,    -1,    -1,   563,   564,
      -1,   566,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
     575,   576,    -1,   578,   579,    -1,    -1,   582,    -1,    -1,
      -1,   586,   587,    -1,    -1,    -1,    -1,   592,   593,    -1,
      -1,   596,   597,    -1,    -1,   600,   601,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    -1,    86,    -1,
      -1,    89,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    99,   100,   101,    -1,    -1,   104,    -1,    -1,    -1,
      -1,   109,   110,    -1,    -1,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,   121,    -1,   123,   124,   125,   126,    -1,
      -1,    -1,   130,    -1,    -1,   133,   134,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,    -1,   144,   145,   146,    -1,
      -1,   149,    -1,   151,   152,   153,   154,   155,    -1,    -1,
     158,   159,   160,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,    -1,   172,    -1,    -1,    -1,   176,   177,
      -1,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
      -1,   189,    -1,    -1,    -1,   193,   194,    -1,   196,    -1,
      -1,   199,   200,    -1,    -1,    -1,   204,   205,   206,   207,
     208,    -1,    -1,   211,   212,   213,    -1,   215,   216,    -1,
     218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,
      -1,   229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,
     238,    -1,   240,   241,    -1,    -1,   244,    -1,    -1,   247,
     248,    -1,   250,    -1,    -1,    -1,   254,   255,    -1,   257,
      -1,   259,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
     288,   289,   290,   291,    -1,   293,   294,   295,    -1,    -1,
      -1,   299,   300,   301,   302,   303,    -1,    -1,   306,   307,
      -1,   309,    -1,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,    -1,   323,   324,    -1,    -1,   327,
     328,   329,   330,    -1,    -1,    -1,   334,   335,    -1,    -1,
      -1,    -1,   340,   341,   342,    -1,   344,   345,   346,    -1,
     348,    -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,
      -1,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,    -1,   377,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
     418,   419,   420,    -1,   422,   423,    -1,    -1,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,   459,   460,   461,   462,   463,   464,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,    -1,    -1,   476,    -1,
      -1,   479,   480,    -1,    -1,   483,    -1,    -1,   486,   487,
      -1,   489,   490,   491,   492,   493,    -1,    -1,   496,   497,
     498,   499,    -1,   501,   502,    -1,   504,    -1,   506,   507,
     508,    -1,    -1,   511,   512,    -1,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,    -1,   523,   524,    -1,    -1,    -1,
     528,   529,   530,   531,    -1,   533,   534,    -1,   536,   537,
      -1,   539,   540,    -1,    -1,   543,    -1,   545,    -1,   547,
      -1,   549,    -1,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,    -1,   560,    -1,    -1,   563,    -1,    -1,    -1,   567,
     568,   569,   570,    -1,    -1,    -1,    -1,   575,   576,    -1,
     578,   579,    -1,    -1,   582,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,   601,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    -1,    86,    -1,
      -1,    89,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    99,   100,   101,    -1,    -1,   104,    -1,    -1,    -1,
      -1,   109,   110,    -1,    -1,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,   121,    -1,   123,   124,   125,   126,    -1,
      -1,    -1,   130,    -1,    -1,   133,   134,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,    -1,   144,   145,   146,    -1,
      -1,   149,    -1,   151,   152,   153,   154,   155,    -1,    -1,
     158,   159,   160,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,    -1,   172,    -1,    -1,    -1,   176,   177,
      -1,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
      -1,   189,    -1,    -1,    -1,   193,   194,    -1,   196,    -1,
      -1,   199,   200,    -1,    -1,    -1,   204,   205,   206,   207,
     208,    -1,    -1,   211,   212,   213,    -1,   215,   216,    -1,
     218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,
      -1,   229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,
     238,    -1,   240,   241,    -1,    -1,   244,    -1,    -1,   247,
     248,    -1,    -1,    -1,    -1,    -1,   254,   255,    -1,   257,
      -1,   259,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
     288,   289,   290,   291,    -1,   293,   294,   295,    -1,    -1,
      -1,   299,   300,   301,   302,   303,    -1,    -1,   306,   307,
      -1,   309,    -1,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,    -1,   323,   324,    -1,    -1,   327,
     328,   329,   330,    -1,    -1,    -1,   334,   335,    -1,    -1,
      -1,    -1,   340,   341,   342,    -1,   344,   345,   346,    -1,
     348,    -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,
      -1,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,    -1,   377,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
     418,   419,   420,    -1,   422,   423,    -1,    -1,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,   459,   460,   461,   462,   463,   464,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,    -1,    -1,   476,    -1,
      -1,   479,   480,    -1,    -1,   483,    -1,    -1,   486,   487,
      -1,   489,   490,   491,   492,   493,    -1,    -1,   496,   497,
     498,   499,    -1,   501,   502,    -1,   504,    -1,   506,   507,
     508,    -1,    -1,   511,   512,    -1,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,    -1,   523,   524,    -1,    -1,    -1,
     528,   529,   530,   531,    -1,   533,   534,    -1,   536,   537,
      -1,   539,   540,    -1,    -1,   543,    -1,   545,    -1,   547,
      -1,   549,    -1,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,    -1,   560,    -1,    -1,   563,    -1,    -1,    -1,   567,
     568,   569,   570,    -1,    -1,    -1,    -1,   575,   576,    -1,
     578,   579,    -1,    -1,   582,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,   601,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    -1,    83,    84,    -1,    86,    -1,
      -1,    89,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    99,   100,   101,    -1,    -1,   104,    -1,    -1,    -1,
      -1,   109,   110,    -1,    -1,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,   121,    -1,   123,   124,   125,   126,    -1,
      -1,    -1,   130,    -1,    -1,   133,   134,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,    -1,   144,   145,   146,    -1,
      -1,   149,    -1,   151,   152,   153,   154,   155,    -1,    -1,
     158,   159,   160,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,    -1,   172,    -1,    -1,    -1,   176,   177,
      -1,   179,    -1,   181,    -1,   183,   184,   185,   186,   187,
      -1,   189,    -1,    -1,    -1,   193,   194,    -1,   196,    -1,
      -1,   199,   200,    -1,    -1,    -1,   204,   205,   206,   207,
     208,    -1,    -1,   211,   212,    -1,    -1,   215,   216,    -1,
     218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,
      -1,   229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,
      -1,    -1,   240,   241,    -1,    -1,   244,    -1,    -1,   247,
     248,    -1,    -1,    -1,    -1,    -1,   254,   255,    -1,   257,
      -1,   259,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
     288,   289,   290,   291,    -1,   293,   294,   295,    -1,    -1,
      -1,   299,   300,   301,   302,   303,    -1,    -1,   306,   307,
      -1,   309,    -1,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,    -1,   323,   324,    -1,    -1,   327,
     328,   329,   330,    -1,    -1,    -1,   334,   335,    -1,    -1,
      -1,    -1,   340,   341,   342,    -1,   344,   345,   346,    -1,
     348,    -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,
      -1,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,    -1,   377,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
     418,   419,   420,    -1,   422,   423,    -1,    -1,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,    -1,    -1,   476,    -1,
      -1,   479,   480,    -1,    -1,   483,    -1,    -1,   486,   487,
      -1,   489,   490,   491,   492,   493,    -1,    -1,   496,   497,
     498,   499,    -1,   501,   502,    -1,   504,    -1,   506,   507,
     508,    -1,    -1,   511,   512,    -1,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,    -1,   523,   524,    -1,    -1,    -1,
     528,   529,   530,   531,    -1,   533,   534,    -1,   536,   537,
      -1,   539,   540,    -1,    -1,   543,    -1,   545,    -1,   547,
      -1,   549,    -1,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,    -1,   560,    -1,    -1,   563,    -1,    -1,    -1,   567,
     568,   569,   570,    -1,    -1,    -1,    -1,   575,   576,    -1,
     578,   579,    -1,    -1,   582,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,   594,    -1,    -1,    17,
      -1,    -1,    20,   601,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    -1,
      68,    69,    -1,    71,    72,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    -1,    83,    84,    -1,    86,    -1,
      -1,    89,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    99,   100,   101,    -1,    -1,   104,    -1,    -1,    -1,
      -1,   109,   110,    -1,    -1,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,   121,    -1,   123,   124,   125,   126,    -1,
      -1,    -1,   130,    -1,    -1,   133,   134,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,    -1,   144,   145,   146,    -1,
      -1,   149,    -1,   151,   152,   153,   154,   155,    -1,    -1,
     158,   159,   160,    -1,   162,    -1,   164,   165,    -1,   167,
     168,   169,    -1,    -1,   172,    -1,    -1,    -1,   176,   177,
      -1,   179,    -1,   181,    -1,   183,   184,   185,   186,   187,
      -1,   189,    -1,    -1,    -1,   193,   194,    -1,   196,    -1,
      -1,   199,   200,    -1,    -1,    -1,   204,   205,   206,   207,
     208,    -1,    -1,   211,   212,    -1,    -1,   215,   216,    -1,
     218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,
      -1,   229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,
      -1,    -1,   240,   241,    -1,    -1,   244,    -1,    -1,   247,
     248,    -1,    -1,    -1,    -1,    -1,   254,   255,    -1,   257,
      -1,   259,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
     288,   289,   290,   291,    -1,   293,   294,   295,    -1,    -1,
      -1,   299,   300,   301,   302,   303,    -1,    -1,   306,   307,
      -1,   309,    -1,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,    -1,   323,   324,    -1,    -1,   327,
     328,   329,   330,    -1,    -1,    -1,   334,   335,    -1,    -1,
      -1,    -1,   340,   341,   342,    -1,   344,   345,   346,    -1,
     348,    -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,
      -1,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,    -1,   377,
     378,   379,    -1,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
     418,   419,   420,    -1,   422,   423,    -1,    -1,    -1,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,
      -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,
      -1,    -1,   470,   471,    -1,   473,    -1,    -1,   476,    -1,
      -1,   479,   480,    -1,    -1,   483,    -1,    -1,   486,   487,
      -1,   489,   490,   491,   492,   493,    -1,    -1,   496,   497,
     498,   499,    -1,   501,   502,    -1,   504,    -1,   506,   507,
     508,    -1,    -1,   511,   512,    -1,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,    -1,   523,   524,    -1,    -1,    -1,
     528,   529,   530,   531,    -1,   533,   534,    -1,   536,   537,
      -1,   539,   540,    -1,    -1,   543,    -1,   545,    -1,   547,
      -1,   549,    -1,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,    -1,   560,    -1,    -1,   563,    -1,    -1,    -1,   567,
     568,   569,   570,    -1,    -1,    -1,    -1,   575,   576,    -1,
     578,   579,    -1,    -1,   582,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,   594,    -1,    -1,    -1,
      -1,    17,   600,   601,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    -1,    83,    84,    -1,
      86,    -1,    -1,    89,    -1,    -1,    92,    -1,    -1,    -1,
      -1,    -1,    -1,    99,   100,   101,    -1,    -1,   104,    -1,
      -1,    -1,    -1,   109,   110,    -1,    -1,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,   121,    -1,   123,   124,   125,
     126,    -1,    -1,    -1,   130,    -1,    -1,   133,   134,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,    -1,   144,   145,
     146,    -1,    -1,   149,    -1,   151,   152,   153,   154,   155,
      -1,    -1,   158,   159,   160,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,    -1,   172,    -1,    -1,    -1,
     176,   177,    -1,   179,    -1,   181,    -1,   183,   184,   185,
     186,   187,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,    -1,   199,   200,    -1,    -1,    -1,   204,   205,
     206,   207,   208,    -1,    -1,   211,   212,    -1,    -1,   215,
     216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,   227,    -1,   229,   230,    -1,   232,   233,    -1,    -1,
      -1,   237,    -1,    -1,   240,   241,    -1,    -1,   244,    -1,
      -1,   247,   248,    -1,    -1,    -1,    -1,    -1,   254,   255,
      -1,   257,    -1,   259,    -1,   261,   262,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,   288,   289,   290,   291,    -1,   293,   294,   295,
      -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,
     306,   307,    -1,   309,    -1,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,    -1,   323,   324,    -1,
      -1,   327,   328,   329,   330,    -1,    -1,    -1,   334,   335,
      -1,    -1,    -1,    -1,   340,   341,   342,    -1,   344,   345,
     346,    -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,   355,
      -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,   418,   419,   420,    -1,   422,   423,    -1,    -1,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,    -1,    -1,
     476,    -1,    -1,   479,   480,    -1,    -1,   483,    -1,    -1,
     486,   487,    -1,   489,   490,   491,   492,   493,    -1,    -1,
     496,   497,   498,   499,    -1,   501,   502,    -1,   504,    -1,
     506,   507,   508,    -1,    -1,   511,   512,    -1,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,
      -1,    -1,   528,   529,   530,   531,    -1,   533,   534,    -1,
     536,   537,    -1,   539,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,    -1,   549,    -1,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,    -1,   560,    -1,    -1,   563,    -1,    -1,
      -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,   575,
     576,    -1,   578,   579,    -1,    -1,   582,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,   593,    -1,    -1,
      -1,    17,    -1,    -1,    20,   601,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    -1,    83,    84,    -1,
      86,    -1,    -1,    89,    -1,    -1,    92,    -1,    -1,    -1,
      -1,    -1,    -1,    99,   100,   101,    -1,    -1,   104,    -1,
      -1,    -1,    -1,   109,   110,    -1,    -1,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,   121,    -1,   123,   124,   125,
     126,    -1,    -1,    -1,   130,    -1,    -1,   133,   134,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,    -1,   144,   145,
     146,    -1,    -1,   149,    -1,   151,   152,   153,   154,   155,
      -1,    -1,   158,   159,   160,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,    -1,   172,    -1,    -1,    -1,
     176,   177,    -1,   179,    -1,   181,    -1,   183,   184,   185,
     186,   187,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,    -1,   199,   200,    -1,    -1,    -1,   204,   205,
     206,   207,   208,    -1,    -1,   211,   212,    -1,    -1,   215,
     216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,   225,
      -1,   227,    -1,   229,   230,    -1,   232,   233,    -1,    -1,
      -1,   237,    -1,    -1,   240,   241,    -1,    -1,   244,    -1,
      -1,   247,   248,    -1,    -1,    -1,    -1,    -1,   254,   255,
      -1,   257,    -1,   259,    -1,   261,   262,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,   288,   289,   290,   291,    -1,   293,   294,   295,
      -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,
     306,   307,    -1,   309,    -1,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,    -1,   323,   324,    -1,
      -1,   327,   328,   329,   330,    -1,    -1,    -1,   334,   335,
      -1,    -1,    -1,    -1,   340,   341,   342,    -1,   344,   345,
     346,    -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,   355,
      -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,   418,   419,   420,    -1,   422,   423,    -1,    -1,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,    -1,    -1,
     476,    -1,    -1,   479,   480,    -1,    -1,   483,    -1,    -1,
     486,   487,    -1,   489,   490,   491,   492,   493,    -1,    -1,
     496,   497,   498,   499,    -1,   501,   502,    -1,   504,    -1,
     506,   507,   508,    -1,    -1,   511,   512,    -1,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,
      -1,    -1,   528,   529,   530,   531,    -1,   533,   534,    -1,
     536,   537,    -1,   539,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,    -1,   549,    -1,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,    -1,   560,    -1,    -1,   563,    -1,    -1,
      -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,   575,
     576,    -1,   578,   579,    -1,    -1,   582,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,   601,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    -1,    83,    84,    -1,
      86,    -1,    -1,    89,    -1,    -1,    92,    -1,    -1,    -1,
      -1,    -1,    -1,    99,   100,   101,    -1,    -1,   104,    -1,
      -1,    -1,    -1,   109,   110,    -1,    -1,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,   121,    -1,   123,   124,   125,
     126,    -1,    -1,    -1,   130,    -1,    -1,   133,   134,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,    -1,   144,   145,
     146,    -1,    -1,   149,    -1,   151,   152,   153,   154,   155,
      -1,    -1,   158,   159,   160,    -1,   162,    -1,   164,   165,
      -1,   167,   168,   169,    -1,    -1,   172,    -1,    -1,    -1,
     176,   177,    -1,   179,    -1,   181,    -1,   183,   184,   185,
     186,   187,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,    -1,   199,   200,    -1,    -1,    -1,   204,   205,
     206,   207,   208,    -1,    -1,   211,   212,    -1,    -1,   215,
     216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,   227,    -1,   229,   230,    -1,   232,   233,    -1,    -1,
      -1,   237,    -1,    -1,   240,   241,    -1,    -1,   244,    -1,
      -1,   247,   248,    -1,    -1,    -1,    -1,    -1,   254,   255,
      -1,   257,    -1,   259,    -1,   261,   262,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,   288,   289,   290,   291,    -1,   293,   294,   295,
      -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,
     306,   307,    -1,   309,    -1,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,    -1,   323,   324,    -1,
      -1,   327,   328,   329,   330,    -1,    -1,    -1,   334,   335,
      -1,    -1,    -1,    -1,   340,   341,   342,    -1,   344,   345,
     346,    -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,   355,
      -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,    -1,
      -1,   377,   378,   379,    -1,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,
      -1,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,   418,   419,   420,    -1,   422,   423,    -1,    -1,
      -1,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,
     446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
      -1,    -1,    -1,    -1,   470,   471,    -1,   473,    -1,    -1,
     476,    -1,    -1,   479,   480,    -1,    -1,   483,    -1,    -1,
     486,   487,    -1,   489,   490,   491,   492,   493,    -1,    -1,
     496,   497,   498,   499,    -1,   501,   502,    -1,   504,    -1,
     506,   507,   508,    -1,    -1,   511,   512,    -1,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,
      -1,    -1,   528,   529,   530,   531,    -1,   533,   534,    -1,
     536,   537,    -1,   539,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,    -1,   549,    -1,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,    -1,   560,    -1,    -1,   563,    -1,    -1,
      -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,   575,
     576,    -1,   578,   579,    -1,    -1,   582,    -1,    -1,    -1,
      -1,     5,   588,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,   601,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    -1,    83,
      84,    -1,    86,    -1,    -1,    89,    -1,    -1,    92,    -1,
      -1,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,
     104,    -1,    -1,    -1,    -1,   109,   110,    -1,    -1,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,   121,    -1,   123,
     124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,   133,
     134,   135,    -1,    -1,    -1,   139,    -1,   141,   142,    -1,
     144,   145,   146,    -1,    -1,   149,    -1,   151,   152,   153,
     154,   155,    -1,    -1,   158,   159,   160,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,    -1,   172,    -1,
      -1,    -1,   176,   177,    -1,   179,    -1,   181,    -1,   183,
     184,   185,   186,   187,    -1,   189,    -1,    -1,    -1,   193,
     194,    -1,   196,    -1,    -1,   199,   200,    -1,    -1,    -1,
     204,   205,   206,   207,   208,    -1,    -1,   211,   212,    -1,
      -1,   215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,
      -1,    -1,    -1,   227,    -1,   229,   230,    -1,   232,   233,
      -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,    -1,
     244,    -1,    -1,   247,   248,    -1,    -1,    -1,    -1,    -1,
     254,   255,    -1,   257,    -1,   259,    -1,   261,   262,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,   289,   290,   291,    -1,   293,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,   309,    -1,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,    -1,   323,
     324,    -1,    -1,   327,   328,   329,   330,    -1,    -1,    -1,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,    -1,
     344,   345,   346,    -1,   348,    -1,    -1,    -1,    -1,    -1,
      -1,   355,    -1,    -1,    -1,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,   418,   419,   420,    -1,   422,   423,
      -1,    -1,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
      -1,    -1,   476,    -1,    -1,   479,   480,    -1,    -1,   483,
      -1,    -1,   486,   487,    -1,   489,   490,   491,   492,   493,
      -1,    -1,   496,   497,   498,   499,    -1,   501,   502,    -1,
     504,    -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,    -1,    -1,   528,   529,   530,   531,    -1,   533,
     534,    -1,   536,   537,    -1,   539,   540,    -1,    -1,   543,
      -1,   545,    -1,   547,    -1,   549,    -1,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,   563,
      -1,    -1,    -1,   567,   568,   569,   570,    -1,    -1,    -1,
      -1,   575,   576,    -1,   578,   579,    -1,    -1,   582,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,   593,
      -1,    -1,    -1,    17,    -1,    -1,    20,   601,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    -1,    83,
      84,    -1,    86,    -1,    -1,    89,    -1,    -1,    92,    -1,
      -1,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,
     104,    -1,    -1,    -1,    -1,   109,   110,    -1,    -1,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,   121,    -1,   123,
     124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,   133,
     134,   135,    -1,    -1,    -1,   139,    -1,   141,   142,    -1,
     144,   145,   146,    -1,    -1,   149,    -1,   151,   152,   153,
     154,   155,    -1,    -1,   158,   159,   160,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,    -1,   172,    -1,
      -1,    -1,   176,   177,    -1,   179,    -1,   181,    -1,   183,
     184,   185,   186,   187,    -1,   189,    -1,    -1,    -1,   193,
     194,    -1,   196,    -1,    -1,   199,   200,    -1,    -1,    -1,
     204,   205,   206,   207,   208,    -1,    -1,   211,   212,    -1,
      -1,   215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,
      -1,    -1,    -1,   227,    -1,   229,   230,    -1,   232,   233,
      -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,    -1,
     244,    -1,    -1,   247,   248,    -1,    -1,    -1,    -1,    -1,
     254,   255,    -1,   257,    -1,   259,    -1,   261,   262,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,   289,   290,   291,    -1,   293,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,   309,    -1,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,    -1,   323,
     324,    -1,    -1,   327,   328,   329,   330,    -1,    -1,    -1,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,    -1,
     344,   345,   346,    -1,   348,    -1,    -1,    -1,    -1,    -1,
      -1,   355,    -1,    -1,    -1,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,   418,   419,   420,    -1,   422,   423,
      -1,    -1,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
      -1,    -1,   476,    -1,    -1,   479,   480,    -1,    -1,   483,
      -1,    -1,   486,   487,    -1,   489,   490,   491,   492,   493,
      -1,    -1,   496,   497,   498,   499,    -1,   501,   502,    -1,
     504,    -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,    -1,    -1,   528,   529,   530,   531,    -1,   533,
     534,    -1,   536,   537,    -1,   539,   540,    -1,    -1,   543,
      -1,   545,    -1,   547,    -1,   549,    -1,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,   563,
      -1,    -1,    -1,   567,   568,   569,   570,    -1,    -1,    -1,
      -1,   575,   576,    -1,   578,   579,    -1,    -1,   582,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,   600,   601,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      -1,    83,    84,    -1,    86,    -1,    -1,    89,    -1,    -1,
      92,    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,
      -1,    -1,   104,    -1,    -1,    -1,    -1,   109,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,   121,
      -1,   123,   124,   125,   126,    -1,    -1,    -1,   130,    -1,
      -1,   133,   134,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,    -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,
     152,   153,   154,   155,    -1,    -1,   158,   159,   160,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,    -1,
     172,    -1,    -1,    -1,   176,   177,    -1,   179,    -1,   181,
      -1,   183,   184,   185,   186,   187,    -1,   189,    -1,    -1,
      -1,   193,   194,    -1,   196,    -1,    -1,   199,   200,    -1,
      -1,    -1,   204,   205,   206,   207,   208,    -1,    -1,   211,
     212,    -1,    -1,   215,   216,    -1,   218,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,   227,    -1,   229,   230,    -1,
     232,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,
      -1,    -1,   244,    -1,    -1,   247,   248,    -1,    -1,    -1,
      -1,    -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,
     262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,   288,   289,   290,   291,
      -1,   293,   294,   295,    -1,    -1,    -1,   299,   300,   301,
     302,   303,    -1,    -1,   306,   307,    -1,   309,    -1,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
      -1,   323,   324,    -1,    -1,   327,   328,   329,   330,    -1,
      -1,    -1,   334,   335,    -1,    -1,    -1,    -1,   340,   341,
     342,    -1,   344,   345,   346,    -1,   348,    -1,    -1,    -1,
      -1,    -1,    -1,   355,    -1,    -1,    -1,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,   420,    -1,
     422,   423,    -1,    -1,    -1,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,    -1,    -1,   476,    -1,    -1,   479,   480,    -1,
      -1,   483,    -1,    -1,   486,   487,    -1,   489,   490,   491,
     492,   493,    -1,    -1,   496,   497,   498,   499,    -1,   501,
     502,    -1,   504,    -1,   506,   507,   508,    -1,    -1,   511,
     512,    -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,   523,   524,    -1,    -1,    -1,   528,   529,   530,   531,
      -1,   533,   534,    -1,   536,   537,    -1,   539,   540,    -1,
      -1,   543,    -1,   545,    -1,   547,    -1,   549,    -1,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,
      -1,   563,    -1,    -1,    -1,   567,   568,   569,   570,    -1,
      -1,    -1,    -1,   575,   576,    -1,   578,   579,    -1,    -1,
     582,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   601,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      -1,    83,    84,    -1,    86,    -1,    -1,    89,    -1,    -1,
      92,    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,
      -1,    -1,   104,    -1,    -1,    -1,    -1,   109,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,   121,
      -1,   123,   124,   125,   126,    -1,    -1,    -1,   130,    -1,
      -1,   133,   134,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,    -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,
     152,   153,   154,   155,    -1,    -1,   158,   159,   160,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,    -1,
     172,    -1,    -1,    -1,   176,   177,    -1,   179,    -1,   181,
      -1,   183,   184,   185,   186,   187,    -1,   189,    -1,    -1,
      -1,   193,   194,    -1,   196,    -1,    -1,   199,   200,    -1,
      -1,    -1,   204,   205,   206,   207,   208,    -1,    -1,   211,
     212,    -1,    -1,   215,   216,    -1,   218,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,   227,    -1,   229,   230,    -1,
     232,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,
      -1,    -1,   244,    -1,    -1,   247,   248,    -1,    -1,    -1,
      -1,    -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,
     262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,   288,   289,   290,   291,
      -1,   293,   294,   295,    -1,    -1,    -1,   299,   300,   301,
     302,   303,    -1,    -1,   306,   307,    -1,   309,    -1,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
      -1,   323,   324,    -1,    -1,   327,   328,   329,   330,    -1,
      -1,    -1,   334,   335,    -1,    -1,    -1,    -1,   340,   341,
     342,    -1,   344,   345,   346,    -1,   348,    -1,    -1,    -1,
      -1,    -1,    -1,   355,    -1,    -1,    -1,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,   420,    -1,
     422,   423,    -1,    -1,    -1,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,    -1,    -1,   476,    -1,    -1,   479,   480,    -1,
      -1,   483,    -1,    -1,   486,   487,    -1,   489,   490,   491,
     492,   493,    -1,    -1,   496,   497,   498,   499,    -1,   501,
     502,    -1,   504,    -1,   506,   507,   508,    -1,    -1,   511,
     512,    -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,   523,   524,    -1,    -1,    -1,   528,   529,   530,   531,
      -1,   533,   534,    -1,   536,   537,    -1,   539,   540,    -1,
      -1,   543,    -1,   545,    -1,   547,    -1,   549,    -1,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,
      -1,   563,    -1,    -1,    -1,   567,   568,   569,   570,    -1,
      -1,    -1,    -1,   575,   576,    -1,   578,   579,    -1,    -1,
     582,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   601,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      -1,    83,    84,    -1,    86,    -1,    -1,    89,    -1,    -1,
      92,    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,
      -1,    -1,   104,    -1,    -1,    -1,    -1,   109,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,   121,
      -1,   123,   124,   125,   126,    -1,    -1,    -1,   130,    -1,
      -1,   133,   134,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,    -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,
     152,   153,   154,   155,    -1,    -1,   158,   159,   160,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,    -1,
     172,    -1,    -1,    -1,   176,   177,    -1,   179,    -1,   181,
      -1,   183,   184,   185,   186,   187,    -1,   189,    -1,    -1,
      -1,   193,   194,    -1,   196,    -1,    -1,   199,   200,    -1,
      -1,    -1,   204,   205,   206,   207,   208,    -1,    -1,   211,
     212,    -1,    -1,   215,   216,    -1,   218,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,   227,    -1,   229,   230,    -1,
     232,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,
      -1,    -1,   244,    -1,    -1,   247,   248,    -1,    -1,    -1,
      -1,    -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,
     262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,   288,   289,   290,   291,
      -1,   293,   294,   295,    -1,    -1,    -1,   299,   300,   301,
     302,   303,    -1,    -1,   306,   307,    -1,   309,    -1,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
      -1,   323,   324,    -1,    -1,   327,   328,   329,   330,    -1,
      -1,    -1,   334,   335,    -1,    -1,    -1,    -1,   340,   341,
     342,    -1,   344,   345,   346,    -1,   348,    -1,    -1,    -1,
      -1,    -1,    -1,   355,    -1,    -1,    -1,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,   420,    -1,
     422,   423,    -1,    -1,    -1,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,    -1,    -1,   476,    -1,    -1,   479,   480,    -1,
      -1,   483,    -1,    -1,   486,   487,    -1,   489,   490,   491,
     492,   493,    -1,    -1,   496,   497,   498,   499,    -1,   501,
     502,    -1,   504,    -1,   506,   507,   508,    -1,    -1,   511,
     512,    -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,   523,   524,    -1,    -1,    -1,   528,   529,   530,   531,
      -1,   533,   534,    -1,   536,   537,    -1,   539,   540,    -1,
      -1,   543,    -1,   545,    -1,   547,    -1,   549,    -1,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,
      -1,   563,    -1,    -1,    -1,   567,   568,   569,   570,    -1,
      -1,    -1,    -1,   575,   576,    -1,   578,   579,    -1,    -1,
     582,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   601,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      -1,    83,    84,    -1,    86,    -1,    -1,    89,    -1,    -1,
      92,    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,
      -1,    -1,   104,    -1,    -1,    -1,    -1,   109,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,   121,
      -1,   123,   124,   125,   126,    -1,    -1,    -1,   130,    -1,
      -1,   133,   134,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,    -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,
     152,   153,   154,   155,    -1,    -1,   158,   159,   160,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,    -1,
     172,    -1,    -1,    -1,   176,   177,    -1,   179,    -1,   181,
      -1,   183,   184,   185,   186,   187,    -1,   189,    -1,    -1,
      -1,   193,   194,    -1,   196,    -1,    -1,   199,   200,    -1,
      -1,    -1,   204,   205,   206,   207,   208,    -1,    -1,   211,
     212,    -1,    -1,   215,   216,    -1,   218,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,   227,    -1,   229,   230,    -1,
     232,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,
      -1,    -1,   244,    -1,    -1,   247,   248,    -1,    -1,    -1,
      -1,    -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,
     262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,   288,   289,   290,   291,
      -1,   293,   294,   295,    -1,    -1,    -1,   299,   300,   301,
     302,   303,    -1,    -1,   306,   307,    -1,   309,    -1,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
      -1,   323,   324,    -1,    -1,   327,   328,   329,   330,    -1,
      -1,    -1,   334,   335,    -1,    -1,    -1,    -1,   340,   341,
     342,    -1,   344,   345,   346,    -1,   348,    -1,    -1,    -1,
      -1,    -1,    -1,   355,    -1,    -1,    -1,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,   420,    -1,
     422,   423,    -1,    -1,    -1,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,    -1,    -1,   476,    -1,    -1,   479,   480,    -1,
      -1,   483,    -1,    -1,   486,   487,    -1,   489,   490,   491,
     492,   493,    -1,    -1,   496,   497,   498,   499,    -1,   501,
     502,    -1,   504,    -1,   506,   507,   508,    -1,    -1,   511,
     512,    -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,   523,   524,    -1,    -1,    -1,   528,   529,   530,   531,
      -1,   533,   534,    -1,   536,   537,    -1,   539,   540,    -1,
      -1,   543,    -1,   545,    -1,   547,    -1,   549,    -1,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,
      -1,   563,    -1,    -1,    -1,   567,   568,   569,   570,    -1,
      -1,    -1,    -1,   575,   576,    -1,   578,   579,    -1,    -1,
     582,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   601,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    -1,    68,    69,    -1,    71,
      72,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      -1,    83,    84,    -1,    86,    -1,    -1,    89,    -1,    -1,
      92,    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,
      -1,    -1,   104,    -1,    -1,    -1,    -1,   109,   110,    -1,
      -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,   121,
      -1,   123,   124,   125,   126,    -1,    -1,    -1,   130,    -1,
      -1,   133,   134,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,    -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,
     152,   153,   154,   155,    -1,    -1,   158,   159,   160,    -1,
     162,    -1,   164,   165,    -1,   167,   168,   169,    -1,    -1,
     172,    -1,    -1,    -1,   176,   177,    -1,   179,    -1,   181,
      -1,   183,   184,   185,   186,   187,    -1,   189,    -1,    -1,
      -1,   193,   194,    -1,   196,    -1,    -1,   199,   200,    -1,
      -1,    -1,   204,   205,   206,   207,   208,    -1,    -1,   211,
     212,    -1,    -1,   215,   216,    -1,   218,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,   227,    -1,   229,   230,    -1,
     232,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,
      -1,    -1,   244,    -1,    -1,   247,   248,   249,    -1,    -1,
      -1,    -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,
     262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,   288,   289,   290,   291,
      -1,   293,   294,   295,    -1,    -1,    -1,   299,   300,   301,
     302,   303,    -1,    -1,   306,   307,    -1,   309,    -1,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
      -1,   323,   324,    -1,    -1,   327,   328,   329,   330,    -1,
      -1,    -1,   334,   335,    -1,    -1,    -1,    -1,   340,   341,
     342,    -1,   344,   345,   346,    -1,   348,    -1,    -1,    -1,
      -1,    -1,    -1,   355,    -1,    -1,    -1,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,    -1,    -1,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,   418,   419,   420,    -1,
     422,   423,    -1,    -1,    -1,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,    -1,
      -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,
      -1,   473,    -1,    -1,   476,    -1,    -1,   479,   480,    -1,
      -1,   483,    -1,    -1,   486,   487,    -1,   489,   490,   491,
     492,   493,    -1,    -1,   496,   497,   498,   499,    -1,   501,
     502,    -1,   504,    -1,   506,   507,   508,    -1,   510,   511,
     512,    -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
      -1,   523,   524,    -1,    -1,    -1,   528,   529,   530,   531,
      -1,   533,   534,    -1,   536,   537,    -1,   539,   540,    -1,
      -1,   543,    -1,   545,    -1,   547,    -1,   549,    -1,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,
      -1,   563,    -1,    -1,    -1,   567,   568,   569,   570,    -1,
      -1,    -1,    -1,   575,   576,    -1,   578,   579,    -1,    -1,
     582,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   600,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    -1,    71,    72,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    -1,
      83,    84,    -1,    86,    -1,    -1,    89,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,
      -1,   104,    -1,    -1,    -1,    -1,   109,   110,    -1,    -1,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,   121,    -1,
     123,   124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,
     133,   134,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
      -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,   152,
     153,   154,   155,    -1,    -1,   158,   159,   160,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,    -1,   172,
      -1,    -1,    -1,   176,   177,    -1,   179,    -1,   181,    -1,
     183,   184,   185,   186,   187,    -1,   189,    -1,    -1,    -1,
     193,   194,    -1,   196,    -1,    -1,   199,   200,    -1,    -1,
      -1,   204,   205,   206,   207,   208,    -1,    -1,   211,   212,
      -1,    -1,   215,   216,    -1,   218,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,   229,   230,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,
      -1,   244,    -1,    -1,   247,   248,   249,    -1,    -1,    -1,
      -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,   289,   290,   291,    -1,
     293,   294,   295,    -1,    -1,    -1,   299,   300,   301,   302,
     303,    -1,    -1,   306,   307,    -1,   309,    -1,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
     323,   324,    -1,    -1,   327,   328,   329,   330,    -1,    -1,
      -1,   334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,
      -1,   344,   345,   346,    -1,   348,    -1,    -1,    -1,    -1,
      -1,    -1,   355,    -1,    -1,    -1,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,   420,    -1,   422,
     423,    -1,    -1,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,    -1,    -1,   476,    -1,    -1,   479,   480,    -1,    -1,
     483,    -1,    -1,   486,   487,    -1,   489,   490,   491,   492,
     493,    -1,    -1,   496,   497,   498,   499,    -1,   501,   502,
      -1,   504,    -1,   506,   507,   508,    -1,   510,   511,   512,
      -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
     523,   524,    -1,    -1,    -1,   528,   529,   530,   531,    -1,
     533,   534,    -1,   536,   537,    -1,   539,   540,    -1,    -1,
     543,    -1,   545,    -1,   547,    -1,   549,    -1,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,
     563,    -1,    -1,    -1,   567,   568,   569,   570,    -1,    -1,
      -1,    -1,   575,   576,    -1,   578,   579,    -1,    -1,   582,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,   600,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    -1,    68,    69,    -1,    71,    72,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    -1,    83,
      84,    -1,    86,    -1,    -1,    89,    -1,    -1,    92,    -1,
      -1,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,
     104,    -1,    -1,    -1,    -1,   109,   110,    -1,    -1,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,   121,    -1,   123,
     124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,   133,
     134,   135,    -1,    -1,    -1,   139,    -1,   141,   142,    -1,
     144,   145,   146,    -1,    -1,   149,    -1,   151,   152,   153,
     154,   155,    -1,    -1,   158,   159,   160,    -1,   162,    -1,
     164,   165,    -1,   167,   168,   169,    -1,    -1,   172,    -1,
      -1,    -1,   176,   177,    -1,   179,    -1,   181,    -1,   183,
     184,   185,   186,   187,    -1,   189,    -1,    -1,    -1,   193,
     194,    -1,   196,    -1,    -1,   199,   200,    -1,    -1,    -1,
     204,   205,   206,   207,   208,    -1,    -1,   211,   212,    -1,
      -1,   215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,
      -1,    -1,    -1,   227,    -1,   229,   230,    -1,   232,   233,
      -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,    -1,
     244,    -1,    -1,   247,   248,   249,    -1,    -1,    -1,    -1,
     254,   255,    -1,   257,    -1,   259,    -1,   261,   262,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,   289,   290,   291,    -1,   293,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,   309,    -1,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,    -1,   323,
     324,    -1,    -1,   327,   328,   329,   330,    -1,    -1,    -1,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,    -1,
     344,   345,   346,    -1,   348,    -1,    -1,    -1,    -1,    -1,
      -1,   355,    -1,    -1,    -1,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,   418,   419,   420,    -1,   422,   423,
      -1,    -1,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,
     444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,
      -1,    -1,   476,    -1,    -1,   479,   480,    -1,    -1,   483,
      -1,    -1,   486,   487,    -1,   489,   490,   491,   492,   493,
      -1,    -1,   496,   497,   498,   499,    -1,   501,   502,    -1,
     504,    -1,   506,   507,   508,    -1,   510,   511,   512,    -1,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,    -1,    -1,   528,   529,   530,   531,    -1,   533,
     534,    -1,   536,   537,    -1,   539,   540,    -1,    -1,   543,
      -1,   545,    -1,   547,    -1,   549,    -1,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,   563,
      -1,    -1,    -1,   567,   568,   569,   570,    -1,    -1,    -1,
      -1,   575,   576,    -1,   578,   579,    -1,    -1,   582,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,   600,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,
      55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    -1,    -1,    72,    -1,    74,
      75,    76,    77,    -1,    79,    -1,    81,    -1,    -1,    84,
      -1,    86,    -1,    -1,    89,    -1,    -1,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,   104,
      -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,   121,    -1,   123,   124,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   134,
     135,    -1,    -1,    -1,   139,    -1,    -1,   142,    -1,   144,
     145,   146,    -1,    -1,   149,    -1,   151,   152,   153,   154,
      -1,    -1,    -1,   158,   159,   160,    -1,   162,    -1,   164,
     165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
      -1,   176,   177,    -1,   179,    -1,   181,    -1,   183,   184,
     185,   186,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,
      -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,
     205,   206,   207,   208,   209,    -1,   211,   212,    -1,    -1,
     215,   216,    -1,   218,    -1,    -1,    -1,   222,    -1,    -1,
      -1,    -1,   227,    -1,   229,   230,    -1,   232,   233,   234,
      -1,    -1,   237,    -1,    -1,    -1,   241,    -1,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,    -1,    -1,   254,
     255,    -1,   257,    -1,   259,    -1,   261,   262,    -1,    -1,
      -1,    -1,   267,    -1,    -1,    -1,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,   288,   289,   290,   291,    -1,   293,   294,
     295,    -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,
      -1,   306,   307,    -1,   309,    -1,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,   323,   324,
      -1,    -1,   327,   328,   329,   330,    -1,    -1,    -1,    -1,
     335,    -1,    -1,    -1,    -1,   340,   341,   342,    -1,   344,
     345,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   360,   361,    -1,    -1,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,    -1,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,    -1,    -1,   411,    -1,   413,   414,
      -1,   416,    -1,    -1,   419,    -1,    -1,   422,   423,   424,
      -1,    -1,    -1,    -1,   429,   430,   431,   432,   433,   434,
      -1,   436,    -1,   438,    -1,    -1,    -1,    -1,   443,   444,
     445,    -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
      -1,   456,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,    -1,
      -1,   476,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,   493,    -1,
      -1,   496,   497,   498,   499,    -1,   501,   502,    -1,   504,
      -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,    -1,    -1,    -1,   529,   530,   531,    -1,   533,   534,
      -1,   536,   537,    -1,    -1,    -1,    -1,    -1,   543,    -1,
      -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,   563,    -1,
      -1,    -1,   567,   568,   569,   570,    -1,    -1,   573,    -1,
     575,    -1,    -1,   578,    -1,    -1,     5,   582,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
     595,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    -1,    71,    72,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    -1,    83,    84,    -1,    86,    -1,    -1,
      89,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,
      99,   100,   101,    -1,    -1,   104,    -1,    -1,    -1,    -1,
     109,   110,    -1,    -1,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,   130,    -1,    -1,   133,   134,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,    -1,   144,   145,   146,    -1,    -1,
     149,    -1,   151,   152,   153,   154,   155,    -1,    -1,   158,
     159,   160,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,    -1,   172,    -1,    -1,    -1,   176,   177,    -1,
     179,    -1,   181,    -1,   183,   184,   185,   186,   187,    -1,
     189,    -1,    -1,    -1,   193,   194,    -1,   196,    -1,    -1,
     199,   200,    -1,    -1,    -1,   204,   205,   206,   207,   208,
      -1,    -1,   211,   212,    -1,    -1,   215,   216,    -1,   218,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,    -1,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,
      -1,   240,   241,    -1,    -1,   244,    -1,    -1,   247,   248,
      -1,    -1,    -1,    -1,    -1,   254,   255,    -1,   257,    -1,
     259,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,   288,
     289,   290,   291,    -1,   293,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,    -1,
     309,    -1,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,    -1,    -1,   327,   328,
     329,   330,    -1,    -1,    -1,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,    -1,   344,   345,   346,    -1,   348,
      -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,   420,    -1,   422,   423,    -1,    -1,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,    -1,    -1,   476,    -1,    -1,
     479,   480,    -1,    -1,   483,    -1,    -1,   486,   487,    -1,
     489,   490,   491,   492,   493,    -1,    -1,   496,   497,   498,
     499,    -1,   501,   502,    -1,   504,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,    -1,    -1,   528,
     529,   530,   531,    -1,   533,   534,    -1,   536,   537,    -1,
     539,   540,    -1,    -1,   543,    -1,   545,    -1,   547,    -1,
     549,    -1,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
      -1,   560,    -1,    -1,   563,    -1,    -1,    -1,   567,   568,
     569,   570,    -1,    -1,    -1,    -1,   575,   576,    -1,   578,
     579,    -1,     5,   582,     7,     8,     9,    10,    11,   588,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    -1,    71,    72,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    -1,
      83,    84,    -1,    86,    -1,    -1,    89,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,
      -1,   104,    -1,    -1,    -1,    -1,   109,   110,    -1,    -1,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,   121,    -1,
     123,   124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,
     133,   134,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
      -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,   152,
     153,   154,   155,    -1,    -1,   158,   159,   160,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,    -1,   172,
      -1,    -1,    -1,   176,   177,    -1,   179,    -1,   181,    -1,
     183,   184,   185,   186,   187,    -1,   189,    -1,    -1,    -1,
     193,   194,    -1,   196,    -1,    -1,   199,   200,    -1,    -1,
      -1,   204,   205,   206,   207,   208,    -1,    -1,   211,   212,
      -1,    -1,   215,   216,    -1,   218,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,   229,   230,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,
      -1,   244,    -1,    -1,   247,   248,    -1,    -1,    -1,    -1,
      -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,   289,   290,   291,    -1,
     293,   294,   295,    -1,    -1,    -1,   299,   300,   301,   302,
     303,    -1,    -1,   306,   307,    -1,   309,    -1,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
     323,   324,    -1,    -1,   327,   328,   329,   330,    -1,    -1,
      -1,   334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,
      -1,   344,   345,   346,    -1,   348,    -1,    -1,    -1,    -1,
      -1,    -1,   355,    -1,    -1,    -1,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,   420,    -1,   422,
     423,    -1,    -1,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,    -1,    -1,   476,    -1,    -1,   479,   480,    -1,    -1,
     483,    -1,    -1,   486,   487,    -1,   489,   490,   491,   492,
     493,    -1,    -1,   496,   497,   498,   499,    -1,   501,   502,
      -1,   504,    -1,   506,   507,   508,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
     523,   524,    -1,    -1,    -1,   528,   529,   530,   531,    -1,
     533,   534,    -1,   536,   537,    -1,   539,   540,    -1,    -1,
     543,    -1,   545,    -1,   547,    -1,   549,    -1,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,
     563,    -1,    -1,    -1,   567,   568,   569,   570,    -1,    -1,
      -1,    -1,   575,   576,    -1,   578,   579,    -1,     5,   582,
       7,     8,     9,    10,    11,   588,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    -1,    71,    72,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    -1,    83,    84,    -1,    86,
      -1,    -1,    89,    -1,    -1,    92,    -1,    -1,    -1,    -1,
      -1,    -1,    99,   100,   101,    -1,    -1,   104,    -1,    -1,
      -1,    -1,   109,   110,    -1,    -1,    -1,    -1,   115,    -1,
     117,    -1,    -1,    -1,   121,    -1,   123,   124,   125,   126,
      -1,    -1,    -1,   130,    -1,    -1,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,    -1,   144,   145,   146,
      -1,    -1,   149,    -1,   151,   152,   153,   154,   155,    -1,
      -1,   158,   159,   160,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,    -1,   172,    -1,    -1,    -1,   176,
     177,    -1,   179,    -1,   181,    -1,   183,   184,   185,   186,
     187,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,   196,
      -1,    -1,   199,   200,    -1,    -1,    -1,   204,   205,   206,
     207,   208,    -1,    -1,   211,   212,    -1,    -1,   215,   216,
      -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,    -1,   229,   230,    -1,   232,   233,    -1,    -1,    -1,
     237,    -1,    -1,   240,   241,    -1,    -1,   244,    -1,    -1,
     247,   248,    -1,    -1,    -1,    -1,    -1,   254,   255,    -1,
     257,    -1,   259,    -1,   261,   262,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,   288,   289,   290,   291,    -1,   293,   294,   295,    -1,
      -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,   306,
     307,    -1,   309,    -1,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,   323,   324,    -1,    -1,
     327,   328,   329,   330,    -1,    -1,    -1,   334,   335,    -1,
      -1,    -1,    -1,   340,   341,   342,    -1,   344,   345,   346,
      -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,
      -1,    -1,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,   420,    -1,   422,   423,    -1,    -1,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,    -1,    -1,   476,
      -1,    -1,   479,   480,    -1,    -1,   483,    -1,    -1,   486,
     487,    -1,   489,   490,   491,   492,   493,    -1,    -1,   496,
     497,   498,   499,    -1,   501,   502,    -1,   504,    -1,   506,
     507,   508,    -1,    -1,   511,   512,    -1,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,    -1,
      -1,   528,   529,   530,   531,    -1,   533,   534,    -1,   536,
     537,    -1,   539,   540,    -1,    -1,   543,    -1,   545,    -1,
     547,    -1,   549,    -1,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,    -1,   560,    -1,    -1,   563,    -1,    -1,    -1,
     567,   568,   569,   570,    -1,    -1,    -1,    -1,   575,   576,
      -1,   578,   579,    -1,     5,   582,     7,     8,     9,    10,
      11,   588,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    -1,
      71,    72,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    -1,    83,    84,    -1,    86,    -1,    -1,    89,    -1,
      -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,
     101,    -1,    -1,   104,    -1,    -1,    -1,    -1,   109,   110,
      -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
     121,    -1,   123,   124,   125,   126,    -1,    -1,    -1,   130,
      -1,    -1,   133,   134,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,    -1,   144,   145,   146,    -1,    -1,   149,    -1,
     151,   152,   153,   154,   155,    -1,    -1,   158,   159,   160,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
      -1,   172,    -1,    -1,    -1,   176,   177,    -1,   179,    -1,
     181,    -1,   183,   184,   185,   186,   187,    -1,   189,    -1,
      -1,    -1,   193,   194,    -1,   196,    -1,    -1,   199,   200,
      -1,    -1,    -1,   204,   205,   206,   207,   208,    -1,    -1,
     211,   212,    -1,    -1,   215,   216,    -1,   218,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,   229,   230,
      -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,
     241,    -1,    -1,   244,    -1,    -1,   247,   248,    -1,    -1,
      -1,    -1,    -1,   254,   255,    -1,   257,    -1,   259,    -1,
     261,   262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,   288,   289,   290,
     291,    -1,   293,   294,   295,    -1,    -1,    -1,   299,   300,
     301,   302,   303,    -1,    -1,   306,   307,    -1,   309,    -1,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,   323,   324,    -1,    -1,   327,   328,   329,   330,
      -1,    -1,    -1,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,    -1,   344,   345,   346,    -1,   348,    -1,    -1,
      -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,   420,
      -1,   422,   423,    -1,    -1,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,    -1,    -1,   476,    -1,    -1,   479,   480,
      -1,    -1,   483,    -1,    -1,   486,   487,    -1,   489,   490,
     491,   492,   493,    -1,    -1,   496,   497,   498,   499,    -1,
     501,   502,    -1,   504,    -1,   506,   507,   508,    -1,    -1,
     511,   512,    -1,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,   523,   524,    -1,    -1,    -1,   528,   529,   530,
     531,    -1,   533,   534,    -1,   536,   537,    -1,   539,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,    -1,   549,    -1,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,    -1,   560,
      -1,    -1,   563,    -1,    -1,    -1,   567,   568,   569,   570,
      -1,    -1,    -1,    -1,   575,   576,    -1,   578,   579,    -1,
       5,   582,     7,     8,     9,    10,    11,   588,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    -1,    71,    72,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    -1,    83,    84,
      -1,    86,    -1,    -1,    89,    -1,    -1,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,   104,
      -1,    -1,    -1,    -1,   109,   110,   111,    -1,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,   121,    -1,   123,   124,
     125,   126,    -1,    -1,    -1,   130,    -1,    -1,   133,   134,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,    -1,   144,
     145,   146,    -1,    -1,   149,    -1,   151,   152,   153,   154,
     155,    -1,    -1,   158,   159,   160,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,    -1,    -1,
      -1,   176,   177,    -1,   179,    -1,   181,    -1,   183,   184,
     185,   186,   187,    -1,   189,    -1,    -1,    -1,   193,   194,
      -1,   196,   197,    -1,   199,   200,    -1,    -1,    -1,   204,
     205,   206,   207,   208,    -1,    -1,   211,   212,    -1,    -1,
     215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,    -1,   229,   230,    -1,   232,   233,    -1,
      -1,    -1,   237,    -1,    -1,   240,   241,    -1,    -1,   244,
      -1,    -1,   247,   248,    -1,    -1,    -1,    -1,    -1,   254,
     255,    -1,   257,    -1,   259,    -1,   261,   262,    -1,    -1,
     265,    -1,    -1,    -1,    -1,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,   288,   289,   290,   291,    -1,   293,   294,
     295,    -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,
      -1,   306,   307,    -1,   309,    -1,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,   323,   324,
      -1,    -1,   327,   328,   329,   330,   331,   332,    -1,   334,
     335,    -1,    -1,   338,    -1,   340,   341,   342,    -1,   344,
     345,   346,    -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,
     355,    -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,   420,    -1,   422,   423,    -1,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,   466,   467,   468,    -1,   470,   471,    -1,   473,    -1,
      -1,   476,    -1,    -1,   479,   480,    -1,    -1,   483,    -1,
      -1,   486,   487,    -1,   489,   490,   491,   492,   493,    -1,
      -1,   496,   497,   498,   499,    -1,   501,   502,    -1,   504,
      -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,    -1,    -1,   528,   529,   530,   531,   532,   533,   534,
      -1,   536,   537,    -1,   539,   540,    -1,    -1,   543,    -1,
     545,    -1,   547,    -1,   549,    -1,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,   563,    -1,
      -1,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
     575,   576,    -1,   578,   579,    -1,     5,   582,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    -1,    71,    72,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    -1,    83,    84,    -1,    86,    -1,    -1,
      89,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,
      99,   100,   101,    -1,    -1,   104,    -1,    -1,    -1,    -1,
     109,   110,    -1,    -1,    -1,   114,   115,    -1,   117,    -1,
      -1,    -1,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,   130,    -1,    -1,   133,   134,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,    -1,   144,   145,   146,   147,    -1,
     149,    -1,   151,   152,   153,   154,   155,    -1,    -1,   158,
     159,   160,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,    -1,   172,    -1,    -1,    -1,   176,   177,    -1,
     179,    -1,   181,    -1,   183,   184,   185,   186,   187,    -1,
     189,    -1,    -1,    -1,   193,   194,    -1,   196,    -1,    -1,
     199,   200,    -1,    -1,    -1,   204,   205,   206,   207,   208,
      -1,    -1,   211,   212,    -1,    -1,   215,   216,    -1,   218,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,    -1,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,
      -1,   240,   241,    -1,    -1,   244,    -1,    -1,   247,   248,
     249,    -1,    -1,    -1,    -1,   254,   255,    -1,   257,    -1,
     259,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,   288,
     289,   290,   291,    -1,   293,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,    -1,
     309,    -1,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,    -1,    -1,   327,   328,
     329,   330,    -1,    -1,    -1,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,    -1,   344,   345,   346,    -1,   348,
      -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,   420,    -1,   422,   423,    -1,    -1,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,    -1,    -1,   476,    -1,    -1,
     479,   480,    -1,    -1,   483,    -1,    -1,   486,   487,    -1,
     489,   490,   491,   492,   493,    -1,    -1,   496,   497,   498,
     499,    -1,   501,   502,    -1,   504,    -1,   506,   507,   508,
      -1,   510,   511,   512,    -1,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,    -1,    -1,   528,
     529,   530,   531,    -1,   533,   534,    -1,   536,   537,    -1,
     539,   540,    -1,    -1,   543,    -1,   545,    -1,   547,    -1,
     549,    -1,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
      -1,   560,    -1,    -1,   563,    -1,    -1,    -1,   567,   568,
     569,   570,    -1,    -1,    -1,    -1,   575,   576,    -1,   578,
     579,    -1,     5,   582,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    -1,    71,    72,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    -1,
      83,    84,    -1,    86,    -1,    -1,    89,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,
      -1,   104,    -1,    -1,    -1,    -1,   109,   110,    -1,    -1,
      -1,   114,   115,    -1,   117,    -1,    -1,    -1,   121,    -1,
     123,   124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,
     133,   134,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
      -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,   152,
     153,   154,   155,    -1,    -1,   158,   159,   160,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,    -1,   172,
      -1,    -1,    -1,   176,   177,    -1,   179,    -1,   181,    -1,
     183,   184,   185,   186,   187,    -1,   189,    -1,    -1,    -1,
     193,   194,    -1,   196,    -1,    -1,   199,   200,    -1,    -1,
      -1,   204,   205,   206,   207,   208,    -1,    -1,   211,   212,
      -1,    -1,   215,   216,    -1,   218,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,   229,   230,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,
      -1,   244,    -1,    -1,   247,   248,   249,    -1,    -1,    -1,
      -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,   289,   290,   291,    -1,
     293,   294,   295,    -1,    -1,    -1,   299,   300,   301,   302,
     303,    -1,    -1,   306,   307,    -1,   309,    -1,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
     323,   324,    -1,    -1,   327,   328,   329,   330,    -1,    -1,
      -1,   334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,
      -1,   344,   345,   346,    -1,   348,    -1,    -1,    -1,    -1,
      -1,    -1,   355,    -1,    -1,    -1,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,   420,    -1,   422,
     423,    -1,    -1,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,    -1,    -1,   476,    -1,    -1,   479,   480,    -1,    -1,
     483,    -1,    -1,   486,   487,    -1,   489,   490,   491,   492,
     493,    -1,    -1,   496,   497,   498,   499,    -1,   501,   502,
      -1,   504,    -1,   506,   507,   508,    -1,   510,   511,   512,
      -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
     523,   524,    -1,    -1,    -1,   528,   529,   530,   531,    -1,
     533,   534,    -1,   536,   537,    -1,   539,   540,    -1,    -1,
     543,    -1,   545,    -1,   547,    -1,   549,    -1,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,
     563,    -1,    -1,    -1,   567,   568,   569,   570,    -1,    -1,
      -1,    -1,   575,   576,    -1,   578,   579,    -1,     5,   582,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    -1,    71,    72,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    -1,    83,    84,    -1,    86,
      -1,    -1,    89,    -1,    -1,    92,    -1,    -1,    -1,    -1,
      -1,    -1,    99,   100,   101,    -1,    -1,   104,    -1,    -1,
      -1,    -1,   109,   110,    -1,    -1,    -1,   114,   115,    -1,
     117,    -1,    -1,    -1,   121,    -1,   123,   124,   125,   126,
      -1,    -1,    -1,   130,    -1,    -1,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,    -1,   144,   145,   146,
      -1,    -1,   149,    -1,   151,   152,   153,   154,   155,    -1,
      -1,   158,   159,   160,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,    -1,   172,    -1,    -1,    -1,   176,
     177,    -1,   179,    -1,   181,    -1,   183,   184,   185,   186,
     187,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,   196,
      -1,    -1,   199,   200,    -1,    -1,    -1,   204,   205,   206,
     207,   208,    -1,    -1,   211,   212,    -1,    -1,   215,   216,
      -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,    -1,   229,   230,    -1,   232,   233,    -1,    -1,    -1,
     237,    -1,    -1,   240,   241,    -1,    -1,   244,    -1,    -1,
     247,   248,   249,    -1,    -1,    -1,    -1,   254,   255,    -1,
     257,    -1,   259,    -1,   261,   262,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,   288,   289,   290,   291,    -1,   293,   294,   295,    -1,
      -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,   306,
     307,    -1,   309,    -1,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,   323,   324,    -1,    -1,
     327,   328,   329,   330,    -1,    -1,    -1,   334,   335,    -1,
      -1,    -1,    -1,   340,   341,   342,    -1,   344,   345,   346,
      -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,
      -1,    -1,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,   420,    -1,   422,   423,    -1,    -1,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,    -1,    -1,   476,
      -1,    -1,   479,   480,    -1,    -1,   483,    -1,    -1,   486,
     487,    -1,   489,   490,   491,   492,   493,    -1,    -1,   496,
     497,   498,   499,    -1,   501,   502,    -1,   504,    -1,   506,
     507,   508,    -1,   510,   511,   512,    -1,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,    -1,
      -1,   528,   529,   530,   531,    -1,   533,   534,    -1,   536,
     537,    -1,   539,   540,    -1,    -1,   543,    -1,   545,    -1,
     547,    -1,   549,    -1,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,    -1,   560,    -1,    -1,   563,    -1,    -1,    -1,
     567,   568,   569,   570,    -1,    -1,    -1,    -1,   575,   576,
      -1,   578,   579,    -1,     5,   582,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    -1,
      71,    72,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    -1,    83,    84,    -1,    86,    -1,    -1,    89,    -1,
      -1,    92,    -1,    94,    -1,    -1,    -1,    -1,    99,   100,
     101,    -1,    -1,   104,    -1,    -1,    -1,    -1,   109,   110,
      -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
     121,    -1,   123,   124,   125,   126,    -1,    -1,    -1,   130,
      -1,    -1,   133,   134,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,    -1,   144,   145,   146,    -1,    -1,   149,    -1,
     151,   152,   153,   154,   155,    -1,    -1,   158,   159,   160,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
      -1,   172,    -1,    -1,    -1,   176,   177,    -1,   179,    -1,
     181,    -1,   183,   184,   185,   186,   187,    -1,   189,    -1,
      -1,    -1,   193,   194,    -1,   196,    -1,    -1,   199,   200,
      -1,    -1,    -1,   204,   205,   206,   207,   208,    -1,    -1,
     211,   212,    -1,    -1,   215,   216,    -1,   218,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,   229,   230,
      -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,
     241,    -1,    -1,   244,    -1,    -1,   247,   248,   249,    -1,
      -1,    -1,    -1,   254,   255,    -1,   257,    -1,   259,    -1,
     261,   262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,   288,   289,   290,
     291,    -1,   293,   294,   295,    -1,    -1,    -1,   299,   300,
     301,   302,   303,    -1,    -1,   306,   307,    -1,   309,    -1,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,   323,   324,    -1,    -1,   327,   328,   329,   330,
      -1,    -1,    -1,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,    -1,   344,   345,   346,    -1,   348,    -1,    -1,
      -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,   420,
      -1,   422,   423,    -1,    -1,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,    -1,    -1,   476,    -1,    -1,   479,   480,
      -1,    -1,   483,    -1,    -1,   486,   487,    -1,   489,   490,
     491,   492,   493,    -1,    -1,   496,   497,   498,   499,    -1,
     501,   502,    -1,   504,    -1,   506,   507,   508,    -1,   510,
     511,   512,    -1,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,   523,   524,    -1,    -1,    -1,   528,   529,   530,
     531,    -1,   533,   534,    -1,   536,   537,    -1,   539,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,    -1,   549,    -1,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,    -1,   560,
      -1,    -1,   563,    -1,    -1,    -1,   567,   568,   569,   570,
      -1,    -1,    -1,    -1,   575,   576,    -1,   578,   579,    -1,
       5,   582,     7,     8,     9,    10,    11,    12,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    -1,    71,    72,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    -1,    83,    84,
      -1,    86,    -1,    -1,    89,    -1,    -1,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,   104,
      -1,    -1,    -1,    -1,   109,   110,    -1,    -1,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,   121,    -1,   123,   124,
     125,   126,    -1,    -1,    -1,   130,    -1,    -1,   133,   134,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,    -1,   144,
     145,   146,    -1,    -1,   149,    -1,   151,   152,   153,   154,
     155,    -1,    -1,   158,   159,   160,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,    -1,   172,    -1,    -1,
      -1,   176,   177,    -1,   179,    -1,   181,    -1,   183,   184,
     185,   186,   187,    -1,   189,    -1,    -1,    -1,   193,   194,
      -1,   196,    -1,    -1,   199,   200,    -1,    -1,    -1,   204,
     205,   206,   207,   208,    -1,    -1,   211,   212,    -1,    -1,
     215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,    -1,   229,   230,    -1,   232,   233,    -1,
      -1,    -1,   237,    -1,    -1,   240,   241,    -1,    -1,   244,
      -1,    -1,   247,   248,   249,    -1,    -1,    -1,    -1,   254,
     255,    -1,   257,    -1,   259,    -1,   261,   262,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,   288,   289,   290,   291,    -1,   293,   294,
     295,    -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,
      -1,   306,   307,    -1,   309,    -1,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,   323,   324,
      -1,    -1,   327,   328,   329,   330,    -1,    -1,    -1,   334,
     335,    -1,    -1,    -1,    -1,   340,   341,   342,    -1,   344,
     345,   346,    -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,
     355,    -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,   420,    -1,   422,   423,    -1,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,    -1,
      -1,   476,    -1,    -1,   479,   480,    -1,    -1,   483,    -1,
      -1,   486,   487,    -1,   489,   490,   491,   492,   493,    -1,
      -1,   496,   497,   498,   499,    -1,   501,   502,    -1,   504,
      -1,   506,   507,   508,    -1,   510,   511,   512,    -1,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,    -1,    -1,   528,   529,   530,   531,    -1,   533,   534,
      -1,   536,   537,    -1,   539,   540,    -1,    -1,   543,    -1,
     545,    -1,   547,    -1,   549,    -1,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,   563,    -1,
      -1,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
     575,   576,    -1,   578,   579,    -1,     5,   582,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    35,    36,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    -1,    71,    72,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    -1,    83,    84,    -1,    86,    -1,    -1,
      89,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,
      99,   100,   101,    -1,    -1,   104,    -1,    -1,    -1,    -1,
     109,   110,    -1,    -1,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,   130,    -1,    -1,   133,   134,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,    -1,   144,   145,   146,    -1,    -1,
     149,    -1,   151,   152,   153,   154,   155,    -1,    -1,   158,
     159,   160,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,    -1,   172,    -1,    -1,    -1,   176,   177,    -1,
     179,    -1,   181,    -1,   183,   184,   185,   186,   187,    -1,
     189,    -1,    -1,    -1,   193,   194,    -1,   196,   197,    -1,
     199,   200,    -1,    -1,    -1,   204,   205,   206,   207,   208,
      -1,    -1,   211,   212,    -1,    -1,   215,   216,    -1,   218,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,    -1,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,
      -1,   240,   241,    -1,    -1,   244,    -1,    -1,   247,   248,
      -1,    -1,    -1,    -1,    -1,   254,   255,    -1,   257,    -1,
     259,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,   288,
     289,   290,   291,    -1,   293,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,    -1,
     309,    -1,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,    -1,    -1,   327,   328,
     329,   330,    -1,    -1,    -1,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,    -1,   344,   345,   346,    -1,   348,
      -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,   420,    -1,   422,   423,    -1,    -1,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,    -1,    -1,   476,    -1,    -1,
     479,   480,    -1,    -1,   483,    -1,    -1,   486,   487,    -1,
     489,   490,   491,   492,   493,    -1,    -1,   496,   497,   498,
     499,    -1,   501,   502,    -1,   504,    -1,   506,   507,   508,
      -1,   510,   511,   512,    -1,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,    -1,    -1,   528,
     529,   530,   531,    -1,   533,   534,    -1,   536,   537,    -1,
     539,   540,    -1,    -1,   543,    -1,   545,    -1,   547,    -1,
     549,    -1,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
      -1,   560,    -1,    -1,   563,    -1,    -1,    -1,   567,   568,
     569,   570,    -1,    -1,    -1,    -1,   575,   576,    -1,   578,
     579,    -1,     5,   582,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    -1,    71,    72,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    -1,
      83,    84,    -1,    86,    -1,    -1,    89,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,
      -1,   104,    -1,    -1,    -1,    -1,   109,   110,    -1,    -1,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,   121,    -1,
     123,   124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,
     133,   134,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
      -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,   152,
     153,   154,   155,    -1,    -1,   158,   159,   160,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,    -1,   172,
      -1,    -1,    -1,   176,   177,    -1,   179,    -1,   181,    -1,
     183,   184,   185,   186,   187,    -1,   189,    -1,    -1,    -1,
     193,   194,    -1,   196,    -1,    -1,   199,   200,    -1,    -1,
      -1,   204,   205,   206,   207,   208,    -1,    -1,   211,   212,
      -1,    -1,   215,   216,    -1,   218,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,   229,   230,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,
      -1,   244,    -1,    -1,   247,   248,   249,    -1,    -1,    -1,
      -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,   289,   290,   291,    -1,
     293,   294,   295,    -1,    -1,    -1,   299,   300,   301,   302,
     303,    -1,    -1,   306,   307,    -1,   309,    -1,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
     323,   324,    -1,    -1,   327,   328,   329,   330,    -1,    -1,
      -1,   334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,
      -1,   344,   345,   346,    -1,   348,    -1,    -1,    -1,    -1,
      -1,    -1,   355,    -1,    -1,    -1,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,   420,    -1,   422,
     423,    -1,    -1,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,    -1,    -1,   476,    -1,    -1,   479,   480,    -1,    -1,
     483,    -1,    -1,   486,   487,    -1,   489,   490,   491,   492,
     493,    -1,    -1,   496,   497,   498,   499,    -1,   501,   502,
      -1,   504,    -1,   506,   507,   508,    -1,   510,   511,   512,
      -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
     523,   524,    -1,    -1,    -1,   528,   529,   530,   531,    -1,
     533,   534,    -1,   536,   537,    -1,   539,   540,    -1,    -1,
     543,    -1,   545,    -1,   547,    -1,   549,    -1,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,
     563,    -1,    -1,    -1,   567,   568,   569,   570,    -1,    -1,
      -1,    -1,   575,   576,    -1,   578,   579,    -1,     5,   582,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    -1,    71,    72,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    -1,    83,    84,    -1,    86,
      -1,    -1,    89,    -1,    -1,    92,    -1,    -1,    -1,    -1,
      -1,    -1,    99,   100,   101,    -1,    -1,   104,    -1,    -1,
      -1,    -1,   109,   110,    -1,    -1,    -1,   114,   115,    -1,
     117,    -1,    -1,    -1,   121,    -1,   123,   124,   125,   126,
      -1,    -1,    -1,   130,    -1,    -1,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,    -1,   144,   145,   146,
      -1,    -1,   149,    -1,   151,   152,   153,   154,   155,    -1,
      -1,   158,   159,   160,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,    -1,   172,    -1,    -1,    -1,   176,
     177,    -1,   179,    -1,   181,    -1,   183,   184,   185,   186,
     187,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,   196,
      -1,    -1,   199,   200,    -1,    -1,    -1,   204,   205,   206,
     207,   208,    -1,    -1,   211,   212,    -1,    -1,   215,   216,
      -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,    -1,   229,   230,    -1,   232,   233,    -1,    -1,    -1,
     237,    -1,    -1,   240,   241,    -1,    -1,   244,    -1,    -1,
     247,   248,   249,    -1,    -1,    -1,    -1,   254,   255,    -1,
     257,    -1,   259,    -1,   261,   262,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,   288,   289,   290,   291,    -1,   293,   294,   295,    -1,
      -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,   306,
     307,    -1,   309,    -1,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,   323,   324,    -1,    -1,
     327,   328,   329,   330,    -1,    -1,    -1,   334,   335,    -1,
      -1,    -1,    -1,   340,   341,   342,    -1,   344,   345,   346,
      -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,
      -1,    -1,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,   420,    -1,   422,   423,    -1,    -1,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,    -1,    -1,   476,
      -1,    -1,   479,   480,    -1,    -1,   483,    -1,    -1,   486,
     487,    -1,   489,   490,   491,   492,   493,    -1,    -1,   496,
     497,   498,   499,    -1,   501,   502,    -1,   504,    -1,   506,
     507,   508,    -1,   510,   511,   512,    -1,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,    -1,
      -1,   528,   529,   530,   531,    -1,   533,   534,    -1,   536,
     537,    -1,   539,   540,    -1,    -1,   543,    -1,   545,    -1,
     547,    -1,   549,    -1,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,    -1,   560,    -1,    -1,   563,    -1,    -1,    -1,
     567,   568,   569,   570,    -1,    -1,    -1,    -1,   575,   576,
      -1,   578,   579,    -1,     5,   582,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    -1,
      71,    72,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    -1,    83,    84,    -1,    86,    -1,    -1,    89,    -1,
      -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,
     101,    -1,    -1,   104,    -1,    -1,    -1,    -1,   109,   110,
      -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
     121,    -1,   123,   124,   125,   126,    -1,    -1,    -1,   130,
      -1,    -1,   133,   134,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,    -1,   144,   145,   146,    -1,    -1,   149,    -1,
     151,   152,   153,   154,   155,    -1,    -1,   158,   159,   160,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
      -1,   172,    -1,    -1,    -1,   176,   177,    -1,   179,    -1,
     181,    -1,   183,   184,   185,   186,   187,    -1,   189,    -1,
      -1,    -1,   193,   194,    -1,   196,    -1,    -1,   199,   200,
      -1,    -1,    -1,   204,   205,   206,   207,   208,    -1,    -1,
     211,   212,    -1,    -1,   215,   216,    -1,   218,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,   229,   230,
      -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,
     241,    -1,    -1,   244,    -1,    -1,   247,   248,   249,    -1,
      -1,    -1,    -1,   254,   255,    -1,   257,    -1,   259,    -1,
     261,   262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,   288,   289,   290,
     291,    -1,   293,   294,   295,    -1,    -1,    -1,   299,   300,
     301,   302,   303,    -1,    -1,   306,   307,    -1,   309,    -1,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,   323,   324,    -1,    -1,   327,   328,   329,   330,
      -1,    -1,    -1,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,    -1,   344,   345,   346,    -1,   348,    -1,    -1,
      -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,   420,
      -1,   422,   423,    -1,    -1,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,    -1,    -1,   476,    -1,    -1,   479,   480,
      -1,    -1,   483,    -1,    -1,   486,   487,    -1,   489,   490,
     491,   492,   493,    -1,    -1,   496,   497,   498,   499,    -1,
     501,   502,    -1,   504,    -1,   506,   507,   508,    -1,   510,
     511,   512,    -1,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,   523,   524,    -1,    -1,    -1,   528,   529,   530,
     531,    -1,   533,   534,    -1,   536,   537,    -1,   539,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,    -1,   549,    -1,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,    -1,   560,
      -1,    -1,   563,    -1,    -1,    -1,   567,   568,   569,   570,
      -1,    -1,    -1,    -1,   575,   576,    -1,   578,   579,    -1,
       5,   582,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    18,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    -1,    71,    72,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    -1,    83,    84,
      -1,    86,    -1,    -1,    89,    -1,    -1,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,   104,
      -1,    -1,    -1,    -1,   109,   110,    -1,    -1,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,   121,    -1,   123,   124,
     125,   126,    -1,    -1,    -1,   130,    -1,    -1,   133,   134,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,    -1,   144,
     145,   146,    -1,    -1,   149,    -1,   151,   152,   153,   154,
     155,    -1,    -1,   158,   159,   160,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,    -1,   172,    -1,    -1,
      -1,   176,   177,    -1,   179,    -1,   181,    -1,   183,   184,
     185,   186,   187,    -1,   189,    -1,    -1,    -1,   193,   194,
      -1,   196,    -1,    -1,   199,   200,    -1,    -1,    -1,   204,
     205,   206,   207,   208,    -1,    -1,   211,   212,    -1,    -1,
     215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,    -1,   229,   230,    -1,   232,   233,    -1,
      -1,    -1,   237,    -1,    -1,   240,   241,    -1,    -1,   244,
      -1,    -1,   247,   248,    -1,    -1,    -1,    -1,    -1,   254,
     255,    -1,   257,    -1,   259,    -1,   261,   262,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,   288,   289,   290,   291,    -1,   293,   294,
     295,    -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,
      -1,   306,   307,    -1,   309,    -1,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,   323,   324,
      -1,    -1,   327,   328,   329,   330,    -1,    -1,    -1,   334,
     335,    -1,    -1,    -1,    -1,   340,   341,   342,    -1,   344,
     345,   346,    -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,
     355,    -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,   420,    -1,   422,   423,    -1,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,    -1,
      -1,   476,    -1,    -1,   479,   480,    -1,    -1,   483,    -1,
      -1,   486,   487,    -1,   489,   490,   491,   492,   493,    -1,
      -1,   496,   497,   498,   499,    -1,   501,   502,    -1,   504,
      -1,   506,   507,   508,    -1,   510,   511,   512,    -1,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,    -1,    -1,   528,   529,   530,   531,    -1,   533,   534,
      -1,   536,   537,    -1,   539,   540,    -1,    -1,   543,    -1,
     545,    -1,   547,    -1,   549,    -1,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,   563,    -1,
      -1,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
     575,   576,    -1,   578,   579,    -1,     5,   582,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    -1,    71,    72,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    -1,    83,    84,    85,    86,    -1,    -1,
      89,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,
      99,   100,   101,    -1,    -1,   104,    -1,    -1,    -1,    -1,
     109,   110,    -1,    -1,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,   130,    -1,    -1,   133,   134,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,    -1,   144,   145,   146,    -1,    -1,
     149,    -1,   151,   152,   153,   154,   155,    -1,   157,   158,
     159,   160,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,    -1,   172,    -1,    -1,    -1,   176,   177,    -1,
     179,    -1,   181,    -1,   183,   184,   185,   186,   187,    -1,
     189,    -1,    -1,    -1,   193,   194,    -1,   196,    -1,    -1,
     199,   200,    -1,    -1,    -1,   204,   205,   206,   207,   208,
      -1,    -1,   211,   212,    -1,    -1,   215,   216,    -1,   218,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,    -1,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,
      -1,   240,   241,    -1,    -1,   244,    -1,    -1,   247,   248,
      -1,    -1,    -1,    -1,    -1,   254,   255,    -1,   257,    -1,
     259,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,   288,
     289,   290,   291,    -1,   293,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,    -1,
     309,    -1,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,    -1,    -1,   327,   328,
     329,   330,    -1,    -1,    -1,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,    -1,   344,   345,   346,    -1,   348,
      -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,   420,    -1,   422,   423,    -1,    -1,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,    -1,    -1,   476,    -1,    -1,
     479,   480,    -1,    -1,   483,    -1,    -1,   486,   487,    -1,
     489,   490,   491,   492,   493,    -1,    -1,   496,   497,   498,
     499,    -1,   501,   502,    -1,   504,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,    -1,    -1,   528,
     529,   530,   531,    -1,   533,   534,    -1,   536,   537,    -1,
     539,   540,    -1,    -1,   543,    -1,   545,    -1,   547,    -1,
     549,    -1,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
      -1,   560,    -1,    -1,   563,    -1,    -1,    -1,   567,   568,
     569,   570,    -1,    -1,    -1,    -1,   575,   576,    -1,   578,
     579,    -1,     5,   582,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    -1,    71,    72,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    -1,
      83,    84,    -1,    86,    -1,    -1,    89,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,
      -1,   104,    -1,    -1,    -1,    -1,   109,   110,    -1,    -1,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,   121,    -1,
     123,   124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,
     133,   134,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
      -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,   152,
     153,   154,   155,    -1,    -1,   158,   159,   160,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,    -1,   172,
      -1,    -1,    -1,   176,   177,   178,   179,    -1,   181,    -1,
     183,   184,   185,   186,   187,    -1,   189,    -1,    -1,    -1,
     193,   194,    -1,   196,    -1,    -1,   199,   200,    -1,    -1,
      -1,   204,   205,   206,   207,   208,    -1,    -1,   211,   212,
      -1,    -1,   215,   216,    -1,   218,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,   229,   230,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,
      -1,   244,    -1,    -1,   247,   248,    -1,    -1,    -1,    -1,
      -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,   289,   290,   291,    -1,
     293,   294,   295,    -1,    -1,    -1,   299,   300,   301,   302,
     303,    -1,    -1,   306,   307,    -1,   309,    -1,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
     323,   324,    -1,    -1,   327,   328,   329,   330,    -1,    -1,
      -1,   334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,
      -1,   344,   345,   346,    -1,   348,    -1,    -1,    -1,    -1,
      -1,    -1,   355,    -1,    -1,    -1,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,   420,    -1,   422,
     423,    -1,    -1,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,    -1,    -1,   476,    -1,    -1,   479,   480,    -1,    -1,
     483,    -1,    -1,   486,   487,    -1,   489,   490,   491,   492,
     493,    -1,    -1,   496,   497,   498,   499,    -1,   501,   502,
      -1,   504,    -1,   506,   507,   508,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
     523,   524,    -1,    -1,    -1,   528,   529,   530,   531,    -1,
     533,   534,    -1,   536,   537,    -1,   539,   540,    -1,    -1,
     543,    -1,   545,    -1,   547,    -1,   549,    -1,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,
     563,    -1,    -1,    -1,   567,   568,   569,   570,    -1,    -1,
      -1,    -1,   575,   576,    -1,   578,   579,    -1,     5,   582,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    -1,    71,    72,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    -1,    83,    84,    -1,    86,
      -1,    -1,    89,    -1,    -1,    92,    -1,    -1,    -1,    -1,
      -1,    -1,    99,   100,   101,    -1,    -1,   104,    -1,    -1,
      -1,    -1,   109,   110,    -1,    -1,    -1,   114,   115,    -1,
     117,    -1,    -1,    -1,   121,    -1,   123,   124,   125,   126,
      -1,    -1,    -1,   130,    -1,    -1,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,    -1,   144,   145,   146,
      -1,    -1,   149,    -1,   151,   152,   153,   154,   155,    -1,
      -1,   158,   159,   160,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,    -1,   172,    -1,    -1,    -1,   176,
     177,    -1,   179,    -1,   181,    -1,   183,   184,   185,   186,
     187,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,   196,
      -1,    -1,   199,   200,    -1,    -1,    -1,   204,   205,   206,
     207,   208,    -1,    -1,   211,   212,    -1,    -1,   215,   216,
      -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,    -1,   229,   230,    -1,   232,   233,    -1,    -1,    -1,
     237,    -1,    -1,   240,   241,    -1,    -1,   244,    -1,    -1,
     247,   248,    -1,    -1,    -1,    -1,    -1,   254,   255,    -1,
     257,    -1,   259,    -1,   261,   262,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,   288,   289,   290,   291,    -1,   293,   294,   295,    -1,
      -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,   306,
     307,    -1,   309,    -1,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,   323,   324,    -1,    -1,
     327,   328,   329,   330,    -1,    -1,    -1,   334,   335,    -1,
      -1,    -1,    -1,   340,   341,   342,    -1,   344,   345,   346,
      -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,
      -1,    -1,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,   420,    -1,   422,   423,    -1,    -1,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,    -1,    -1,   476,
      -1,    -1,   479,   480,    -1,    -1,   483,    -1,    -1,   486,
     487,    -1,   489,   490,   491,   492,   493,    -1,    -1,   496,
     497,   498,   499,    -1,   501,   502,    -1,   504,    -1,   506,
     507,   508,    -1,    -1,   511,   512,    -1,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,    -1,
      -1,   528,   529,   530,   531,    -1,   533,   534,    -1,   536,
     537,    -1,   539,   540,    -1,    -1,   543,    -1,   545,    -1,
     547,    -1,   549,    -1,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,    -1,   560,    -1,    -1,   563,    -1,    -1,    -1,
     567,   568,   569,   570,    -1,    -1,    -1,    -1,   575,   576,
      -1,   578,   579,    -1,     5,   582,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    -1,
      71,    72,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    -1,    83,    84,    -1,    86,    -1,    -1,    89,    -1,
      -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,
     101,    -1,    -1,   104,    -1,    -1,    -1,    -1,   109,   110,
      -1,    -1,    -1,   114,   115,    -1,   117,    -1,    -1,    -1,
     121,    -1,   123,   124,   125,   126,    -1,    -1,    -1,   130,
      -1,    -1,   133,   134,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,    -1,   144,   145,   146,    -1,    -1,   149,    -1,
     151,   152,   153,   154,   155,    -1,    -1,   158,   159,   160,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
      -1,   172,    -1,    -1,    -1,   176,   177,    -1,   179,    -1,
     181,    -1,   183,   184,   185,   186,   187,    -1,   189,    -1,
      -1,    -1,   193,   194,    -1,   196,    -1,    -1,   199,   200,
      -1,    -1,    -1,   204,   205,   206,   207,   208,    -1,    -1,
     211,   212,    -1,    -1,   215,   216,    -1,   218,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,   229,   230,
      -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,
     241,    -1,    -1,   244,    -1,    -1,   247,   248,    -1,    -1,
      -1,    -1,    -1,   254,   255,    -1,   257,    -1,   259,    -1,
     261,   262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,   288,   289,   290,
     291,    -1,   293,   294,   295,    -1,    -1,    -1,   299,   300,
     301,   302,   303,    -1,    -1,   306,   307,    -1,   309,    -1,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,   323,   324,    -1,    -1,   327,   328,   329,   330,
      -1,    -1,    -1,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,    -1,   344,   345,   346,    -1,   348,    -1,    -1,
      -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,   420,
      -1,   422,   423,    -1,    -1,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,    -1,    -1,   476,    -1,    -1,   479,   480,
      -1,    -1,   483,    -1,    -1,   486,   487,    -1,   489,   490,
     491,   492,   493,    -1,    -1,   496,   497,   498,   499,    -1,
     501,   502,    -1,   504,    -1,   506,   507,   508,    -1,    -1,
     511,   512,    -1,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,   523,   524,    -1,    -1,    -1,   528,   529,   530,
     531,    -1,   533,   534,    -1,   536,   537,    -1,   539,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,    -1,   549,    -1,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,    -1,   560,
      -1,    -1,   563,    -1,    -1,    -1,   567,   568,   569,   570,
      -1,    -1,    -1,    -1,   575,   576,    -1,   578,   579,    -1,
       5,   582,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    -1,    71,    72,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    -1,    83,    84,
      -1,    86,    -1,    -1,    89,    -1,    -1,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,   104,
      -1,    -1,    -1,    -1,   109,   110,    -1,    -1,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,   121,    -1,   123,   124,
     125,   126,    -1,    -1,    -1,   130,    -1,    -1,   133,   134,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,    -1,   144,
     145,   146,    -1,    -1,   149,    -1,   151,   152,   153,   154,
     155,    -1,    -1,   158,   159,   160,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,    -1,   172,    -1,    -1,
      -1,   176,   177,    -1,   179,    -1,   181,    -1,   183,   184,
     185,   186,   187,    -1,   189,    -1,    -1,    -1,   193,   194,
      -1,   196,    -1,    -1,   199,   200,    -1,    -1,    -1,   204,
     205,   206,   207,   208,    -1,    -1,   211,   212,    -1,    -1,
     215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,    -1,   229,   230,    -1,   232,   233,    -1,
      -1,    -1,   237,    -1,    -1,   240,   241,    -1,    -1,   244,
      -1,    -1,   247,   248,    -1,    -1,    -1,    -1,    -1,   254,
     255,    -1,   257,    -1,   259,    -1,   261,   262,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,   288,   289,   290,   291,    -1,   293,   294,
     295,    -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,
      -1,   306,   307,    -1,   309,    -1,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,   323,   324,
      -1,    -1,   327,   328,   329,   330,    -1,    -1,    -1,   334,
     335,    -1,    -1,    -1,    -1,   340,   341,   342,    -1,   344,
     345,   346,    -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,
     355,    -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,   420,    -1,   422,   423,    -1,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,    -1,
      -1,   476,    -1,    -1,   479,   480,    -1,    -1,   483,    -1,
      -1,   486,   487,    -1,   489,   490,   491,   492,   493,    -1,
      -1,   496,   497,   498,   499,    -1,   501,   502,    -1,   504,
      -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,    -1,    -1,   528,   529,   530,   531,    -1,   533,   534,
      -1,   536,   537,    -1,   539,   540,    -1,    -1,   543,    -1,
     545,    -1,   547,    -1,   549,    -1,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,   563,    -1,
      -1,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
     575,   576,    -1,   578,   579,    -1,     5,   582,     7,     8,
       9,    10,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    -1,    71,    72,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    -1,    83,    84,    -1,    86,    -1,    -1,
      89,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,
      99,   100,   101,    -1,    -1,   104,    -1,    -1,    -1,    -1,
     109,   110,    -1,    -1,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,   130,    -1,    -1,   133,   134,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,    -1,   144,   145,   146,    -1,    -1,
     149,    -1,   151,   152,   153,   154,   155,    -1,    -1,   158,
     159,   160,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,    -1,   172,    -1,    -1,    -1,   176,   177,    -1,
     179,    -1,   181,    -1,   183,   184,   185,   186,   187,    -1,
     189,    -1,    -1,    -1,   193,   194,    -1,   196,    -1,    -1,
     199,   200,    -1,    -1,    -1,   204,   205,   206,   207,   208,
      -1,    -1,   211,   212,    -1,    -1,   215,   216,    -1,   218,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,    -1,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,
      -1,   240,   241,    -1,    -1,   244,    -1,    -1,   247,   248,
      -1,    -1,    -1,    -1,    -1,   254,   255,    -1,   257,    -1,
     259,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,   288,
     289,   290,   291,    -1,   293,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,    -1,
     309,    -1,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,    -1,    -1,   327,   328,
     329,   330,    -1,    -1,    -1,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,    -1,   344,   345,   346,    -1,   348,
      -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,    -1,   377,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,   418,
     419,   420,    -1,   422,   423,    -1,    -1,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,    -1,    -1,   443,   444,   445,   446,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,    -1,    -1,   476,    -1,    -1,
     479,   480,    -1,    -1,   483,    -1,    -1,   486,   487,    -1,
     489,   490,   491,   492,   493,    -1,    -1,   496,   497,   498,
     499,    -1,   501,   502,    -1,   504,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,    -1,    -1,   528,
     529,   530,   531,    -1,   533,   534,    -1,   536,   537,    -1,
     539,   540,    -1,    -1,   543,    -1,   545,    -1,   547,    -1,
     549,    -1,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
      -1,   560,    -1,    -1,   563,    -1,    -1,    -1,   567,   568,
     569,   570,    -1,    -1,    -1,    -1,   575,   576,    -1,   578,
     579,    -1,     5,   582,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    -1,    71,    72,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    -1,
      83,    84,    -1,    86,    -1,    -1,    89,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,
      -1,   104,    -1,    -1,    -1,    -1,   109,   110,    -1,    -1,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,   121,    -1,
     123,   124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,
     133,   134,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
      -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,   152,
     153,   154,   155,    -1,    -1,   158,   159,   160,    -1,   162,
      -1,   164,   165,    -1,   167,   168,   169,    -1,    -1,   172,
      -1,    -1,    -1,   176,   177,    -1,   179,    -1,   181,    -1,
     183,   184,   185,   186,   187,    -1,   189,    -1,    -1,    -1,
     193,   194,    -1,   196,    -1,    -1,   199,   200,    -1,    -1,
      -1,   204,   205,   206,   207,   208,    -1,    -1,   211,   212,
      -1,    -1,   215,   216,    -1,   218,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,   229,   230,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,   240,   241,    -1,
      -1,   244,    -1,    -1,   247,   248,    -1,    -1,    -1,    -1,
      -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,   262,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,   289,   290,   291,    -1,
     293,   294,   295,    -1,    -1,    -1,   299,   300,   301,   302,
     303,    -1,    -1,   306,   307,    -1,   309,    -1,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
     323,   324,    -1,    -1,   327,   328,   329,   330,    -1,    -1,
      -1,   334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,
      -1,   344,   345,   346,    -1,   348,    -1,    -1,    -1,    -1,
      -1,    -1,   355,    -1,    -1,    -1,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,    -1,    -1,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,   418,   419,   420,    -1,   422,
     423,    -1,    -1,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,    -1,    -1,
     443,   444,   445,   446,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,    -1,    -1,   476,    -1,    -1,   479,   480,    -1,    -1,
     483,    -1,    -1,   486,   487,    -1,   489,   490,   491,   492,
     493,    -1,    -1,   496,   497,   498,   499,    -1,   501,   502,
      -1,   504,    -1,   506,   507,   508,    -1,   510,   511,   512,
      -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
     523,   524,    -1,    -1,    -1,   528,   529,   530,   531,    -1,
     533,   534,    -1,   536,   537,    -1,   539,   540,    -1,    -1,
     543,    -1,   545,    -1,   547,    -1,   549,    -1,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,
     563,    -1,    -1,    -1,   567,   568,   569,   570,    -1,    -1,
      -1,    -1,   575,   576,    -1,   578,   579,    -1,     5,   582,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    -1,    71,    72,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    -1,    83,    84,    -1,    86,
      -1,    -1,    89,    -1,    -1,    92,    -1,    -1,    -1,    -1,
      -1,    -1,    99,   100,   101,    -1,    -1,   104,    -1,    -1,
      -1,    -1,   109,   110,    -1,    -1,    -1,   114,   115,    -1,
     117,    -1,    -1,    -1,   121,    -1,   123,   124,   125,   126,
      -1,    -1,    -1,   130,    -1,    -1,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,    -1,   144,   145,   146,
      -1,    -1,   149,    -1,   151,   152,   153,   154,   155,    -1,
      -1,   158,   159,   160,    -1,   162,    -1,   164,   165,    -1,
     167,   168,   169,    -1,    -1,   172,    -1,    -1,    -1,   176,
     177,    -1,   179,    -1,   181,    -1,   183,   184,   185,   186,
     187,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,   196,
      -1,    -1,   199,   200,    -1,    -1,    -1,   204,   205,   206,
     207,   208,    -1,    -1,   211,   212,    -1,    -1,   215,   216,
      -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,    -1,   229,   230,    -1,   232,   233,    -1,    -1,    -1,
     237,    -1,    -1,   240,   241,    -1,    -1,   244,    -1,    -1,
     247,   248,    -1,    -1,    -1,    -1,    -1,   254,   255,    -1,
     257,    -1,   259,    -1,   261,   262,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,   288,   289,   290,   291,    -1,   293,   294,   295,    -1,
      -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,   306,
     307,    -1,   309,    -1,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,   323,   324,    -1,    -1,
     327,   328,   329,   330,    -1,    -1,    -1,   334,   335,    -1,
      -1,    -1,    -1,   340,   341,   342,    -1,   344,   345,   346,
      -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,
      -1,    -1,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,    -1,    -1,
     377,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,   418,   419,   420,    -1,   422,   423,    -1,    -1,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,    -1,    -1,   443,   444,   445,   446,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,    -1,    -1,   476,
      -1,    -1,   479,   480,    -1,    -1,   483,    -1,    -1,   486,
     487,    -1,   489,   490,   491,   492,   493,    -1,    -1,   496,
     497,   498,   499,    -1,   501,   502,    -1,   504,    -1,   506,
     507,   508,    -1,    -1,   511,   512,    -1,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,    -1,
      -1,   528,   529,   530,   531,    -1,   533,   534,    -1,   536,
     537,    -1,   539,   540,    -1,    -1,   543,    -1,   545,    -1,
     547,    -1,   549,    -1,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,    -1,   560,    -1,    -1,   563,    -1,    -1,    -1,
     567,   568,   569,   570,    -1,    -1,    -1,    -1,   575,   576,
      -1,   578,   579,    -1,     5,   582,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    -1,
      71,    72,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    -1,    83,    84,    -1,    86,    -1,    -1,    89,    -1,
      -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,
     101,    -1,    -1,   104,    -1,    -1,    -1,    -1,   109,   110,
      -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
     121,    -1,   123,   124,   125,   126,    -1,    -1,    -1,   130,
      -1,    -1,   133,   134,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,    -1,   144,   145,   146,    -1,    -1,   149,    -1,
     151,   152,   153,   154,   155,    -1,    -1,   158,   159,   160,
      -1,   162,    -1,   164,   165,    -1,   167,   168,   169,    -1,
      -1,   172,    -1,    -1,    -1,   176,   177,    -1,   179,    -1,
     181,    -1,   183,   184,   185,   186,   187,    -1,   189,    -1,
      -1,    -1,   193,   194,    -1,   196,    -1,    -1,   199,   200,
      -1,    -1,    -1,   204,   205,   206,   207,   208,    -1,    -1,
     211,   212,    -1,    -1,   215,   216,    -1,   218,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,   229,   230,
      -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,   240,
     241,    -1,    -1,   244,    -1,    -1,   247,   248,    -1,    -1,
      -1,    -1,    -1,   254,   255,    -1,   257,    -1,   259,    -1,
     261,   262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,   288,   289,   290,
     291,    -1,   293,   294,   295,    -1,    -1,    -1,   299,   300,
     301,   302,   303,    -1,    -1,   306,   307,    -1,   309,    -1,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,   323,   324,    -1,    -1,   327,   328,   329,   330,
      -1,    -1,    -1,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,    -1,   344,   345,   346,    -1,   348,    -1,    -1,
      -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,    -1,   377,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,   418,   419,   420,
      -1,   422,   423,    -1,    -1,    -1,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
      -1,    -1,   443,   444,   445,   446,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,    -1,    -1,   476,    -1,    -1,   479,   480,
      -1,    -1,   483,    -1,    -1,   486,   487,    -1,   489,   490,
     491,   492,   493,    -1,    -1,   496,   497,   498,   499,    -1,
     501,   502,    -1,   504,    -1,   506,   507,   508,    -1,    -1,
     511,   512,    -1,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,   523,   524,    -1,    -1,    -1,   528,   529,   530,
     531,    -1,   533,   534,    -1,   536,   537,    -1,   539,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,    -1,   549,    -1,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,    -1,   560,
      -1,    -1,   563,    -1,    -1,    -1,   567,   568,   569,   570,
      -1,    -1,    -1,    -1,   575,   576,    -1,   578,   579,    -1,
       5,   582,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    -1,    71,    72,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    -1,    83,    84,
      -1,    86,    -1,    -1,    89,    -1,    -1,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,   104,
      -1,    -1,    -1,    -1,   109,   110,    -1,    -1,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,   121,    -1,   123,   124,
     125,   126,    -1,    -1,    -1,   130,    -1,    -1,   133,   134,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,    -1,   144,
     145,   146,    -1,    -1,   149,    -1,   151,   152,   153,   154,
     155,    -1,    -1,   158,   159,   160,    -1,   162,    -1,   164,
     165,    -1,   167,   168,   169,    -1,    -1,   172,    -1,    -1,
      -1,   176,   177,    -1,   179,    -1,   181,    -1,   183,   184,
     185,   186,   187,    -1,   189,    -1,    -1,    -1,   193,   194,
      -1,   196,    -1,    -1,   199,   200,    -1,    -1,    -1,   204,
     205,   206,   207,   208,    -1,    -1,   211,   212,    -1,    -1,
     215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,    -1,   229,   230,    -1,   232,   233,    -1,
      -1,    -1,   237,    -1,    -1,   240,   241,    -1,    -1,   244,
      -1,    -1,   247,   248,    -1,    -1,    -1,    -1,    -1,   254,
     255,    -1,   257,    -1,   259,    -1,   261,   262,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,   288,   289,   290,   291,    -1,   293,   294,
     295,    -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,
      -1,   306,   307,    -1,   309,    -1,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,   323,   324,
      -1,    -1,   327,   328,   329,   330,    -1,    -1,    -1,   334,
     335,    -1,    -1,    -1,    -1,   340,   341,   342,    -1,   344,
     345,   346,    -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,
     355,    -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,   418,   419,   420,    -1,   422,   423,    -1,
      -1,    -1,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,    -1,    -1,   443,   444,
     445,   446,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,    -1,
      -1,   476,    -1,    -1,   479,   480,    -1,    -1,   483,    -1,
      -1,   486,   487,    -1,   489,   490,   491,   492,   493,    -1,
      -1,   496,   497,   498,   499,    -1,   501,   502,    -1,   504,
      -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,    -1,    -1,   528,   529,   530,   531,    -1,   533,   534,
      -1,   536,   537,    -1,   539,   540,    -1,    -1,   543,    -1,
     545,    -1,   547,    -1,   549,    -1,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,   563,    -1,
      -1,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
     575,   576,    -1,   578,   579,    -1,     5,   582,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    -1,    -1,    72,    -1,    74,    75,    76,    77,    -1,
      79,    -1,    81,    -1,    -1,    84,    -1,    86,    -1,    -1,
      89,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,
      99,   100,   101,    -1,    -1,   104,    -1,    -1,    -1,    -1,
     109,    -1,    -1,    -1,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,
     139,    -1,   141,   142,    -1,   144,   145,   146,    -1,    -1,
     149,    -1,   151,   152,   153,   154,    -1,    -1,    -1,   158,
     159,   160,    -1,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,    -1,    -1,    -1,    -1,   176,   177,    -1,
     179,    -1,   181,    -1,   183,   184,   185,   186,    -1,    -1,
     189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,   204,   205,   206,   207,   208,
     209,    -1,   211,   212,    -1,    -1,   215,   216,    -1,   218,
      -1,    -1,    -1,   222,    -1,    -1,    -1,    -1,   227,    -1,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,
      -1,    -1,   241,    -1,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,    -1,    -1,   254,   255,    -1,   257,    -1,
     259,    -1,   261,   262,    -1,    -1,    -1,    -1,   267,    -1,
      -1,    -1,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,   288,
     289,   290,   291,    -1,   293,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,    -1,
     309,    -1,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,    -1,    -1,   327,   328,
     329,   330,    -1,    -1,    -1,    -1,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,    -1,   344,   345,   346,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   360,   361,    -1,    -1,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,    -1,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
      -1,    -1,   411,    -1,   413,   414,    -1,   416,    -1,    -1,
     419,    -1,    -1,   422,   423,   424,    -1,    -1,    -1,    -1,
     429,   430,   431,   432,   433,   434,    -1,   436,    -1,   438,
      -1,    -1,    -1,    -1,   443,   444,   445,    -1,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,    -1,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,    -1,    -1,   476,    -1,    -1,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,   493,    -1,    -1,   496,   497,   498,
     499,    -1,   501,   502,    -1,   504,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,    -1,    -1,    -1,
     529,   530,   531,    -1,   533,   534,    -1,   536,   537,    -1,
      -1,    -1,    -1,    -1,   543,    -1,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
      -1,   560,    -1,    -1,   563,    -1,    -1,    -1,   567,   568,
     569,   570,    -1,    -1,   573,    -1,   575,    -1,    -1,   578,
      -1,    -1,     5,   582,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    -1,    -1,    72,
      -1,    74,    75,    76,    77,    -1,    79,    -1,    81,    -1,
      -1,    84,    -1,    86,    -1,    -1,    89,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,
      -1,   104,    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,   121,    -1,
     123,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
     133,   134,   135,    -1,   137,    -1,   139,    -1,   141,   142,
      -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,   152,
     153,   154,    -1,    -1,    -1,   158,   159,   160,    -1,   162,
      -1,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
      -1,    -1,    -1,   176,   177,    -1,   179,    -1,   181,    -1,
     183,   184,   185,   186,    -1,    -1,   189,    -1,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,
      -1,   204,   205,   206,   207,   208,   209,    -1,   211,   212,
      -1,    -1,   215,   216,    -1,   218,    -1,    -1,    -1,   222,
      -1,    -1,    -1,    -1,   227,    -1,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,    -1,    -1,    -1,   241,    -1,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,    -1,
      -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,   262,
      -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,   289,   290,   291,    -1,
     293,   294,   295,    -1,    -1,    -1,   299,   300,   301,   302,
     303,    -1,    -1,   306,   307,    -1,   309,    -1,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
     323,   324,    -1,    -1,   327,   328,   329,   330,    -1,    -1,
      -1,    -1,   335,    -1,    -1,    -1,    -1,   340,   341,   342,
      -1,   344,   345,   346,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361,    -1,
      -1,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,    -1,    -1,    -1,    -1,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,    -1,    -1,   411,    -1,
     413,   414,    -1,   416,    -1,    -1,   419,    -1,    -1,   422,
     423,   424,    -1,    -1,    -1,    -1,   429,   430,   431,   432,
     433,   434,    -1,   436,    -1,   438,    -1,    -1,    -1,    -1,
     443,   444,   445,    -1,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,    -1,   456,    -1,    -1,   459,    -1,    -1,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,    -1,    -1,   476,    -1,    -1,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
     493,    -1,    -1,   496,   497,   498,   499,    -1,   501,   502,
      -1,   504,    -1,   506,   507,   508,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
     523,   524,    -1,    -1,    -1,    -1,   529,   530,   531,    -1,
     533,   534,    -1,   536,   537,    -1,    -1,    -1,    -1,    -1,
     543,    -1,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,
     563,    -1,    -1,    -1,   567,   568,   569,   570,   571,    -1,
     573,    -1,   575,    -1,    -1,   578,    -1,    -1,     5,   582,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    -1,    -1,    72,    -1,    74,    75,    76,
      77,    -1,    79,    -1,    81,    -1,    -1,    84,    -1,    86,
      -1,    -1,    89,    -1,    -1,    92,    -1,    -1,    -1,    -1,
      -1,    -1,    99,   100,   101,    -1,    -1,   104,    -1,    -1,
      -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,   115,    -1,
     117,    -1,    -1,    -1,   121,    -1,   123,   124,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,   135,    -1,
     137,    -1,   139,    -1,   141,   142,    -1,   144,   145,   146,
      -1,    -1,   149,    -1,   151,   152,   153,   154,    -1,    -1,
      -1,   158,   159,   160,    -1,   162,    -1,   164,   165,   166,
     167,   168,   169,    -1,    -1,    -1,    -1,    -1,    -1,   176,
     177,    -1,   179,    -1,   181,    -1,   183,   184,   185,   186,
      -1,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,    -1,   200,    -1,    -1,    -1,   204,   205,   206,
     207,   208,   209,    -1,   211,   212,    -1,    -1,   215,   216,
      -1,   218,    -1,    -1,    -1,   222,    -1,    -1,    -1,    -1,
     227,    -1,   229,   230,    -1,   232,   233,   234,    -1,    -1,
     237,    -1,    -1,    -1,   241,    -1,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,    -1,    -1,   254,   255,    -1,
     257,    -1,   259,    -1,   261,   262,    -1,    -1,    -1,    -1,
     267,    -1,    -1,    -1,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,   288,   289,   290,   291,    -1,   293,   294,   295,    -1,
      -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,   306,
     307,    -1,   309,    -1,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,   323,   324,    -1,    -1,
     327,   328,   329,   330,    -1,    -1,    -1,    -1,   335,    -1,
      -1,    -1,    -1,   340,   341,   342,    -1,   344,   345,   346,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   360,   361,    -1,    -1,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,    -1,    -1,    -1,
      -1,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,    -1,   411,    -1,   413,   414,    -1,   416,
      -1,    -1,   419,    -1,    -1,   422,   423,   424,    -1,    -1,
      -1,    -1,   429,   430,   431,   432,   433,   434,    -1,   436,
      -1,   438,    -1,    -1,    -1,    -1,   443,   444,   445,    -1,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,    -1,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,    -1,    -1,   476,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,   489,   490,   491,   492,   493,    -1,    -1,   496,
     497,   498,   499,    -1,   501,   502,    -1,   504,    -1,   506,
     507,   508,    -1,    -1,   511,   512,    -1,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,    -1,
      -1,    -1,   529,   530,   531,    -1,   533,   534,    -1,   536,
     537,    -1,    -1,    -1,    -1,    -1,   543,    -1,    -1,    -1,
     547,    -1,    -1,    -1,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,    -1,   560,    -1,    -1,   563,    -1,    -1,    -1,
     567,   568,   569,   570,   571,    -1,   573,    -1,   575,    -1,
      -1,   578,    -1,    -1,     5,   582,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    52,    53,    -1,    55,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    -1,
      -1,    72,    -1,    74,    75,    76,    77,    -1,    79,    -1,
      81,    -1,    -1,    84,    -1,    86,    -1,    -1,    89,    -1,
      -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,
     101,    -1,    -1,   104,    -1,    -1,    -1,    -1,   109,    -1,
      -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
     121,    -1,   123,   124,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,   133,   134,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,    -1,   144,   145,   146,    -1,    -1,   149,    -1,
     151,   152,   153,   154,    -1,    -1,    -1,   158,   159,   160,
      -1,   162,    -1,   164,   165,   166,   167,   168,   169,    -1,
      -1,    -1,    -1,    -1,    -1,   176,   177,    -1,   179,    -1,
     181,    -1,   183,   184,   185,   186,    -1,    -1,   189,    -1,
      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,   200,
      -1,    -1,    -1,   204,   205,   206,   207,   208,   209,    -1,
     211,   212,    -1,    -1,   215,   216,    -1,   218,    -1,    -1,
      -1,   222,    -1,    -1,    -1,    -1,   227,    -1,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,    -1,    -1,    -1,
     241,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,    -1,    -1,   254,   255,    -1,   257,    -1,   259,    -1,
     261,   262,    -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,   288,   289,   290,
     291,    -1,   293,   294,   295,    -1,    -1,    -1,   299,   300,
     301,   302,   303,    -1,    -1,   306,   307,    -1,   309,    -1,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,   323,   324,    -1,    -1,   327,   328,   329,   330,
      -1,    -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,    -1,   344,   345,   346,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
     361,    -1,    -1,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,    -1,    -1,    -1,    -1,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,    -1,
     411,    -1,   413,   414,    -1,   416,    -1,    -1,   419,    -1,
      -1,   422,   423,   424,    -1,    -1,    -1,    -1,   429,   430,
     431,   432,   433,   434,    -1,   436,    -1,   438,    -1,    -1,
      -1,    -1,   443,   444,   445,    -1,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,    -1,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,    -1,    -1,   476,    -1,    -1,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,   493,    -1,    -1,   496,   497,   498,   499,    -1,
     501,   502,    -1,   504,    -1,   506,   507,   508,    -1,    -1,
     511,   512,    -1,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,   523,   524,    -1,    -1,    -1,    -1,   529,   530,
     531,    -1,   533,   534,    -1,   536,   537,    -1,    -1,    -1,
      -1,    -1,   543,    -1,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,    -1,   560,
      -1,    -1,   563,    -1,    -1,    -1,   567,   568,   569,   570,
      -1,    -1,   573,    -1,   575,    -1,    -1,   578,    -1,    -1,
       5,   582,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,
      55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    -1,    -1,    72,    -1,    74,
      75,    76,    77,    -1,    79,    -1,    81,    -1,    -1,    84,
      -1,    86,    -1,    -1,    89,    -1,    -1,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,   104,
      -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,   121,    -1,   123,   124,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   134,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,    -1,   144,
     145,   146,    -1,    -1,   149,    -1,   151,   152,   153,   154,
      -1,    -1,    -1,   158,   159,   160,    -1,   162,    -1,   164,
     165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
      -1,   176,   177,    -1,   179,    -1,   181,    -1,   183,   184,
     185,   186,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,
      -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,
     205,   206,   207,   208,   209,    -1,   211,   212,    -1,    -1,
     215,   216,    -1,   218,    -1,    -1,    -1,   222,    -1,    -1,
      -1,    -1,   227,    -1,   229,   230,    -1,   232,   233,   234,
      -1,    -1,   237,    -1,    -1,    -1,   241,    -1,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,    -1,    -1,   254,
     255,    -1,   257,    -1,   259,    -1,   261,   262,    -1,    -1,
      -1,    -1,   267,    -1,    -1,    -1,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,   288,   289,   290,   291,    -1,   293,   294,
     295,    -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,
      -1,   306,   307,    -1,   309,    -1,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,   323,   324,
      -1,    -1,   327,   328,   329,   330,    -1,    -1,    -1,    -1,
     335,    -1,    -1,    -1,    -1,   340,   341,   342,    -1,   344,
     345,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   360,   361,    -1,    -1,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,    -1,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,    -1,    -1,   411,    -1,   413,   414,
      -1,   416,    -1,    -1,   419,    -1,    -1,   422,   423,   424,
      -1,    -1,    -1,    -1,   429,   430,   431,   432,   433,   434,
      -1,   436,    -1,   438,    -1,    -1,    -1,    -1,   443,   444,
     445,    -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
      -1,   456,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,    -1,
      -1,   476,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,   493,    -1,
      -1,   496,   497,   498,   499,    -1,   501,   502,    -1,   504,
      -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,    -1,    -1,    -1,   529,   530,   531,    -1,   533,   534,
      -1,   536,   537,    -1,    -1,    -1,    -1,    -1,   543,    -1,
      -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,   563,    -1,
      -1,    -1,   567,   568,   569,   570,    -1,    -1,   573,    -1,
     575,    -1,    -1,   578,    -1,    -1,     5,   582,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
      69,    -1,    -1,    72,    -1,    74,    75,    76,    77,    -1,
      79,    -1,    81,    -1,    -1,    84,    -1,    86,    -1,    -1,
      89,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,
      99,   100,   101,    -1,    -1,   104,    -1,    -1,    -1,    -1,
     109,    -1,    -1,    -1,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,   133,   134,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,    -1,   144,   145,   146,    -1,    -1,
     149,    -1,   151,   152,   153,   154,    -1,    -1,    -1,   158,
     159,   160,    -1,   162,    -1,   164,   165,   166,   167,   168,
     169,    -1,    -1,    -1,    -1,    -1,    -1,   176,   177,    -1,
     179,    -1,   181,    -1,   183,   184,   185,   186,    -1,    -1,
     189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,   204,   205,   206,   207,   208,
     209,    -1,   211,   212,    -1,    -1,   215,   216,    -1,   218,
      -1,    -1,    -1,   222,    -1,    -1,    -1,    -1,   227,    -1,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,
      -1,    -1,   241,    -1,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,    -1,    -1,   254,   255,    -1,   257,    -1,
     259,    -1,   261,   262,    -1,    -1,    -1,    -1,   267,    -1,
      -1,    -1,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,   288,
     289,   290,   291,    -1,   293,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,    -1,
     309,    -1,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,    -1,    -1,   327,   328,
     329,   330,    -1,    -1,    -1,    -1,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,    -1,   344,   345,   346,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   360,   361,    -1,    -1,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,    -1,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
      -1,    -1,   411,    -1,   413,   414,    -1,   416,    -1,    -1,
     419,    -1,    -1,   422,   423,   424,    -1,    -1,    -1,    -1,
     429,   430,   431,   432,   433,   434,    -1,   436,    -1,   438,
      -1,    -1,    -1,    -1,   443,   444,   445,    -1,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,    -1,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,    -1,    -1,   476,    -1,    -1,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,   493,    -1,    -1,   496,   497,   498,
     499,    -1,   501,   502,    -1,   504,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,    -1,    -1,    -1,
     529,   530,   531,    -1,   533,   534,    -1,   536,   537,    -1,
      -1,    -1,    -1,    -1,   543,    -1,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
      -1,   560,    -1,    -1,   563,    -1,    -1,    -1,   567,   568,
     569,   570,    -1,    -1,   573,    -1,   575,    -1,    -1,   578,
      -1,    -1,     5,   582,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,
      63,    64,    65,    66,    -1,    68,    69,    -1,    -1,    72,
      -1,    74,    75,    76,    77,    -1,    79,    -1,    81,    -1,
      -1,    84,    -1,    86,    -1,    -1,    89,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,
      -1,   104,    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,   121,    -1,
     123,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
     133,   134,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
      -1,   144,   145,   146,    -1,    -1,   149,    -1,   151,   152,
     153,   154,    -1,    -1,    -1,   158,   159,   160,    -1,   162,
      -1,   164,   165,   166,   167,   168,   169,    -1,    -1,    -1,
      -1,    -1,    -1,   176,   177,    -1,   179,    -1,   181,    -1,
     183,   184,   185,   186,    -1,    -1,   189,    -1,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,
      -1,   204,   205,   206,   207,   208,   209,    -1,   211,   212,
      -1,    -1,   215,   216,    -1,   218,    -1,    -1,    -1,   222,
      -1,    -1,    -1,    -1,   227,    -1,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,    -1,    -1,    -1,   241,    -1,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,    -1,
      -1,   254,   255,    -1,   257,    -1,   259,    -1,   261,   262,
      -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,   289,   290,   291,    -1,
     293,   294,   295,    -1,    -1,    -1,   299,   300,   301,   302,
     303,    -1,    -1,   306,   307,    -1,   309,    -1,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
     323,   324,    -1,    -1,   327,   328,   329,   330,    -1,    -1,
      -1,    -1,   335,    -1,    -1,    -1,    -1,   340,   341,   342,
      -1,   344,   345,   346,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361,    -1,
      -1,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,    -1,    -1,    -1,    -1,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,    -1,    -1,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,    -1,    -1,   411,    -1,
     413,   414,    -1,   416,    -1,    -1,   419,    -1,    -1,   422,
     423,   424,    -1,    -1,    -1,    -1,   429,   430,   431,   432,
     433,   434,    -1,   436,    -1,   438,    -1,    -1,    -1,    -1,
     443,   444,   445,    -1,    -1,    -1,    -1,   450,    -1,    -1,
      -1,   454,    -1,   456,    -1,    -1,   459,    -1,    -1,   462,
     463,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
     473,    -1,    -1,   476,    -1,    -1,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
     493,    -1,    -1,   496,   497,   498,   499,    -1,   501,   502,
      -1,   504,    -1,   506,   507,   508,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
     523,   524,    -1,    -1,    -1,    -1,   529,   530,   531,    -1,
     533,   534,    -1,   536,   537,    -1,    -1,    -1,    -1,    -1,
     543,    -1,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,
     563,    -1,    -1,    -1,   567,   568,   569,   570,    -1,    -1,
     573,    -1,   575,    -1,    -1,   578,    -1,    -1,     5,   582,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,
      -1,    68,    69,    -1,    -1,    72,    -1,    74,    75,    76,
      77,    -1,    79,    -1,    81,    -1,    -1,    84,    -1,    86,
      -1,    -1,    89,    -1,    -1,    92,    -1,    -1,    -1,    -1,
      -1,    -1,    99,   100,   101,    -1,    -1,   104,    -1,    -1,
      -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,   115,    -1,
     117,    -1,    -1,    -1,   121,    -1,   123,   124,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,    -1,   144,   145,   146,
      -1,    -1,   149,    -1,   151,   152,   153,   154,    -1,    -1,
      -1,   158,   159,   160,    -1,   162,    -1,   164,   165,   166,
     167,   168,   169,    -1,    -1,    -1,    -1,    -1,    -1,   176,
     177,    -1,   179,    -1,   181,    -1,   183,   184,   185,   186,
      -1,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,    -1,   200,    -1,    -1,    -1,   204,   205,   206,
     207,   208,   209,    -1,   211,   212,    -1,    -1,   215,   216,
      -1,   218,    -1,    -1,    -1,   222,    -1,    -1,    -1,    -1,
     227,    -1,   229,   230,    -1,   232,   233,   234,    -1,    -1,
     237,    -1,    -1,    -1,   241,    -1,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,    -1,    -1,   254,   255,    -1,
     257,    -1,   259,    -1,   261,   262,    -1,    -1,    -1,    -1,
     267,    -1,    -1,    -1,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,   288,   289,   290,   291,    -1,   293,   294,   295,    -1,
      -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,   306,
     307,    -1,   309,    -1,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,   323,   324,    -1,    -1,
     327,   328,   329,   330,    -1,    -1,    -1,    -1,   335,    -1,
      -1,    -1,    -1,   340,   341,   342,    -1,   344,   345,   346,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   360,   361,    -1,    -1,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,    -1,    -1,    -1,
      -1,   378,   379,    -1,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,    -1,    -1,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,    -1,   411,    -1,   413,   414,    -1,   416,
      -1,    -1,   419,    -1,    -1,   422,   423,   424,    -1,    -1,
      -1,    -1,   429,   430,   431,   432,   433,   434,    -1,   436,
      -1,   438,    -1,    -1,    -1,    -1,   443,   444,   445,    -1,
      -1,    -1,    -1,   450,    -1,    -1,    -1,   454,    -1,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,    -1,    -1,    -1,
      -1,    -1,    -1,   470,   471,    -1,   473,    -1,    -1,   476,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,   489,   490,   491,   492,   493,    -1,    -1,   496,
     497,   498,   499,    -1,   501,   502,    -1,   504,    -1,   506,
     507,   508,    -1,    -1,   511,   512,    -1,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,    -1,
      -1,    -1,   529,   530,   531,    -1,   533,   534,    -1,   536,
     537,    -1,    -1,    -1,    -1,    -1,   543,    -1,    -1,    -1,
     547,    -1,    -1,    -1,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,    -1,   560,    -1,    -1,   563,    -1,    -1,    -1,
     567,   568,   569,   570,    -1,    -1,   573,    -1,   575,    -1,
      -1,   578,    -1,    -1,     5,   582,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    52,    53,    -1,    55,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    64,    65,    66,    -1,    68,    69,    -1,
      -1,    72,    -1,    74,    75,    76,    77,    -1,    79,    -1,
      81,    -1,    -1,    84,    -1,    86,    -1,    -1,    89,    -1,
      -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,
     101,    -1,    -1,   104,    -1,    -1,    -1,    -1,   109,    -1,
      -1,    -1,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
     121,    -1,   123,   124,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,   133,   134,   135,    -1,    -1,    -1,   139,    -1,
      -1,   142,    -1,   144,   145,   146,    -1,    -1,   149,    -1,
     151,   152,   153,   154,    -1,    -1,    -1,   158,   159,   160,
      -1,   162,    -1,   164,   165,   166,   167,   168,   169,    -1,
      -1,    -1,    -1,    -1,    -1,   176,   177,    -1,   179,    -1,
     181,    -1,   183,   184,   185,   186,    -1,    -1,   189,    -1,
      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,   200,
      -1,    -1,    -1,   204,   205,   206,   207,   208,   209,    -1,
     211,   212,    -1,    -1,   215,   216,    -1,   218,    -1,    -1,
      -1,   222,    -1,    -1,    -1,    -1,   227,    -1,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,    -1,    -1,    -1,
     241,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,    -1,    -1,   254,   255,    -1,   257,    -1,   259,    -1,
     261,   262,    -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,   288,   289,   290,
     291,    -1,   293,   294,   295,    -1,    -1,    -1,   299,   300,
     301,   302,   303,    -1,    -1,   306,   307,    -1,   309,    -1,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,   323,   324,    -1,    -1,   327,   328,   329,   330,
      -1,    -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,    -1,   344,   345,   346,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
     361,    -1,    -1,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,    -1,    -1,    -1,    -1,   378,   379,    -1,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,    -1,    -1,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,    -1,
     411,    -1,   413,   414,    -1,   416,    -1,    -1,   419,    -1,
      -1,   422,   423,   424,    -1,    -1,    -1,    -1,   429,   430,
     431,   432,   433,   434,    -1,   436,    -1,   438,    -1,    -1,
      -1,    -1,   443,   444,   445,    -1,    -1,    -1,    -1,   450,
      -1,    -1,    -1,   454,    -1,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,    -1,    -1,    -1,    -1,    -1,    -1,   470,
     471,    -1,   473,    -1,    -1,   476,    -1,    -1,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,   493,    -1,    -1,   496,   497,   498,   499,    -1,
     501,   502,    -1,   504,    -1,   506,   507,   508,    -1,    -1,
     511,   512,    -1,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,   523,   524,    -1,    -1,    -1,    -1,   529,   530,
     531,    -1,   533,   534,    -1,   536,   537,    -1,    -1,    -1,
      -1,    -1,   543,    -1,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,    -1,   560,
      -1,    -1,   563,    -1,    -1,    -1,   567,   568,   569,   570,
      -1,    -1,   573,    -1,   575,    -1,    -1,   578,    -1,    -1,
       5,   582,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,
      55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,
      65,    66,    -1,    68,    69,    -1,    -1,    72,    -1,    74,
      75,    76,    77,    -1,    79,    -1,    81,    -1,    -1,    84,
      -1,    86,    -1,    -1,    89,    -1,    -1,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    99,   100,   101,    -1,    -1,   104,
      -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,   121,    -1,   123,   124,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   134,
     135,    -1,    -1,    -1,   139,    -1,    -1,   142,    -1,   144,
     145,   146,    -1,    -1,   149,    -1,   151,   152,   153,   154,
      -1,    -1,    -1,   158,   159,   160,    -1,   162,    -1,   164,
     165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,    -1,
      -1,   176,   177,    -1,   179,    -1,   181,    -1,   183,   184,
     185,   186,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,
      -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,
     205,   206,   207,   208,   209,    -1,   211,   212,    -1,    -1,
     215,   216,    -1,   218,    -1,    -1,    -1,   222,    -1,    -1,
      -1,    -1,   227,    -1,   229,   230,    -1,   232,   233,   234,
      -1,    -1,   237,    -1,    -1,    -1,   241,    -1,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,    -1,    -1,   254,
     255,    -1,   257,    -1,   259,    -1,   261,   262,    -1,    -1,
      -1,    -1,   267,    -1,    -1,    -1,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,   288,   289,   290,   291,    -1,   293,   294,
     295,    -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,
      -1,   306,   307,    -1,   309,    -1,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,   323,   324,
      -1,    -1,   327,   328,   329,   330,    -1,    -1,    -1,    -1,
     335,    -1,    -1,    -1,    -1,   340,   341,   342,    -1,   344,
     345,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   360,   361,    -1,    -1,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,    -1,
      -1,    -1,    -1,   378,   379,    -1,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
      -1,    -1,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,    -1,    -1,   411,    -1,   413,   414,
      -1,   416,    -1,    -1,   419,    -1,    -1,   422,   423,   424,
      -1,    -1,    -1,    -1,   429,   430,   431,   432,   433,   434,
      -1,   436,    -1,   438,    -1,    -1,    -1,    -1,   443,   444,
     445,    -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,   454,
      -1,   456,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,   470,   471,    -1,   473,    -1,
      -1,   476,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,   493,    -1,
      -1,   496,   497,   498,   499,    -1,   501,   502,    -1,   504,
      -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,    -1,    -1,    -1,   529,   530,   531,    -1,   533,   534,
      -1,   536,   537,    -1,    -1,    -1,    -1,    -1,   543,    -1,
      -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,   563,    -1,
      -1,    -1,   567,   568,   569,   570,    -1,    -1,   573,    -1,
     575,    -1,    -1,   578,    -1,    -1,     5,   582,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    -1,
      -1,    -1,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    -1,    -1,    55,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    -1,    65,    66,    -1,    68,
      69,    -1,    -1,    72,    -1,    74,    75,    76,    77,    -1,
      79,    -1,    81,    -1,    -1,    84,    -1,    86,    -1,    -1,
      89,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,
      99,   100,   101,    -1,    -1,   104,    -1,    -1,    -1,    -1,
     109,    -1,    -1,    -1,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,   133,   134,   135,    -1,    -1,    -1,
     139,    -1,    -1,   142,    -1,   144,   145,   146,    -1,    -1,
     149,    -1,   151,   152,   153,   154,    -1,    -1,    -1,   158,
     159,   160,    -1,   162,    -1,   164,   165,    -1,   167,   168,
     169,    -1,    -1,    -1,    -1,    -1,    -1,   176,   177,    -1,
     179,    -1,   181,    -1,   183,   184,   185,   186,    -1,    -1,
     189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,   204,   205,   206,   207,   208,
      -1,    -1,   211,   212,    -1,    -1,   215,   216,    -1,   218,
      -1,    -1,    -1,   222,    -1,    -1,    -1,    -1,   227,    -1,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,
      -1,    -1,   241,    -1,    -1,   244,    -1,    -1,   247,   248,
      -1,    -1,    -1,    -1,    -1,   254,   255,    -1,   257,    -1,
     259,    -1,   261,   262,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,   288,
     289,   290,   291,    -1,   293,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,    -1,
     309,    -1,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,   323,   324,    -1,    -1,   327,   328,
     329,   330,    -1,    -1,    -1,    -1,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,    -1,   344,   345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   360,   361,    -1,    -1,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,    -1,    -1,    -1,    -1,   378,
     379,    -1,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,    -1,    -1,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
      -1,    -1,   411,    -1,   413,    -1,    -1,   416,    -1,    -1,
     419,    -1,    -1,   422,   423,    -1,    -1,    -1,    -1,    -1,
     429,   430,   431,   432,   433,   434,    -1,   436,    -1,   438,
      -1,    -1,    -1,    -1,   443,   444,   445,    -1,    -1,    -1,
      -1,   450,    -1,    -1,    -1,   454,    -1,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,   470,   471,    -1,   473,    -1,    -1,   476,    -1,    -1,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,   493,    -1,    -1,   496,   497,   498,
     499,    -1,   501,   502,    -1,   504,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,    -1,    -1,    -1,
     529,   530,   531,    -1,   533,   534,    -1,   536,   537,    -1,
      -1,    -1,    -1,    -1,   543,    -1,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
      -1,   560,    -1,    -1,   563,    -1,    -1,    -1,   567,   568,
     569,   570,    -1,    -1,    -1,    -1,   575,    -1,    -1,   578,
      -1,    -1,    -1,   582
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    14,    28,    30,    34,    49,    50,    56,    60,
      61,    73,    90,   110,   118,   119,   120,   130,   131,   143,
     155,   172,   188,   193,   196,   221,   223,   239,   256,   260,
     347,   367,   377,   387,   407,   410,   412,   415,   418,   420,
     425,   428,   435,   440,   448,   453,   457,   480,   486,   528,
     540,   544,   548,   554,   579,   593,   604,   607,   608,   609,
     610,   611,   613,   618,   620,   625,   655,   787,   932,   970,
     973,   981,   983,   985,   988,   993,   995,   996,  1001,  1004,
    1009,  1013,  1021,  1022,  1177,  1179,  1188,  1191,  1216,  1224,
    1235,  1241,  1255,  1258,  1261,  1267,  1271,  1275,  1277,  1278,
    1324,  1342,  1348,  1350,  1357,  1359,  1386,  1392,  1393,  1394,
    1395,  1442,  1450,  1451,    11,    97,   115,   181,   210,   261,
     382,   446,   502,   966,  1411,  1412,  1413,  1416,   257,   336,
    1003,   501,   505,  1344,  1387,   510,  1315,   213,     5,     7,
       8,     9,    10,    11,    17,    20,    22,    23,    24,    25,
      26,    27,    28,    30,    34,    35,    39,    42,    43,    44,
      46,    48,    49,    52,    55,    57,    58,    60,    62,    63,
      64,    65,    66,    68,    69,    71,    72,    73,    74,    75,
      76,    77,    79,    81,    83,    84,    86,    89,    92,    99,
     100,   101,   104,   109,   110,   115,   117,   121,   123,   124,
     125,   126,   130,   133,   134,   135,   139,   141,   142,   144,
     145,   146,   149,   151,   152,   153,   154,   155,   158,   159,
     160,   162,   164,   165,   167,   168,   169,   172,   176,   177,
     179,   181,   183,   184,   185,   186,   187,   189,   193,   194,
     196,   199,   200,   204,   205,   206,   207,   208,   211,   212,
     215,   216,   218,   222,   223,   227,   229,   230,   232,   233,
     237,   240,   241,   244,   247,   248,   254,   255,   257,   259,
     261,   262,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   285,   286,   288,   289,
     290,   291,   293,   294,   295,   299,   300,   301,   302,   303,
     306,   307,   309,   311,   313,   314,   315,   316,   317,   318,
     319,   320,   323,   324,   327,   328,   329,   330,   334,   335,
     340,   341,   342,   344,   345,   346,   348,   355,   359,   360,
     361,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   377,   378,   379,   381,   383,   384,   385,
     386,   388,   389,   390,   393,   397,   398,   399,   400,   401,
     404,   405,   406,   408,   409,   411,   412,   413,   416,   418,
     419,   420,   422,   423,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   438,   439,   443,   444,   445,   446,
     450,   454,   455,   456,   457,   459,   460,   461,   462,   463,
     470,   471,   473,   476,   479,   480,   483,   486,   487,   489,
     490,   491,   492,   493,   496,   497,   498,   499,   501,   502,
     504,   506,   507,   508,   511,   512,   514,   515,   516,   517,
     523,   524,   528,   529,   530,   531,   533,   534,   536,   537,
     539,   540,   543,   545,   547,   549,   551,   552,   553,   560,
     563,   567,   568,   569,   570,   575,   576,   578,   579,   582,
     649,  1314,  1318,  1322,  1323,   285,  1344,  1344,   575,  1388,
      97,   180,   261,   270,   446,   464,   502,   507,   542,   631,
     632,   835,   836,   837,   910,   911,   912,  1183,  1225,  1178,
      97,   153,   181,   213,   261,   382,   446,   502,   507,   525,
     567,  1183,  1187,  1318,  1003,   648,   601,  1311,  1313,  1318,
     619,  1189,   371,    79,   208,   389,  1276,   100,   213,   505,
    1344,  1003,   788,  1318,  1272,   435,   551,  1344,  1003,  1192,
    1268,  1344,   648,  1388,  1318,  1024,  1026,  1027,   349,  1326,
    1242,   480,   486,   457,   523,   457,   505,  1236,   371,  1349,
    1217,  1318,    30,    73,   141,   377,   398,   428,   480,  1444,
     440,   593,  1023,     0,   143,   605,   377,   159,   366,  1259,
    1311,  1318,   147,   943,  1318,   147,   649,   190,   649,   249,
    1315,  1318,  1320,   736,   737,   740,   763,  1318,   505,   153,
     938,  1411,  1344,   984,  1388,  1010,  1011,  1311,   656,   601,
     521,   986,   997,    16,  1389,   209,   838,   190,  1320,   738,
     763,   354,  1408,  1412,  1413,  1414,  1415,  1416,   505,   836,
     213,   213,   213,   551,   210,   268,   390,  1233,  1234,     7,
      20,    27,    33,    36,    37,    38,    40,    53,    54,    58,
      59,    65,    68,    83,    87,    88,    93,    94,    96,    97,
     102,   103,   104,   109,   111,   114,   156,   161,   163,   170,
     183,   185,   191,   194,   197,   204,   209,   221,   224,   246,
     254,   265,   287,   292,   302,   306,   308,   312,   313,   314,
     315,   316,   322,   331,   332,   333,   337,   338,   342,   355,
     362,   368,   372,   373,   375,   388,   414,   415,   426,   433,
     438,   484,   485,   490,   494,   495,   500,   510,   514,   515,
     516,   517,   526,   527,   528,   532,   535,   545,   551,   556,
     557,   558,   559,   564,   566,   570,   582,   586,   587,   592,
     593,   596,   597,   600,   601,  1042,  1043,  1044,  1045,  1049,
    1052,  1053,  1054,  1055,  1056,  1057,  1065,  1075,  1085,  1298,
    1300,  1302,  1303,  1307,  1309,  1314,  1318,   209,  1186,  1186,
    1186,  1318,   190,  1186,  1186,   763,  1186,  1186,   551,  1344,
     614,  1262,    12,    13,    90,   118,   131,   153,   155,   167,
     188,   213,   221,   260,   383,   402,   408,   416,   440,   453,
     454,   496,   525,   548,   550,  1360,  1362,  1364,  1365,  1318,
     346,    64,   394,   601,  1320,   116,   198,   268,  1194,  1318,
    1042,  1279,   225,  1311,  1343,  1344,    47,   789,   178,    33,
     285,  1246,  1273,  1318,   648,  1005,  1344,   116,   268,  1195,
    1223,   285,   389,   457,  1269,  1270,   982,    12,  1358,  1362,
     521,  1389,  1025,    12,   127,   198,   469,   470,   471,   472,
     473,   474,   488,  1031,  1032,  1033,  1325,    23,    34,    57,
      58,    59,    68,    70,    86,    88,    90,    98,   145,   149,
     152,   179,   181,   186,   189,   212,   213,   218,   236,   257,
     285,   317,   327,   346,   370,   381,   382,   385,   386,   445,
     457,   487,   504,   505,   552,   569,   883,   909,  1243,  1246,
    1247,  1249,  1250,  1332,   975,   976,   975,   975,   574,   974,
     975,  1182,  1311,  1318,  1344,  1223,    36,   197,   510,  1299,
    1316,  1443,  1443,  1443,  1443,  1443,  1026,  1023,   594,   599,
    1318,  1257,  1256,   301,   508,   534,   934,   549,    94,  1320,
    1321,   936,   742,   764,  1318,   935,   348,     6,    56,   131,
     332,   393,   395,   765,  1311,   649,   475,  1417,  1418,   937,
     994,  1181,  1182,   228,   595,  1017,  1018,   593,   657,  1318,
     621,  1181,  1181,    55,   334,   334,   407,  1390,   331,   332,
    1048,  1318,   741,   764,   174,     6,   415,    10,   382,   525,
     635,  1037,  1410,  1418,  1426,  1430,  1431,  1437,   635,  1037,
    1409,  1418,  1426,  1431,  1437,  1411,  1416,   838,  1318,  1318,
    1318,   648,   178,  1226,  1230,  1231,  1318,  1233,   593,   593,
     593,  1052,   593,   593,   593,  1042,  1088,   593,   593,   593,
     593,   593,   593,   593,   593,   593,  1041,  1041,   593,  1041,
     593,   593,   593,   535,   593,  1298,   593,   593,   593,   593,
     593,   593,   593,   593,   593,   593,   593,   593,  1042,   593,
     593,   593,  1086,  1087,  1307,  1318,   593,   593,   593,   593,
     593,   593,   593,   593,   593,  1042,   593,  1041,   593,   593,
     593,   593,   593,   593,   593,   593,   593,   593,   593,   593,
     593,   593,   593,   593,   593,   593,  1041,   593,  1298,   593,
     593,   593,  1298,   593,   593,    36,   197,   510,   593,   593,
    1041,  1041,  1041,   593,   593,   593,   593,   593,  1052,  1052,
    1052,   440,   593,  1042,  1405,  1318,  1076,  1318,    15,    16,
     351,   354,   580,  1046,  1047,   147,   148,   182,   192,   231,
     242,   269,   325,  1050,    31,   128,   228,   250,   312,   403,
     451,   452,   462,   584,   585,   586,   587,   588,   589,   590,
     591,  1048,  1052,    67,   353,   595,  1316,   593,   601,   156,
    1318,   649,  1318,   343,   764,   649,  1320,   774,  1247,   649,
    1181,   648,  1186,   555,   615,   121,   200,   262,   285,   381,
     389,   419,   457,   482,   483,   501,   504,   552,  1263,  1264,
    1344,   381,  1363,   430,   430,   507,   551,   567,   349,  1367,
     501,  1369,    63,   457,  1366,    98,   567,  1368,   343,   595,
      18,   147,  1132,  1133,  1351,  1318,   966,   461,    77,   178,
     268,  1280,  1285,    49,   178,  1311,  1345,  1346,  1002,   252,
     255,   391,   790,   794,   600,   612,  1315,   262,  1006,  1321,
    1007,  1008,  1311,   989,   225,  1182,  1196,  1197,    49,   595,
    1181,  1363,   343,   435,  1391,  1390,   541,  1396,  1397,   588,
    1035,  1036,  1037,  1033,  1327,  1328,  1329,   152,   215,   448,
     250,   572,  1254,   529,   593,    97,   153,   181,   382,   505,
     525,   567,  1254,    12,   846,  1320,   251,  1151,  1153,   178,
     228,  1248,  1251,    66,   483,   175,   483,   483,   483,   285,
     501,    66,   483,    12,    42,    84,    89,   230,   300,   361,
     463,   498,  1237,  1238,  1239,   200,   483,   483,   529,  1151,
    1254,  1251,   262,   144,    69,   371,   384,   501,   524,   481,
     483,   563,   972,   406,   476,   977,   978,   971,    81,   966,
     595,   345,  1446,   497,  1447,   235,   422,  1445,   594,  1397,
    1399,  1400,  1401,   143,   606,  1021,  1260,  1299,  1318,   114,
     833,   834,   843,   844,   892,   100,  1041,   600,   650,     6,
     743,   650,   593,    99,   760,   760,   760,     4,   933,   939,
     439,   567,  1418,  1181,   521,   595,   114,  1012,  1318,  1011,
     213,   238,   907,  1019,   658,   659,  1042,    80,   271,   272,
     273,   274,   275,   276,   278,   279,   280,   281,   282,   283,
     284,   286,   404,   405,   622,   623,   624,   159,   390,   987,
      57,   159,   164,   175,   299,   390,   998,   999,  1000,    55,
     407,   156,   630,   743,   100,   760,  1037,  1037,  1037,   153,
     181,   181,  1418,  1311,   913,   914,   913,   913,  1321,  1375,
    1376,  1378,  1184,  1185,  1311,  1312,  1318,   595,  1228,   601,
    1232,  1042,  1042,    12,   127,  1081,  1134,  1081,  1081,  1081,
     571,  1090,  1042,  1042,  1085,  1085,  1042,  1042,  1042,   127,
    1081,  1134,   594,  1042,   594,  1042,  1042,  1042,  1042,  1307,
     593,  1405,   105,   106,   107,   108,   109,   201,   202,   203,
     204,   302,   304,   305,   306,   313,   388,   437,   438,   570,
     581,   582,  1128,  1130,  1085,   101,   104,   514,   517,  1131,
     127,  1078,  1072,  1042,  1042,  1042,  1042,  1128,  1042,  1085,
    1087,     9,   595,   601,   127,  1081,  1042,  1042,   127,  1081,
    1042,  1042,  1085,  1085,  1085,  1042,  1042,  1068,  1042,  1042,
    1085,  1045,  1042,  1042,  1042,  1042,  1042,  1042,  1081,  1081,
    1042,  1042,   127,  1081,  1042,  1042,   177,  1129,  1130,  1129,
    1042,    45,   243,   522,  1042,  1042,  1070,   594,  1308,  1309,
    1318,  1081,  1081,  1042,  1042,  1406,  1406,   594,   595,   594,
    1042,   600,  1077,  1320,   601,  1042,  1042,  1042,  1044,   163,
     337,   527,   543,  1048,    12,    17,  1044,  1051,  1045,  1045,
     593,  1052,  1045,  1045,  1045,  1045,   250,  1045,  1045,   224,
    1045,   224,  1045,  1045,  1045,  1045,  1045,    31,   228,   250,
     403,  1320,  1052,  1042,  1058,  1318,   601,  1311,   774,   335,
     568,   775,   776,   145,    51,   421,   967,  1321,  1374,  1181,
     600,   616,   617,    49,   574,   595,  1265,   501,   593,  1379,
    1379,  1379,  1379,   181,   382,   505,  1361,  1365,  1318,   168,
     328,  1318,  1352,  1353,  1196,  1315,   285,   257,  1284,  1014,
     285,  1133,   595,  1181,   793,   792,   366,   800,   194,   238,
    1320,    29,   521,  1274,   595,   521,   595,   521,  1181,  1197,
    1193,  1270,   178,   595,   181,   382,  1361,  1318,    12,   127,
    1403,   595,  1028,  1039,  1042,  1305,  1318,   595,   186,   257,
     344,   445,  1330,  1331,  1334,  1335,   228,  1252,   175,  1315,
    1042,   588,   838,   649,   649,   649,  1311,   649,  1311,   262,
     317,   483,  1245,  1245,   265,   338,   532,  1154,  1155,  1300,
    1254,  1318,   649,  1254,  1321,   175,  1248,   649,  1254,   229,
     499,   165,   175,  1240,   595,  1248,  1311,  1251,  1248,  1248,
     483,  1254,  1254,   547,   979,   595,   979,   459,   440,   593,
     597,  1091,  1092,  1093,  1094,  1095,  1104,  1105,  1112,  1299,
     369,  1448,   352,  1147,  1153,  1402,   834,    67,   883,   123,
    1320,    71,    83,   240,   310,   334,   392,   475,   652,   654,
     399,   536,   761,   762,   216,   757,   758,   759,   766,   774,
     776,    97,   199,   359,   368,   374,   460,   551,   633,   634,
    1315,    24,   291,   751,   752,   753,   766,   767,   768,   774,
     776,   744,   745,   751,     6,    13,    14,    25,    26,    56,
      60,    61,    65,    71,    79,    87,   100,   117,   124,   125,
     131,   139,   145,   173,   211,   213,   222,   237,   290,   307,
     311,   347,   352,   360,   367,   368,   397,   409,   410,   411,
     412,   432,   487,   502,   506,   530,   541,   785,   840,   842,
     843,   844,   944,   948,   950,   953,   959,   960,   961,  1143,
     343,   643,   940,   115,   227,  1311,  1315,  1182,   593,   594,
     595,   147,   147,   147,   147,   147,   147,   147,   147,   147,
     147,   147,   147,   147,   147,   147,   147,   595,   549,   999,
     832,   833,    71,   329,   400,   537,   754,   755,   756,   766,
     770,   771,   772,   773,   774,   776,   576,   554,   739,   181,
     649,   649,   838,   649,  1318,   626,   530,   555,   921,   343,
     343,   343,   206,   595,   427,  1377,   595,  1229,  1227,   601,
    1232,  1231,   178,   588,  1318,  1133,   595,   594,  1081,   594,
    1082,   594,   594,   594,  1042,   137,   571,  1089,    18,   594,
     555,   594,   594,   594,   595,   555,   595,  1066,   594,   588,
     594,   595,   595,   594,   594,   594,   594,   178,   594,   595,
    1074,  1085,   594,   595,   595,   595,   587,   595,   594,   594,
     593,  1307,  1318,  1081,   594,   594,   594,  1081,   594,   595,
     594,   594,   594,   594,   594,   594,  1085,   594,   595,   594,
     228,   594,   595,   595,   595,   595,   594,   594,   594,   595,
     178,   595,  1081,   594,   594,   594,   595,   595,   595,   594,
     178,  1042,   178,  1042,   178,  1042,   178,   594,   595,  1085,
     594,   594,   594,   594,   595,   594,  1024,  1023,  1085,   598,
     186,   257,   445,  1333,   449,  1318,   163,   337,   527,   543,
     593,    16,  1042,  1405,   151,  1139,  1045,  1042,  1042,  1045,
     593,  1052,  1045,  1037,  1062,  1063,  1064,   593,   601,  1318,
    1180,   775,   147,   449,  1207,  1208,   595,   967,  1320,   595,
     394,  1264,  1181,  1266,  1318,  1380,  1381,   588,  1311,  1318,
    1373,  1373,  1373,   147,   168,   182,   192,   241,   242,   269,
     328,   379,  1354,  1356,   572,  1135,  1190,   214,  1015,  1016,
    1311,   268,   394,   577,  1347,  1346,   593,   798,   798,   111,
     170,   197,   265,   338,   532,  1158,  1161,  1162,   493,   801,
     791,   593,  1042,  1315,  1321,  1321,  1008,  1311,   159,   390,
     553,   990,   991,   992,   440,   448,   559,   560,   593,   828,
    1198,  1201,  1315,   188,  1373,  1373,  1373,  1398,  1036,   178,
     225,  1029,  1030,  1146,  1147,  1172,  1038,   601,  1328,   114,
     523,  1318,  1338,    35,   162,   318,   368,   600,   883,  1336,
    1315,   178,  1253,   111,   170,   265,   338,   532,  1159,   594,
    1318,   341,   595,   457,  1254,   389,  1151,  1239,  1254,  1248,
    1311,  1254,  1254,  1254,   624,   980,   978,  1111,  1318,    91,
     217,   235,   246,   321,   426,   488,  1103,   448,   595,  1311,
    1111,   595,   175,  1449,    47,  1151,  1208,  1208,   319,  1315,
     475,   475,   475,   475,   475,   439,  1315,  1315,  1208,   595,
     759,  1315,  1315,  1315,  1315,   111,   170,   197,   265,   338,
     532,  1157,  1315,  1315,   594,   595,  1208,  1208,   595,   753,
     746,   747,   766,   767,   768,    70,    82,   367,   854,   857,
     858,   905,   907,   911,   912,   965,   965,   367,  1208,  1208,
     965,  1208,   367,   367,  1208,  1208,   521,   123,  1208,   236,
     502,   174,   367,   380,   907,   965,   236,  1208,   502,   123,
    1208,  1208,  1208,  1208,   965,   367,    47,  1208,   786,  1208,
     367,   365,    18,   147,   521,   969,   367,   367,  1208,   126,
     300,  1318,  1208,  1208,  1208,   840,   595,   784,   785,   948,
     593,   601,   853,   859,  1310,  1318,    75,   436,   410,   941,
    1419,   380,  1124,  1125,  1126,  1318,  1042,  1157,  1315,  1315,
    1159,  1315,  1157,  1315,  1315,  1315,  1315,  1315,  1157,  1157,
    1315,  1315,  1157,   623,  1208,  1208,  1208,  1208,   595,   756,
    1320,   261,   160,   748,   749,   750,   766,   767,   768,   769,
     772,   773,   774,   776,  1318,  1438,     8,    29,   734,   649,
     593,   423,   250,   593,   778,   839,   841,   842,    46,   194,
     434,   926,   926,  1311,  1311,  1311,    47,  1378,  1320,  1185,
    1318,   555,  1135,  1318,  1092,   601,  1232,   224,  1042,   594,
    1042,   513,  1042,  1042,   141,    33,    59,   101,   104,   112,
     323,   455,   517,   546,  1083,    33,   884,  1320,  1042,   884,
    1083,  1085,   594,   224,   224,  1042,  1042,  1085,  1073,  1042,
    1042,  1042,  1042,  1042,  1045,   594,   594,  1042,  1069,  1042,
    1042,  1042,  1042,  1042,  1085,   224,  1042,  1042,  1042,   594,
    1042,  1042,  1042,  1042,   178,  1042,   178,  1042,   178,  1042,
    1042,  1071,  1042,  1404,  1404,   594,   601,   601,   601,  1320,
    1042,  1405,  1044,   594,   595,   594,  1052,  1128,  1128,    16,
    1042,  1405,  1139,  1042,   594,   595,  1084,  1085,  1318,   845,
    1320,  1321,   617,   260,   594,   595,   601,   601,   521,   521,
     521,  1355,  1136,  1152,  1153,  1198,   510,  1317,   595,  1017,
     577,   257,  1037,    47,   593,   808,   798,   795,   796,   797,
    1318,   521,   991,   829,  1199,   593,  1204,  1209,  1204,   594,
     828,  1200,  1304,  1305,  1308,  1318,  1202,   349,   178,   178,
     178,  1022,   132,  1092,  1173,   175,   260,  1034,  1172,  1152,
    1030,    18,  1040,  1315,  1318,   588,  1318,   601,   232,   601,
    1207,   147,   147,   114,   884,   885,  1207,   175,  1207,   600,
    1320,    33,   114,   887,   888,  1320,  1159,  1244,   149,   569,
    1155,  1155,   574,   338,  1135,  1248,   595,  1106,  1111,  1091,
     235,   235,   356,  1113,   235,   246,   426,  1113,  1104,  1091,
    1219,  1220,  1308,  1093,  1133,  1108,  1109,  1157,   303,  1148,
     114,   889,   891,  1320,   885,   100,   100,   115,   227,   205,
     777,  1158,   759,   634,   777,   777,   753,   595,   747,   929,
    1310,  1003,    61,   174,   380,   542,   856,   906,   855,   856,
     929,   907,   908,   908,  1310,  1003,  1159,  1157,  1310,  1157,
      12,   949,   957,   958,  1318,  1003,  1315,  1315,   883,  1208,
    1157,   238,   957,   238,  1310,  1310,   845,  1208,   168,   241,
     334,   848,  1157,  1159,  1159,  1310,  1003,  1144,  1145,  1308,
     114,  1157,   789,  1315,  1003,  1311,  1003,  1003,    74,    76,
     114,   135,   169,   401,   847,  1157,   845,   593,     6,   131,
     961,   851,   852,   853,   854,  1318,     8,   168,   968,   402,
     855,   897,   860,   601,   332,   378,    22,   154,   637,   521,
     124,   139,   639,   593,  1420,   594,   595,  1315,  1158,   777,
     777,   756,   348,   190,  1208,   595,   750,   423,   593,   118,
     221,   548,   735,   636,  1432,   112,   226,   396,   489,   850,
    1311,   250,   367,   779,   784,   851,   784,   595,   841,   627,
     628,   629,   368,   510,  1377,   601,  1092,  1146,  1232,  1135,
    1133,  1042,   594,  1042,   513,   593,   876,   877,   877,   593,
     871,   872,   876,   877,   226,   226,   594,   594,   594,   594,
     594,  1067,  1042,  1042,   594,   594,  1080,  1147,   594,   595,
     595,   594,   595,   594,   228,  1059,  1060,   594,   594,   594,
     594,   594,   595,   594,   594,  1042,   594,   175,   594,   594,
     595,   594,   595,   595,   594,  1042,   594,  1042,   594,  1042,
     594,   594,   594,   594,  1407,  1407,   601,   930,   594,  1085,
    1044,   594,   595,   594,  1038,  1064,   594,  1381,   588,   588,
    1375,  1378,  1375,  1375,   593,  1042,   343,  1214,  1281,  1016,
     210,  1020,   806,  1045,   794,   367,   809,   810,   594,   595,
    1321,  1031,  1205,  1206,  1308,  1210,   595,   593,  1201,   594,
     594,   595,   601,  1396,   178,  1375,  1375,  1375,  1135,  1135,
     133,   357,  1168,  1169,  1174,   548,   228,  1315,  1318,   601,
    1318,   248,  1318,    12,    33,   114,   343,  1042,  1341,  1159,
    1157,    67,   890,  1042,  1321,   342,   368,   510,  1340,  1333,
    1207,  1151,   273,  1254,   624,  1399,  1107,   598,   235,  1104,
    1113,  1113,   235,   343,   343,   555,   595,  1218,  1207,  1122,
    1123,  1031,  1042,  1149,  1306,   747,   951,  1042,   238,   238,
     908,   929,   914,   929,   929,   131,   448,   949,   962,   946,
     595,  1158,   885,  1315,   929,   967,  1315,   963,   949,   595,
      19,   119,  1150,   949,   954,   949,  1266,   594,   595,  1318,
    1311,    32,    33,    39,    41,    43,    44,    59,   101,   104,
     112,   129,   146,   169,   171,   183,   184,   226,   254,   263,
     264,   266,   296,   297,   298,   314,   315,   316,   320,   323,
     339,   340,   372,   373,   396,   444,   448,   458,   511,   514,
     517,   518,   519,   520,   561,   562,   582,   861,   864,   865,
     866,   867,   868,   869,   870,  1318,   378,  1042,  1042,   343,
     643,   649,   343,    71,   644,  1318,  1421,    18,  1125,   593,
    1318,   777,   750,   850,  1439,   343,   343,   660,   661,   663,
    1318,   461,  1311,   828,   594,   210,   415,   781,  1286,   841,
     593,   593,   593,   510,  1318,  1135,   251,  1156,  1128,  1042,
     111,   265,   338,   532,    20,    33,    48,   539,   883,   893,
     338,   594,  1128,  1128,   442,  1079,  1042,  1042,  1085,    43,
     321,   594,   574,  1061,  1042,  1128,  1042,  1042,  1042,  1042,
     594,   594,   594,   594,  1318,   594,  1085,  1040,   417,   595,
    1382,  1382,  1382,   114,  1042,  1212,  1213,   134,  1286,   244,
    1038,   194,   238,   811,   594,   595,   797,  1035,   595,  1207,
    1211,  1212,  1209,  1203,  1201,  1304,  1318,  1375,  1152,   190,
    1140,  1317,  1317,   600,  1170,  1171,  1320,   450,   588,   394,
     413,   443,  1339,   595,   891,  1207,   593,   593,  1338,  1042,
     147,   594,  1094,  1091,  1104,   235,   235,  1091,  1104,  1097,
    1096,  1098,  1220,  1135,  1213,  1120,  1121,  1035,   595,  1150,
     366,   593,   952,   929,   914,   593,   913,   913,   114,   114,
     859,   998,   958,   890,   861,   945,  1145,   955,   957,   947,
     594,   852,   898,   876,   876,   877,   871,   376,   862,   871,
     871,   893,    59,   561,   865,   867,   893,   893,    59,   562,
     562,   565,   871,   863,   877,   877,   893,   876,   877,    25,
      67,    71,   114,   337,   343,   380,   444,   542,   879,   880,
     881,   896,  1048,   565,   876,   893,    33,   876,   894,   876,
     876,   877,   593,   872,   878,   601,  1128,   457,  1315,   130,
     942,   594,   595,  1422,  1423,   633,   461,   219,   228,   358,
     664,   665,   666,   667,  1037,   436,   594,   595,   662,  1315,
     594,   594,   839,    18,   831,   927,   928,  1318,   927,   927,
    1155,   594,   594,   594,   594,   594,   894,    20,   539,   883,
     895,   894,   884,   595,   594,   594,  1299,   594,   594,   595,
     594,   309,   240,   389,   594,   594,   594,   594,   594,   594,
     594,    62,   233,   330,   477,   491,   578,  1371,  1372,  1378,
     574,  1383,  1383,  1383,   594,   595,  1215,   225,   594,   593,
     799,   593,   812,  1318,   810,   830,  1206,  1213,   594,  1399,
      47,   195,  1137,  1175,  1320,   595,   309,    72,   533,   394,
     277,  1340,   510,   510,  1207,  1315,  1133,   343,  1100,  1104,
    1104,   343,  1102,  1042,  1042,   593,  1146,   173,   210,   554,
    1115,  1116,  1119,  1110,  1306,  1158,   809,   593,   593,   927,
     593,   593,   104,   514,   517,   586,   587,  1301,  1302,   968,
     879,  1003,   956,   990,   287,   343,   593,   899,   901,   902,
     903,   455,   546,   583,   873,   874,   875,   593,   873,   873,
     893,   565,   873,   593,   893,   873,   889,  1315,   333,   882,
    1301,   548,   114,   238,   881,   238,   337,   893,   894,   893,
     894,   873,   338,   873,  1318,   638,   645,   646,  1318,   440,
     593,  1424,   594,  1315,   594,   595,   662,  1427,   637,  1433,
     663,   861,   780,   784,   593,   828,   594,   595,  1150,   593,
     594,   594,   884,   894,   338,  1042,   309,   158,   510,   510,
     510,    16,  1370,   188,   288,   289,   293,   294,  1384,  1385,
    1213,   238,   505,  1037,   802,   804,   805,  1318,   559,   813,
     849,  1030,  1152,  1141,  1306,  1138,  1146,   883,   886,  1171,
     147,   594,   594,  1341,    16,  1099,   555,  1101,   555,  1127,
    1318,  1156,   907,   907,  1116,   849,  1150,   594,   927,   927,
     594,   927,   927,  1303,  1303,   964,   225,   179,   364,   456,
     118,   548,   900,  1318,   903,   875,   931,  1299,   931,  1041,
     333,   560,   479,   640,    53,    64,   166,   209,   234,   245,
     346,   424,   647,   685,   687,   688,   689,   691,   692,   693,
     694,   695,   696,   698,   706,   707,   710,   721,   724,   726,
     727,  1314,  1319,  1323,  1024,  1023,   574,  1425,  1440,   666,
    1318,  1311,   642,   643,   423,  1399,   781,   828,   782,   237,
     915,   918,   921,   922,   923,   928,   338,   574,   916,   920,
     922,   925,   917,   919,   922,   924,   594,   594,  1371,   349,
    1157,  1157,  1157,  1157,  1385,   548,  1311,   806,   492,   807,
     594,   595,   228,   247,    71,   100,   213,   290,   307,   329,
     502,   825,   826,   827,  1247,  1034,   574,   595,  1142,  1150,
    1042,  1152,   885,  1176,  1157,   274,  1042,   593,  1042,   593,
     594,   595,   175,  1114,  1114,   594,   594,   915,   594,   594,
     968,   593,    51,   334,   421,   448,   904,   904,   594,   595,
     594,   595,   594,  1041,  1042,   142,   641,   708,   711,  1318,
     178,   328,   699,   686,  1319,  1319,  1318,   690,   608,   267,
     414,   573,   730,    30,   728,   602,   594,    52,    61,   257,
     651,   861,   175,   639,  1434,   594,  1396,  1208,   923,  1150,
     594,   363,   925,   924,  1221,  1222,  1308,  1282,  1038,  1158,
     803,   805,   593,   512,  1208,   123,   123,  1208,  1208,  1208,
    1208,   593,   820,   827,   145,    92,   429,  1306,   382,  1163,
      69,  1287,   574,  1337,   147,  1127,  1127,  1318,   190,   235,
     352,  1118,  1117,   897,   915,   916,   917,   809,     5,   114,
     337,   901,  1318,   893,  1299,   893,  1042,  1042,   571,   713,
     717,   178,  1318,   701,   702,  1042,   669,   684,   685,   687,
     689,   691,   693,   694,   695,   696,   698,   706,   721,   724,
     726,   669,   731,   729,   722,   725,  1399,    61,   349,    61,
     122,   652,   653,  1048,  1441,  1037,   644,   861,   783,  1157,
    1314,   595,  1207,   886,   594,   807,   817,   818,   819,  1045,
     295,   593,   814,   815,   816,  1315,  1208,  1208,   265,   338,
     532,  1160,  1161,  1160,  1158,  1320,   493,   821,   822,  1208,
    1150,  1318,   140,   150,   350,   509,  1288,  1289,   253,  1290,
     418,  1159,   594,   594,    47,    47,   593,   593,   594,   709,
     718,   137,   717,   720,   225,   141,  1042,   141,   684,   599,
     547,  1042,   670,   730,   728,   349,   349,   122,   684,  1428,
     130,  1435,  1399,  1222,  1213,  1283,   594,   595,   295,   819,
    1315,  1315,   823,   594,   595,   845,  1164,    47,    47,   140,
      47,  1289,   478,   509,  1291,  1292,    16,  1124,  1126,   571,
     712,   714,  1042,   669,   141,   697,   209,   513,   267,   599,
     733,   130,   113,   668,   671,   723,  1319,   723,   136,   645,
     651,  1287,   818,   594,   594,   824,  1320,   822,   593,  1299,
    1299,    47,  1299,    47,    47,  1292,   277,   594,   594,   715,
     714,   720,   719,    53,   700,  1318,   703,  1042,   732,    85,
     157,   676,   682,  1318,   141,   684,   599,   433,  1436,  1290,
     825,  1037,  1165,  1166,  1167,  1299,  1299,  1299,   147,  1042,
     141,   513,   595,   669,   141,   669,   193,   595,   672,    78,
      95,   599,  1429,   684,   210,  1293,  1042,   594,   595,  1157,
     716,    53,   669,  1318,   704,   414,   141,   175,  1318,   861,
     175,   175,   684,   338,   593,  1294,  1038,  1167,   513,   137,
     138,   705,   573,   673,   114,   683,   467,   679,  1157,   674,
     675,   253,   594,   600,  1295,  1296,  1308,   448,  1297,   669,
     669,   701,   466,   468,   677,   678,   679,   681,  1048,  1318,
    1042,   560,   680,  1021,  1320,   594,   595,  1221,   595,   684,
     176,  1316,  1296,   678
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* This macro is provided for backward compatibility. */

#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (0, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  YYSIZE_T yysize1;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = 0;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                yysize1 = yysize + yytnamerr (0, yytname[yyx]);
                if (! (yysize <= yysize1
                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                  return 2;
                yysize = yysize1;
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  yysize1 = yysize + yystrlen (yyformat);
  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
    return 2;
  yysize = yysize1;

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1806 of yacc.c  */
#line 1547 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1806 of yacc.c  */
#line 1559 "sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                ! lip->stmt_prepare_mode &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1806 of yacc.c  */
#line 1584 "sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 61:

/* Line 1806 of yacc.c  */
#line 1657 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 64:

/* Line 1806 of yacc.c  */
#line 1672 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 65:

/* Line 1806 of yacc.c  */
#line 1682 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 66:

/* Line 1806 of yacc.c  */
#line 1689 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 67:

/* Line 1806 of yacc.c  */
#line 1699 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 68:

/* Line 1806 of yacc.c  */
#line 1706 "sql_yacc.yy"
    {}
    break;

  case 73:

/* Line 1806 of yacc.c  */
#line 1721 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 74:

/* Line 1806 of yacc.c  */
#line 1733 "sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 75:

/* Line 1806 of yacc.c  */
#line 1741 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 76:

/* Line 1806 of yacc.c  */
#line 1752 "sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 77:

/* Line 1806 of yacc.c  */
#line 1758 "sql_yacc.yy"
    {}
    break;

  case 80:

/* Line 1806 of yacc.c  */
#line 1768 "sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 81:

/* Line 1806 of yacc.c  */
#line 1772 "sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:

/* Line 1806 of yacc.c  */
#line 1776 "sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1806 of yacc.c  */
#line 1780 "sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 84:

/* Line 1806 of yacc.c  */
#line 1784 "sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 85:

/* Line 1806 of yacc.c  */
#line 1788 "sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::SSL_ENABLE : LEX_MASTER_INFO::SSL_DISABLE;
          }
    break;

  case 86:

/* Line 1806 of yacc.c  */
#line 1793 "sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 87:

/* Line 1806 of yacc.c  */
#line 1797 "sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 88:

/* Line 1806 of yacc.c  */
#line 1801 "sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:

/* Line 1806 of yacc.c  */
#line 1805 "sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:

/* Line 1806 of yacc.c  */
#line 1809 "sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1806 of yacc.c  */
#line 1813 "sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::SSL_ENABLE : LEX_MASTER_INFO::SSL_DISABLE;
          }
    break;

  case 92:

/* Line 1806 of yacc.c  */
#line 1818 "sql_yacc.yy"
    {
            Lex->mi.connect_using_group_id= true;
          }
    break;

  case 94:

/* Line 1806 of yacc.c  */
#line 1826 "sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:

/* Line 1806 of yacc.c  */
#line 1830 "sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 96:

/* Line 1806 of yacc.c  */
#line 1846 "sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 97:

/* Line 1806 of yacc.c  */
#line 1850 "sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 98:

/* Line 1806 of yacc.c  */
#line 1861 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
          }
    break;

  case 99:

/* Line 1806 of yacc.c  */
#line 1879 "sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
          }
    break;

  case 100:

/* Line 1806 of yacc.c  */
#line 1894 "sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 101:

/* Line 1806 of yacc.c  */
#line 1899 "sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str).str))
              MYSQL_YYABORT;
          }
    break;

  case 102:

/* Line 1806 of yacc.c  */
#line 1905 "sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 103:

/* Line 1806 of yacc.c  */
#line 1910 "sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str).str))
              MYSQL_YYABORT;
          }
    break;

  case 104:

/* Line 1806 of yacc.c  */
#line 1916 "sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 105:

/* Line 1806 of yacc.c  */
#line 1921 "sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str).str))
              MYSQL_YYABORT;
          }
    break;

  case 106:

/* Line 1806 of yacc.c  */
#line 1926 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 107:

/* Line 1806 of yacc.c  */
#line 1931 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 108:

/* Line 1806 of yacc.c  */
#line 1938 "sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 109:

/* Line 1806 of yacc.c  */
#line 1944 "sql_yacc.yy"
    {}
    break;

  case 110:

/* Line 1806 of yacc.c  */
#line 1946 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 111:

/* Line 1806 of yacc.c  */
#line 1950 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 112:

/* Line 1806 of yacc.c  */
#line 1954 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 113:

/* Line 1806 of yacc.c  */
#line 1958 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 114:

/* Line 1806 of yacc.c  */
#line 1969 "sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 117:

/* Line 1806 of yacc.c  */
#line 1983 "sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 118:

/* Line 1806 of yacc.c  */
#line 1987 "sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 119:

/* Line 1806 of yacc.c  */
#line 1991 "sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 120:

/* Line 1806 of yacc.c  */
#line 1995 "sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 121:

/* Line 1806 of yacc.c  */
#line 1999 "sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 122:

/* Line 1806 of yacc.c  */
#line 2003 "sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 123:

/* Line 1806 of yacc.c  */
#line 2007 "sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 124:

/* Line 1806 of yacc.c  */
#line 2014 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 125:

/* Line 1806 of yacc.c  */
#line 2034 "sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 126:

/* Line 1806 of yacc.c  */
#line 2045 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 128:

/* Line 1806 of yacc.c  */
#line 2052 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 129:

/* Line 1806 of yacc.c  */
#line 2058 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 130:

/* Line 1806 of yacc.c  */
#line 2060 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 131:

/* Line 1806 of yacc.c  */
#line 2066 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 132:

/* Line 1806 of yacc.c  */
#line 2072 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 133:

/* Line 1806 of yacc.c  */
#line 2081 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 134:

/* Line 1806 of yacc.c  */
#line 2088 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 136:

/* Line 1806 of yacc.c  */
#line 2096 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 137:

/* Line 1806 of yacc.c  */
#line 2102 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 139:

/* Line 1806 of yacc.c  */
#line 2108 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 140:

/* Line 1806 of yacc.c  */
#line 2114 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 141:

/* Line 1806 of yacc.c  */
#line 2122 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 142:

/* Line 1806 of yacc.c  */
#line 2124 "sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 143:

/* Line 1806 of yacc.c  */
#line 2131 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 144:

/* Line 1806 of yacc.c  */
#line 2174 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 158:

/* Line 1806 of yacc.c  */
#line 2206 "sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 159:

/* Line 1806 of yacc.c  */
#line 2221 "sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 160:

/* Line 1806 of yacc.c  */
#line 2237 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 161:

/* Line 1806 of yacc.c  */
#line 2255 "sql_yacc.yy"
    {}
    break;

  case 162:

/* Line 1806 of yacc.c  */
#line 2256 "sql_yacc.yy"
    {}
    break;

  case 163:

/* Line 1806 of yacc.c  */
#line 2260 "sql_yacc.yy"
    {}
    break;

  case 164:

/* Line 1806 of yacc.c  */
#line 2261 "sql_yacc.yy"
    {}
    break;

  case 165:

/* Line 1806 of yacc.c  */
#line 2267 "sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 166:

/* Line 1806 of yacc.c  */
#line 2269 "sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 167:

/* Line 1806 of yacc.c  */
#line 2271 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 168:

/* Line 1806 of yacc.c  */
#line 2273 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 169:

/* Line 1806 of yacc.c  */
#line 2275 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 170:

/* Line 1806 of yacc.c  */
#line 2277 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 171:

/* Line 1806 of yacc.c  */
#line 2279 "sql_yacc.yy"
    {}
    break;

  case 172:

/* Line 1806 of yacc.c  */
#line 2284 "sql_yacc.yy"
    { }
    break;

  case 173:

/* Line 1806 of yacc.c  */
#line 2285 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 174:

/* Line 1806 of yacc.c  */
#line 2286 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 175:

/* Line 1806 of yacc.c  */
#line 2291 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 176:

/* Line 1806 of yacc.c  */
#line 2295 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 177:

/* Line 1806 of yacc.c  */
#line 2302 "sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 178:

/* Line 1806 of yacc.c  */
#line 2310 "sql_yacc.yy"
    {}
    break;

  case 183:

/* Line 1806 of yacc.c  */
#line 2326 "sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 184:

/* Line 1806 of yacc.c  */
#line 2330 "sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 189:

/* Line 1806 of yacc.c  */
#line 2348 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 190:

/* Line 1806 of yacc.c  */
#line 2368 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 195:

/* Line 1806 of yacc.c  */
#line 2405 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 196:

/* Line 1806 of yacc.c  */
#line 2430 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 197:

/* Line 1806 of yacc.c  */
#line 2431 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 198:

/* Line 1806 of yacc.c  */
#line 2432 "sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 199:

/* Line 1806 of yacc.c  */
#line 2433 "sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 200:

/* Line 1806 of yacc.c  */
#line 2437 "sql_yacc.yy"
    {}
    break;

  case 202:

/* Line 1806 of yacc.c  */
#line 2442 "sql_yacc.yy"
    {}
    break;

  case 204:

/* Line 1806 of yacc.c  */
#line 2448 "sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 205:

/* Line 1806 of yacc.c  */
#line 2452 "sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 206:

/* Line 1806 of yacc.c  */
#line 2478 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 207:

/* Line 1806 of yacc.c  */
#line 2486 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 208:

/* Line 1806 of yacc.c  */
#line 2543 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

	    if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
	    {
	      my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    if(YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 209:

/* Line 1806 of yacc.c  */
#line 2558 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
	                              ctx->current_var_count());
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == SP_HANDLER_CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(empty_c_string, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 210:

/* Line 1806 of yacc.c  */
#line 2580 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
	          sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
	          sp->add_instr(i) ||
	          sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 211:

/* Line 1806 of yacc.c  */
#line 2612 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
	    if (i == NULL ||
                sp->add_instr(i) ||
	        ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 212:

/* Line 1806 of yacc.c  */
#line 2637 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 213:

/* Line 1806 of yacc.c  */
#line 2641 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 214:

/* Line 1806 of yacc.c  */
#line 2660 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 215:

/* Line 1806 of yacc.c  */
#line 2661 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 216:

/* Line 1806 of yacc.c  */
#line 2667 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 217:

/* Line 1806 of yacc.c  */
#line 2669 "sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 218:

/* Line 1806 of yacc.c  */
#line 2674 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 219:

/* Line 1806 of yacc.c  */
#line 2697 "sql_yacc.yy"
    { /* mysql errno */
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 220:

/* Line 1806 of yacc.c  */
#line 2705 "sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, 5);
            (yyval.spcondtype)->sqlstate[5]= '\0';
          }
    break;

  case 221:

/* Line 1806 of yacc.c  */
#line 2721 "sql_yacc.yy"
    {}
    break;

  case 222:

/* Line 1806 of yacc.c  */
#line 2722 "sql_yacc.yy"
    {}
    break;

  case 223:

/* Line 1806 of yacc.c  */
#line 2727 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 224:

/* Line 1806 of yacc.c  */
#line 2731 "sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 225:

/* Line 1806 of yacc.c  */
#line 2740 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 226:

/* Line 1806 of yacc.c  */
#line 2747 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 227:

/* Line 1806 of yacc.c  */
#line 2754 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 228:

/* Line 1806 of yacc.c  */
#line 2764 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 229:

/* Line 1806 of yacc.c  */
#line 2779 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 230:

/* Line 1806 of yacc.c  */
#line 2796 "sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 231:

/* Line 1806 of yacc.c  */
#line 2797 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 245:

/* Line 1806 of yacc.c  */
#line 2818 "sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 246:

/* Line 1806 of yacc.c  */
#line 2820 "sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 247:

/* Line 1806 of yacc.c  */
#line 2824 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 248:

/* Line 1806 of yacc.c  */
#line 2833 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 249:

/* Line 1806 of yacc.c  */
#line 2881 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 250:

/* Line 1806 of yacc.c  */
#line 2883 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
	          sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 251:

/* Line 1806 of yacc.c  */
#line 2909 "sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 252:

/* Line 1806 of yacc.c  */
#line 2915 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 253:

/* Line 1806 of yacc.c  */
#line 2924 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 254:

/* Line 1806 of yacc.c  */
#line 2977 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 255:

/* Line 1806 of yacc.c  */
#line 3020 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 256:

/* Line 1806 of yacc.c  */
#line 3040 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 257:

/* Line 1806 of yacc.c  */
#line 3057 "sql_yacc.yy"
    {}
    break;

  case 258:

/* Line 1806 of yacc.c  */
#line 3062 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 262:

/* Line 1806 of yacc.c  */
#line 3088 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 263:

/* Line 1806 of yacc.c  */
#line 3108 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 264:

/* Line 1806 of yacc.c  */
#line 3130 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 265:

/* Line 1806 of yacc.c  */
#line 3132 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
	        sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 266:

/* Line 1806 of yacc.c  */
#line 3148 "sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 267:

/* Line 1806 of yacc.c  */
#line 3160 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 273:

/* Line 1806 of yacc.c  */
#line 3180 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 274:

/* Line 1806 of yacc.c  */
#line 3186 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 275:

/* Line 1806 of yacc.c  */
#line 3199 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 276:

/* Line 1806 of yacc.c  */
#line 3207 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 277:

/* Line 1806 of yacc.c  */
#line 3215 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 282:

/* Line 1806 of yacc.c  */
#line 3233 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 283:

/* Line 1806 of yacc.c  */
#line 3237 "sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 284:

/* Line 1806 of yacc.c  */
#line 3249 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 285:

/* Line 1806 of yacc.c  */
#line 3258 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 286:

/* Line 1806 of yacc.c  */
#line 3262 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 287:

/* Line 1806 of yacc.c  */
#line 3272 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 288:

/* Line 1806 of yacc.c  */
#line 3281 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 290:

/* Line 1806 of yacc.c  */
#line 3296 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 291:

/* Line 1806 of yacc.c  */
#line 3314 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 292:

/* Line 1806 of yacc.c  */
#line 3331 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 293:

/* Line 1806 of yacc.c  */
#line 3332 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 294:

/* Line 1806 of yacc.c  */
#line 3337 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 295:

/* Line 1806 of yacc.c  */
#line 3353 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 296:

/* Line 1806 of yacc.c  */
#line 3369 "sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 297:

/* Line 1806 of yacc.c  */
#line 3376 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 298:

/* Line 1806 of yacc.c  */
#line 3384 "sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 299:

/* Line 1806 of yacc.c  */
#line 3393 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 300:

/* Line 1806 of yacc.c  */
#line 3421 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
	  }
    break;

  case 301:

/* Line 1806 of yacc.c  */
#line 3431 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 302:

/* Line 1806 of yacc.c  */
#line 3433 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
	    /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 303:

/* Line 1806 of yacc.c  */
#line 3449 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 304:

/* Line 1806 of yacc.c  */
#line 3460 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 305:

/* Line 1806 of yacc.c  */
#line 3462 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 306:

/* Line 1806 of yacc.c  */
#line 3481 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 307:

/* Line 1806 of yacc.c  */
#line 3483 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 308:

/* Line 1806 of yacc.c  */
#line 3488 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 309:

/* Line 1806 of yacc.c  */
#line 3490 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 310:

/* Line 1806 of yacc.c  */
#line 3492 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 314:

/* Line 1806 of yacc.c  */
#line 3526 "sql_yacc.yy"
    {}
    break;

  case 315:

/* Line 1806 of yacc.c  */
#line 3528 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 316:

/* Line 1806 of yacc.c  */
#line 3538 "sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 317:

/* Line 1806 of yacc.c  */
#line 3544 "sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 322:

/* Line 1806 of yacc.c  */
#line 3567 "sql_yacc.yy"
    {}
    break;

  case 369:

/* Line 1806 of yacc.c  */
#line 3661 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 370:

/* Line 1806 of yacc.c  */
#line 3669 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 371:

/* Line 1806 of yacc.c  */
#line 3677 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 372:

/* Line 1806 of yacc.c  */
#line 3685 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 373:

/* Line 1806 of yacc.c  */
#line 3697 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 374:

/* Line 1806 of yacc.c  */
#line 3709 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 375:

/* Line 1806 of yacc.c  */
#line 3714 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 376:

/* Line 1806 of yacc.c  */
#line 3719 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 377:

/* Line 1806 of yacc.c  */
#line 3727 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 378:

/* Line 1806 of yacc.c  */
#line 3735 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 379:

/* Line 1806 of yacc.c  */
#line 3743 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 380:

/* Line 1806 of yacc.c  */
#line 3751 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 381:

/* Line 1806 of yacc.c  */
#line 3759 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 382:

/* Line 1806 of yacc.c  */
#line 3767 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 383:

/* Line 1806 of yacc.c  */
#line 3775 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 384:

/* Line 1806 of yacc.c  */
#line 3788 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 385:

/* Line 1806 of yacc.c  */
#line 3801 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 388:

/* Line 1806 of yacc.c  */
#line 3820 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 389:

/* Line 1806 of yacc.c  */
#line 3825 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 390:

/* Line 1806 of yacc.c  */
#line 3837 "sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 391:

/* Line 1806 of yacc.c  */
#line 3839 "sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 392:

/* Line 1806 of yacc.c  */
#line 3889 "sql_yacc.yy"
    {}
    break;

  case 393:

/* Line 1806 of yacc.c  */
#line 3892 "sql_yacc.yy"
    {}
    break;

  case 394:

/* Line 1806 of yacc.c  */
#line 3894 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 395:

/* Line 1806 of yacc.c  */
#line 3908 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 396:

/* Line 1806 of yacc.c  */
#line 3926 "sql_yacc.yy"
    {}
    break;

  case 397:

/* Line 1806 of yacc.c  */
#line 3929 "sql_yacc.yy"
    {
             Select->set_braces(1);
             Lex->create_select_start_with_brace= TRUE;
           }
    break;

  case 398:

/* Line 1806 of yacc.c  */
#line 3933 "sql_yacc.yy"
    {}
    break;

  case 399:

/* Line 1806 of yacc.c  */
#line 3937 "sql_yacc.yy"
    {}
    break;

  case 400:

/* Line 1806 of yacc.c  */
#line 3939 "sql_yacc.yy"
    {
            Select->set_braces(0);
            Lex->create_select_start_with_brace= FALSE;
          }
    break;

  case 401:

/* Line 1806 of yacc.c  */
#line 3943 "sql_yacc.yy"
    {}
    break;

  case 402:

/* Line 1806 of yacc.c  */
#line 3945 "sql_yacc.yy"
    {
            Select->set_braces(1);
            Lex->create_select_start_with_brace= TRUE;
          }
    break;

  case 403:

/* Line 1806 of yacc.c  */
#line 3949 "sql_yacc.yy"
    {}
    break;

  case 404:

/* Line 1806 of yacc.c  */
#line 3977 "sql_yacc.yy"
    {}
    break;

  case 406:

/* Line 1806 of yacc.c  */
#line 3983 "sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX *lex= Lex;
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                       "--skip-partition");
              MYSQL_YYABORT;
            }
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     "partitioning", "--with-partition");
            MYSQL_YYABORT;
#endif

          }
    break;

  case 408:

/* Line 1806 of yacc.c  */
#line 4015 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 409:

/* Line 1806 of yacc.c  */
#line 4027 "sql_yacc.yy"
    {}
    break;

  case 411:

/* Line 1806 of yacc.c  */
#line 4036 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->list_of_part_fields= TRUE;
            lex->part_info->part_type= HASH_PARTITION;
          }
    break;

  case 412:

/* Line 1806 of yacc.c  */
#line 4042 "sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 413:

/* Line 1806 of yacc.c  */
#line 4043 "sql_yacc.yy"
    {}
    break;

  case 414:

/* Line 1806 of yacc.c  */
#line 4045 "sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 415:

/* Line 1806 of yacc.c  */
#line 4046 "sql_yacc.yy"
    {}
    break;

  case 416:

/* Line 1806 of yacc.c  */
#line 4048 "sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 417:

/* Line 1806 of yacc.c  */
#line 4049 "sql_yacc.yy"
    {}
    break;

  case 418:

/* Line 1806 of yacc.c  */
#line 4053 "sql_yacc.yy"
    {}
    break;

  case 419:

/* Line 1806 of yacc.c  */
#line 4055 "sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 420:

/* Line 1806 of yacc.c  */
#line 4059 "sql_yacc.yy"
    {}
    break;

  case 421:

/* Line 1806 of yacc.c  */
#line 4060 "sql_yacc.yy"
    {}
    break;

  case 422:

/* Line 1806 of yacc.c  */
#line 4064 "sql_yacc.yy"
    {}
    break;

  case 423:

/* Line 1806 of yacc.c  */
#line 4065 "sql_yacc.yy"
    {}
    break;

  case 424:

/* Line 1806 of yacc.c  */
#line 4070 "sql_yacc.yy"
    {
            if (Lex->part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 425:

/* Line 1806 of yacc.c  */
#line 4081 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint expr_len= (uint)((yyvsp[(4) - (5)].simple_string) - (yyvsp[(2) - (5)].simple_string)) - 1;
            lex->part_info->list_of_part_fields= FALSE;
            lex->part_info->part_expr= (yyvsp[(3) - (5)].item);
            char *func_string= (char*) sql_memdup((yyvsp[(2) - (5)].simple_string)+1, expr_len);
            if (func_string == NULL)
              MYSQL_YYABORT;
            lex->part_info->part_func_string= func_string;
            lex->part_info->part_func_len= expr_len;
          }
    break;

  case 426:

/* Line 1806 of yacc.c  */
#line 4096 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint expr_len= (uint)((yyvsp[(4) - (5)].simple_string) - (yyvsp[(2) - (5)].simple_string)) - 1;
            lex->part_info->list_of_subpart_fields= FALSE;
            lex->part_info->subpart_expr= (yyvsp[(3) - (5)].item);
            char *func_string= (char*) sql_memdup((yyvsp[(2) - (5)].simple_string)+1, expr_len);
            if (func_string == NULL)
              MYSQL_YYABORT;
            lex->part_info->subpart_func_string= func_string;        
            lex->part_info->subpart_func_len= expr_len;
          }
    break;

  case 427:

/* Line 1806 of yacc.c  */
#line 4111 "sql_yacc.yy"
    {}
    break;

  case 428:

/* Line 1806 of yacc.c  */
#line 4113 "sql_yacc.yy"
    { 
            uint no_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (no_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            lex->part_info->no_parts= no_parts;
            lex->part_info->use_default_no_partitions= FALSE;
          }
    break;

  case 429:

/* Line 1806 of yacc.c  */
#line 4128 "sql_yacc.yy"
    {}
    break;

  case 430:

/* Line 1806 of yacc.c  */
#line 4130 "sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 431:

/* Line 1806 of yacc.c  */
#line 4131 "sql_yacc.yy"
    {}
    break;

  case 432:

/* Line 1806 of yacc.c  */
#line 4134 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->subpart_type= HASH_PARTITION;
            lex->part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 433:

/* Line 1806 of yacc.c  */
#line 4139 "sql_yacc.yy"
    {}
    break;

  case 434:

/* Line 1806 of yacc.c  */
#line 4143 "sql_yacc.yy"
    {}
    break;

  case 435:

/* Line 1806 of yacc.c  */
#line 4144 "sql_yacc.yy"
    {}
    break;

  case 436:

/* Line 1806 of yacc.c  */
#line 4149 "sql_yacc.yy"
    {
            if (Lex->part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 437:

/* Line 1806 of yacc.c  */
#line 4160 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 438:

/* Line 1806 of yacc.c  */
#line 4175 "sql_yacc.yy"
    {}
    break;

  case 439:

/* Line 1806 of yacc.c  */
#line 4177 "sql_yacc.yy"
    {
            uint no_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (no_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->no_subparts= no_parts;
            lex->part_info->use_default_no_subpartitions= FALSE;
          }
    break;

  case 440:

/* Line 1806 of yacc.c  */
#line 4192 "sql_yacc.yy"
    {}
    break;

  case 441:

/* Line 1806 of yacc.c  */
#line 4194 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->no_parts != 0)
            {
              if (part_info->no_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->no_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 442:

/* Line 1806 of yacc.c  */
#line 4216 "sql_yacc.yy"
    {}
    break;

  case 443:

/* Line 1806 of yacc.c  */
#line 4217 "sql_yacc.yy"
    {}
    break;

  case 444:

/* Line 1806 of yacc.c  */
#line 4222 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_no_partitions= FALSE;
          }
    break;

  case 445:

/* Line 1806 of yacc.c  */
#line 4242 "sql_yacc.yy"
    {}
    break;

  case 446:

/* Line 1806 of yacc.c  */
#line 4247 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 447:

/* Line 1806 of yacc.c  */
#line 4257 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (lex->part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (lex->part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= HASH_PARTITION;
          }
    break;

  case 448:

/* Line 1806 of yacc.c  */
#line 4278 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (Lex->part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 449:

/* Line 1806 of yacc.c  */
#line 4293 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (Lex->part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= LIST_PARTITION;
          }
    break;

  case 450:

/* Line 1806 of yacc.c  */
#line 4311 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->part_info->defined_max_value)
            {
              my_parse_error(ER(ER_PARTITION_MAXVALUE_ERROR));
              MYSQL_YYABORT;
            }
            lex->part_info->defined_max_value= TRUE;
            lex->part_info->curr_part_elem->max_value= TRUE;
            lex->part_info->curr_part_elem->range_value= LONGLONG_MAX;
          }
    break;

  case 451:

/* Line 1806 of yacc.c  */
#line 4323 "sql_yacc.yy"
    {
            if (Lex->part_info->defined_max_value)
            {
              my_parse_error(ER(ER_PARTITION_MAXVALUE_ERROR));
              MYSQL_YYABORT;
            }
            if (Lex->part_info->curr_part_elem->has_null_value)
            {
              my_parse_error(ER(ER_NULL_IN_VALUES_LESS_THAN));
              MYSQL_YYABORT;
            }
          }
    break;

  case 454:

/* Line 1806 of yacc.c  */
#line 4344 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (!((yyvsp[(2) - (3)].p_elem_value)->unsigned_flag))
              part_info->curr_part_elem->signed_flag= TRUE;
            part_info->curr_part_elem->range_value= (yyvsp[(2) - (3)].p_elem_value)->value;
          }
    break;

  case 455:

/* Line 1806 of yacc.c  */
#line 4353 "sql_yacc.yy"
    {}
    break;

  case 456:

/* Line 1806 of yacc.c  */
#line 4354 "sql_yacc.yy"
    {}
    break;

  case 457:

/* Line 1806 of yacc.c  */
#line 4359 "sql_yacc.yy"
    {
            part_elem_value *value_ptr= (yyvsp[(1) - (1)].p_elem_value);
            partition_info *part_info= Lex->part_info;
            if (!value_ptr->unsigned_flag)
              part_info->curr_part_elem->signed_flag= TRUE;
            if (!value_ptr->null_value &&
               part_info->curr_part_elem->
                list_val_list.push_back(value_ptr))
            {
              mem_alloc_error(sizeof(part_elem_value));
              MYSQL_YYABORT;
            }
          }
    break;

  case 458:

/* Line 1806 of yacc.c  */
#line 4376 "sql_yacc.yy"
    {
            Item *part_expr= (yyvsp[(1) - (1)].item);
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Name_resolution_context *context= &lex->current_select->context;
            TABLE_LIST *save_list= context->table_list;
            const char *save_where= thd->where;

            context->table_list= 0;
            thd->where= "partition function";

            part_elem_value *value_ptr= 
              (part_elem_value*)sql_alloc(sizeof(part_elem_value));
            if (!value_ptr)
            {
              mem_alloc_error(sizeof(part_elem_value));
              MYSQL_YYABORT;
            }
            if (part_expr->walk(&Item::check_partition_func_processor, 0,
                                NULL))
            {
              my_error(ER_PARTITION_FUNCTION_IS_NOT_ALLOWED, MYF(0));
              MYSQL_YYABORT;
            }
            if (part_expr->fix_fields(YYTHD, (Item**)0) ||
                ((context->table_list= save_list), FALSE) ||
                (!part_expr->const_item()) ||
                (!lex->safe_to_cache_query))
            {
              my_error(ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR, MYF(0));
              MYSQL_YYABORT;
            }
            thd->where= save_where;
            value_ptr->value= part_expr->val_int();
            value_ptr->unsigned_flag= TRUE;
            if (!part_expr->unsigned_flag &&
                value_ptr->value < 0)
              value_ptr->unsigned_flag= FALSE;
            if ((value_ptr->null_value= part_expr->null_value))
            {
              if (Lex->part_info->curr_part_elem->has_null_value)
              {
                my_error(ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              Lex->part_info->curr_part_elem->has_null_value= TRUE;
            }
            else if (part_expr->result_type() != INT_RESULT)
            {
              my_parse_error(ER(ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.p_elem_value)= value_ptr; 
          }
    break;

  case 459:

/* Line 1806 of yacc.c  */
#line 4434 "sql_yacc.yy"
    {
            if (Lex->part_info->no_subparts != 0 &&
                !Lex->part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 460:

/* Line 1806 of yacc.c  */
#line 4447 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (part_info->no_subparts != 0)
            {
              if (part_info->no_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->no_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 461:

/* Line 1806 of yacc.c  */
#line 4473 "sql_yacc.yy"
    {}
    break;

  case 462:

/* Line 1806 of yacc.c  */
#line 4474 "sql_yacc.yy"
    {}
    break;

  case 463:

/* Line 1806 of yacc.c  */
#line 4479 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_no_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 464:

/* Line 1806 of yacc.c  */
#line 4512 "sql_yacc.yy"
    {}
    break;

  case 465:

/* Line 1806 of yacc.c  */
#line 4517 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 466:

/* Line 1806 of yacc.c  */
#line 4521 "sql_yacc.yy"
    {}
    break;

  case 467:

/* Line 1806 of yacc.c  */
#line 4522 "sql_yacc.yy"
    {}
    break;

  case 468:

/* Line 1806 of yacc.c  */
#line 4526 "sql_yacc.yy"
    {}
    break;

  case 469:

/* Line 1806 of yacc.c  */
#line 4527 "sql_yacc.yy"
    {}
    break;

  case 470:

/* Line 1806 of yacc.c  */
#line 4532 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 471:

/* Line 1806 of yacc.c  */
#line 4534 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            lex->part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 472:

/* Line 1806 of yacc.c  */
#line 4540 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 473:

/* Line 1806 of yacc.c  */
#line 4542 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 474:

/* Line 1806 of yacc.c  */
#line 4544 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 475:

/* Line 1806 of yacc.c  */
#line 4546 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 476:

/* Line 1806 of yacc.c  */
#line 4548 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 477:

/* Line 1806 of yacc.c  */
#line 4550 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 478:

/* Line 1806 of yacc.c  */
#line 4559 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->lock_option= TL_READ_DEFAULT;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;

            if (lex->sql_command == SQLCOM_CREATE_TABLE &&
                (lex->create_info.options & HA_LEX_CREATE_IF_NOT_EXISTS))
            {
              Lex_input_stream *lip= YYLIP;

              if (lex->spcont)
                lex->create_select_pos= lip->get_tok_start() -
                  lex->sphead->m_tmp_query;
              else
                lex->create_select_pos= lip->get_tok_start() - lip->get_buf();
              lex->create_select_in_comment= (lip->in_comment == DISCARD_COMMENT);
            }
          }
    break;

  case 479:

/* Line 1806 of yacc.c  */
#line 4588 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 480:

/* Line 1806 of yacc.c  */
#line 4592 "sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 481:

/* Line 1806 of yacc.c  */
#line 4602 "sql_yacc.yy"
    {}
    break;

  case 482:

/* Line 1806 of yacc.c  */
#line 4603 "sql_yacc.yy"
    {}
    break;

  case 483:

/* Line 1806 of yacc.c  */
#line 4607 "sql_yacc.yy"
    {}
    break;

  case 484:

/* Line 1806 of yacc.c  */
#line 4608 "sql_yacc.yy"
    {}
    break;

  case 485:

/* Line 1806 of yacc.c  */
#line 4612 "sql_yacc.yy"
    {}
    break;

  case 486:

/* Line 1806 of yacc.c  */
#line 4613 "sql_yacc.yy"
    {}
    break;

  case 487:

/* Line 1806 of yacc.c  */
#line 4617 "sql_yacc.yy"
    {}
    break;

  case 488:

/* Line 1806 of yacc.c  */
#line 4618 "sql_yacc.yy"
    {}
    break;

  case 489:

/* Line 1806 of yacc.c  */
#line 4622 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 490:

/* Line 1806 of yacc.c  */
#line 4623 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 491:

/* Line 1806 of yacc.c  */
#line 4627 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 492:

/* Line 1806 of yacc.c  */
#line 4628 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 493:

/* Line 1806 of yacc.c  */
#line 4632 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 494:

/* Line 1806 of yacc.c  */
#line 4636 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 495:

/* Line 1806 of yacc.c  */
#line 4637 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 503:

/* Line 1806 of yacc.c  */
#line 4658 "sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 504:

/* Line 1806 of yacc.c  */
#line 4663 "sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            WARN_DEPRECATED(yythd, "6.0", "TYPE=storage_engine",
                            "'ENGINE=storage_engine'");
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 505:

/* Line 1806 of yacc.c  */
#line 4670 "sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 506:

/* Line 1806 of yacc.c  */
#line 4675 "sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 507:

/* Line 1806 of yacc.c  */
#line 4680 "sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 508:

/* Line 1806 of yacc.c  */
#line 4685 "sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 509:

/* Line 1806 of yacc.c  */
#line 4690 "sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 510:

/* Line 1806 of yacc.c  */
#line 4695 "sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 511:

/* Line 1806 of yacc.c  */
#line 4700 "sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 512:

/* Line 1806 of yacc.c  */
#line 4715 "sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 513:

/* Line 1806 of yacc.c  */
#line 4721 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 514:

/* Line 1806 of yacc.c  */
#line 4726 "sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 515:

/* Line 1806 of yacc.c  */
#line 4731 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 516:

/* Line 1806 of yacc.c  */
#line 4736 "sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 517:

/* Line 1806 of yacc.c  */
#line 4741 "sql_yacc.yy"
    {
            /* Move the union list to the merge_list */
            LEX *lex=Lex;
            TABLE_LIST *table_list= lex->select_lex.get_table_list();
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->create_info.merge_list.elements--;
            lex->create_info.merge_list.first= table_list->next_local;
            lex->select_lex.table_list.elements=1;
            lex->select_lex.table_list.next= &(table_list->next_local);
            table_list->next_local= 0;
            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 520:

/* Line 1806 of yacc.c  */
#line 4756 "sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 521:

/* Line 1806 of yacc.c  */
#line 4761 "sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 522:

/* Line 1806 of yacc.c  */
#line 4766 "sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 523:

/* Line 1806 of yacc.c  */
#line 4771 "sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 524:

/* Line 1806 of yacc.c  */
#line 4773 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 525:

/* Line 1806 of yacc.c  */
#line 4775 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 526:

/* Line 1806 of yacc.c  */
#line 4777 "sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 527:

/* Line 1806 of yacc.c  */
#line 4783 "sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 528:

/* Line 1806 of yacc.c  */
#line 4791 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 529:

/* Line 1806 of yacc.c  */
#line 4809 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
              {
                my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                         (yyvsp[(4) - (4)].charset)->name, cinfo->default_table_charset->csname);
                MYSQL_YYABORT;
              }
              Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
              Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 530:

/* Line 1806 of yacc.c  */
#line 4826 "sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 531:

/* Line 1806 of yacc.c  */
#line 4849 "sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 532:

/* Line 1806 of yacc.c  */
#line 4862 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 533:

/* Line 1806 of yacc.c  */
#line 4863 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 534:

/* Line 1806 of yacc.c  */
#line 4864 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 535:

/* Line 1806 of yacc.c  */
#line 4865 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 536:

/* Line 1806 of yacc.c  */
#line 4866 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 537:

/* Line 1806 of yacc.c  */
#line 4867 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 538:

/* Line 1806 of yacc.c  */
#line 4871 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 539:

/* Line 1806 of yacc.c  */
#line 4872 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 540:

/* Line 1806 of yacc.c  */
#line 4873 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 541:

/* Line 1806 of yacc.c  */
#line 4877 "sql_yacc.yy"
    {}
    break;

  case 543:

/* Line 1806 of yacc.c  */
#line 4882 "sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 544:

/* Line 1806 of yacc.c  */
#line 4883 "sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 545:

/* Line 1806 of yacc.c  */
#line 4884 "sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 546:

/* Line 1806 of yacc.c  */
#line 4885 "sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 552:

/* Line 1806 of yacc.c  */
#line 4901 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 553:

/* Line 1806 of yacc.c  */
#line 4908 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].simple_string)))
              MYSQL_YYABORT;
          }
    break;

  case 554:

/* Line 1806 of yacc.c  */
#line 4914 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].simple_string)))
              MYSQL_YYABORT;
          }
    break;

  case 555:

/* Line 1806 of yacc.c  */
#line 4920 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].simple_string)))
              MYSQL_YYABORT;
          }
    break;

  case 556:

/* Line 1806 of yacc.c  */
#line 4926 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].simple_string) ? (yyvsp[(3) - (8)].simple_string) : (yyvsp[(1) - (8)].simple_string)))
              MYSQL_YYABORT;
          }
    break;

  case 557:

/* Line 1806 of yacc.c  */
#line 4931 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            const char *key_name= (yyvsp[(1) - (8)].simple_string) ? (yyvsp[(1) - (8)].simple_string) : (yyvsp[(4) - (8)].simple_string);
            const char *fkey_name = (yyvsp[(4) - (8)].simple_string) ? (yyvsp[(4) - (8)].simple_string) : key_name;
            Key *key= new Foreign_key(fkey_name, lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, key_name, 
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 558:

/* Line 1806 of yacc.c  */
#line 4951 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 559:

/* Line 1806 of yacc.c  */
#line 4955 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 563:

/* Line 1806 of yacc.c  */
#line 4970 "sql_yacc.yy"
    { (yyval.simple_string)=(char*) 0; }
    break;

  case 564:

/* Line 1806 of yacc.c  */
#line 4971 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(1) - (1)].simple_string); }
    break;

  case 565:

/* Line 1806 of yacc.c  */
#line 4975 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(2) - (2)].simple_string); }
    break;

  case 566:

/* Line 1806 of yacc.c  */
#line 4980 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 567:

/* Line 1806 of yacc.c  */
#line 4989 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 568:

/* Line 1806 of yacc.c  */
#line 5002 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 569:

/* Line 1806 of yacc.c  */
#line 5003 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 570:

/* Line 1806 of yacc.c  */
#line 5004 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 571:

/* Line 1806 of yacc.c  */
#line 5006 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 572:

/* Line 1806 of yacc.c  */
#line 5011 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 573:

/* Line 1806 of yacc.c  */
#line 5015 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 574:

/* Line 1806 of yacc.c  */
#line 5020 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 575:

/* Line 1806 of yacc.c  */
#line 5025 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 576:

/* Line 1806 of yacc.c  */
#line 5029 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 577:

/* Line 1806 of yacc.c  */
#line 5034 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 578:

/* Line 1806 of yacc.c  */
#line 5039 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 579:

/* Line 1806 of yacc.c  */
#line 5045 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 580:

/* Line 1806 of yacc.c  */
#line 5050 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 581:

/* Line 1806 of yacc.c  */
#line 5056 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 582:

/* Line 1806 of yacc.c  */
#line 5060 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 583:

/* Line 1806 of yacc.c  */
#line 5065 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 584:

/* Line 1806 of yacc.c  */
#line 5070 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_YEAR; }
    break;

  case 585:

/* Line 1806 of yacc.c  */
#line 5072 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 586:

/* Line 1806 of yacc.c  */
#line 5074 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 587:

/* Line 1806 of yacc.c  */
#line 5076 "sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 588:

/* Line 1806 of yacc.c  */
#line 5089 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 589:

/* Line 1806 of yacc.c  */
#line 5091 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 590:

/* Line 1806 of yacc.c  */
#line 5096 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 591:

/* Line 1806 of yacc.c  */
#line 5101 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 592:

/* Line 1806 of yacc.c  */
#line 5113 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 593:

/* Line 1806 of yacc.c  */
#line 5118 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 594:

/* Line 1806 of yacc.c  */
#line 5123 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 595:

/* Line 1806 of yacc.c  */
#line 5128 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 596:

/* Line 1806 of yacc.c  */
#line 5130 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 597:

/* Line 1806 of yacc.c  */
#line 5132 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 598:

/* Line 1806 of yacc.c  */
#line 5134 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 599:

/* Line 1806 of yacc.c  */
#line 5136 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 600:

/* Line 1806 of yacc.c  */
#line 5138 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 601:

/* Line 1806 of yacc.c  */
#line 5140 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 602:

/* Line 1806 of yacc.c  */
#line 5142 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 603:

/* Line 1806 of yacc.c  */
#line 5144 "sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 604:

/* Line 1806 of yacc.c  */
#line 5146 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 605:

/* Line 1806 of yacc.c  */
#line 5148 "sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 606:

/* Line 1806 of yacc.c  */
#line 5150 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 607:

/* Line 1806 of yacc.c  */
#line 5152 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 608:

/* Line 1806 of yacc.c  */
#line 5154 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 609:

/* Line 1806 of yacc.c  */
#line 5162 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 610:

/* Line 1806 of yacc.c  */
#line 5163 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 611:

/* Line 1806 of yacc.c  */
#line 5165 "sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 612:

/* Line 1806 of yacc.c  */
#line 5169 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 613:

/* Line 1806 of yacc.c  */
#line 5170 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 614:

/* Line 1806 of yacc.c  */
#line 5171 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 615:

/* Line 1806 of yacc.c  */
#line 5172 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 616:

/* Line 1806 of yacc.c  */
#line 5173 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 617:

/* Line 1806 of yacc.c  */
#line 5177 "sql_yacc.yy"
    {}
    break;

  case 618:

/* Line 1806 of yacc.c  */
#line 5181 "sql_yacc.yy"
    {}
    break;

  case 619:

/* Line 1806 of yacc.c  */
#line 5182 "sql_yacc.yy"
    {}
    break;

  case 620:

/* Line 1806 of yacc.c  */
#line 5186 "sql_yacc.yy"
    {}
    break;

  case 621:

/* Line 1806 of yacc.c  */
#line 5187 "sql_yacc.yy"
    {}
    break;

  case 622:

/* Line 1806 of yacc.c  */
#line 5191 "sql_yacc.yy"
    {}
    break;

  case 623:

/* Line 1806 of yacc.c  */
#line 5192 "sql_yacc.yy"
    {}
    break;

  case 624:

/* Line 1806 of yacc.c  */
#line 5193 "sql_yacc.yy"
    {}
    break;

  case 625:

/* Line 1806 of yacc.c  */
#line 5194 "sql_yacc.yy"
    {}
    break;

  case 626:

/* Line 1806 of yacc.c  */
#line 5195 "sql_yacc.yy"
    {}
    break;

  case 627:

/* Line 1806 of yacc.c  */
#line 5199 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 628:

/* Line 1806 of yacc.c  */
#line 5200 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 629:

/* Line 1806 of yacc.c  */
#line 5201 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 630:

/* Line 1806 of yacc.c  */
#line 5202 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 631:

/* Line 1806 of yacc.c  */
#line 5203 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 632:

/* Line 1806 of yacc.c  */
#line 5208 "sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 633:

/* Line 1806 of yacc.c  */
#line 5213 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 634:

/* Line 1806 of yacc.c  */
#line 5215 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 635:

/* Line 1806 of yacc.c  */
#line 5220 "sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 636:

/* Line 1806 of yacc.c  */
#line 5222 "sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 637:

/* Line 1806 of yacc.c  */
#line 5224 "sql_yacc.yy"
    {}
    break;

  case 638:

/* Line 1806 of yacc.c  */
#line 5229 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 639:

/* Line 1806 of yacc.c  */
#line 5237 "sql_yacc.yy"
    {}
    break;

  case 640:

/* Line 1806 of yacc.c  */
#line 5238 "sql_yacc.yy"
    {}
    break;

  case 641:

/* Line 1806 of yacc.c  */
#line 5242 "sql_yacc.yy"
    {}
    break;

  case 642:

/* Line 1806 of yacc.c  */
#line 5243 "sql_yacc.yy"
    {}
    break;

  case 643:

/* Line 1806 of yacc.c  */
#line 5247 "sql_yacc.yy"
    {}
    break;

  case 644:

/* Line 1806 of yacc.c  */
#line 5248 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 645:

/* Line 1806 of yacc.c  */
#line 5249 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 646:

/* Line 1806 of yacc.c  */
#line 5253 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 647:

/* Line 1806 of yacc.c  */
#line 5254 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 648:

/* Line 1806 of yacc.c  */
#line 5255 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 649:

/* Line 1806 of yacc.c  */
#line 5256 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 650:

/* Line 1806 of yacc.c  */
#line 5259 "sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 651:

/* Line 1806 of yacc.c  */
#line 5260 "sql_yacc.yy"
    { }
    break;

  case 652:

/* Line 1806 of yacc.c  */
#line 5263 "sql_yacc.yy"
    {}
    break;

  case 653:

/* Line 1806 of yacc.c  */
#line 5264 "sql_yacc.yy"
    {}
    break;

  case 654:

/* Line 1806 of yacc.c  */
#line 5268 "sql_yacc.yy"
    {}
    break;

  case 655:

/* Line 1806 of yacc.c  */
#line 5269 "sql_yacc.yy"
    {}
    break;

  case 656:

/* Line 1806 of yacc.c  */
#line 5273 "sql_yacc.yy"
    {}
    break;

  case 658:

/* Line 1806 of yacc.c  */
#line 5278 "sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 659:

/* Line 1806 of yacc.c  */
#line 5279 "sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 660:

/* Line 1806 of yacc.c  */
#line 5280 "sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 661:

/* Line 1806 of yacc.c  */
#line 5282 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 662:

/* Line 1806 of yacc.c  */
#line 5288 "sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 663:

/* Line 1806 of yacc.c  */
#line 5290 "sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 664:

/* Line 1806 of yacc.c  */
#line 5296 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 665:

/* Line 1806 of yacc.c  */
#line 5302 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 666:

/* Line 1806 of yacc.c  */
#line 5308 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 667:

/* Line 1806 of yacc.c  */
#line 5313 "sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 668:

/* Line 1806 of yacc.c  */
#line 5315 "sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 669:

/* Line 1806 of yacc.c  */
#line 5331 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 670:

/* Line 1806 of yacc.c  */
#line 5337 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 671:

/* Line 1806 of yacc.c  */
#line 5341 "sql_yacc.yy"
    {}
    break;

  case 672:

/* Line 1806 of yacc.c  */
#line 5342 "sql_yacc.yy"
    {}
    break;

  case 673:

/* Line 1806 of yacc.c  */
#line 5347 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 674:

/* Line 1806 of yacc.c  */
#line 5354 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 675:

/* Line 1806 of yacc.c  */
#line 5358 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 676:

/* Line 1806 of yacc.c  */
#line 5359 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 677:

/* Line 1806 of yacc.c  */
#line 5363 "sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 678:

/* Line 1806 of yacc.c  */
#line 5364 "sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 679:

/* Line 1806 of yacc.c  */
#line 5369 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 680:

/* Line 1806 of yacc.c  */
#line 5377 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 681:

/* Line 1806 of yacc.c  */
#line 5381 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 682:

/* Line 1806 of yacc.c  */
#line 5382 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 683:

/* Line 1806 of yacc.c  */
#line 5387 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 684:

/* Line 1806 of yacc.c  */
#line 5397 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 685:

/* Line 1806 of yacc.c  */
#line 5398 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 686:

/* Line 1806 of yacc.c  */
#line 5402 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 687:

/* Line 1806 of yacc.c  */
#line 5403 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 688:

/* Line 1806 of yacc.c  */
#line 5407 "sql_yacc.yy"
    {}
    break;

  case 689:

/* Line 1806 of yacc.c  */
#line 5408 "sql_yacc.yy"
    {}
    break;

  case 690:

/* Line 1806 of yacc.c  */
#line 5412 "sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 691:

/* Line 1806 of yacc.c  */
#line 5413 "sql_yacc.yy"
    { Lex->charset=&my_charset_latin1; }
    break;

  case 692:

/* Line 1806 of yacc.c  */
#line 5414 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 693:

/* Line 1806 of yacc.c  */
#line 5416 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 694:

/* Line 1806 of yacc.c  */
#line 5424 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 695:

/* Line 1806 of yacc.c  */
#line 5425 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 696:

/* Line 1806 of yacc.c  */
#line 5429 "sql_yacc.yy"
    { }
    break;

  case 697:

/* Line 1806 of yacc.c  */
#line 5430 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 698:

/* Line 1806 of yacc.c  */
#line 5434 "sql_yacc.yy"
    { Lex->charset= NULL; }
    break;

  case 699:

/* Line 1806 of yacc.c  */
#line 5435 "sql_yacc.yy"
    { Lex->charset=&my_charset_latin1; }
    break;

  case 700:

/* Line 1806 of yacc.c  */
#line 5437 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 701:

/* Line 1806 of yacc.c  */
#line 5445 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (2)].charset); }
    break;

  case 704:

/* Line 1806 of yacc.c  */
#line 5455 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->fk_delete_opt= lex->fk_update_opt= lex->fk_match_option= 0;
            lex->ref_list.empty();
          }
    break;

  case 705:

/* Line 1806 of yacc.c  */
#line 5461 "sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (4)].table);
          }
    break;

  case 706:

/* Line 1806 of yacc.c  */
#line 5467 "sql_yacc.yy"
    {}
    break;

  case 707:

/* Line 1806 of yacc.c  */
#line 5468 "sql_yacc.yy"
    {}
    break;

  case 708:

/* Line 1806 of yacc.c  */
#line 5473 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str).str);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 709:

/* Line 1806 of yacc.c  */
#line 5480 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str).str);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 710:

/* Line 1806 of yacc.c  */
#line 5489 "sql_yacc.yy"
    {}
    break;

  case 711:

/* Line 1806 of yacc.c  */
#line 5490 "sql_yacc.yy"
    {}
    break;

  case 712:

/* Line 1806 of yacc.c  */
#line 5494 "sql_yacc.yy"
    {}
    break;

  case 713:

/* Line 1806 of yacc.c  */
#line 5495 "sql_yacc.yy"
    {}
    break;

  case 714:

/* Line 1806 of yacc.c  */
#line 5499 "sql_yacc.yy"
    { Lex->fk_delete_opt= (yyvsp[(3) - (3)].num); }
    break;

  case 715:

/* Line 1806 of yacc.c  */
#line 5500 "sql_yacc.yy"
    { Lex->fk_update_opt= (yyvsp[(3) - (3)].num); }
    break;

  case 716:

/* Line 1806 of yacc.c  */
#line 5501 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 717:

/* Line 1806 of yacc.c  */
#line 5502 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 718:

/* Line 1806 of yacc.c  */
#line 5503 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 719:

/* Line 1806 of yacc.c  */
#line 5507 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 720:

/* Line 1806 of yacc.c  */
#line 5508 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 721:

/* Line 1806 of yacc.c  */
#line 5509 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 722:

/* Line 1806 of yacc.c  */
#line 5510 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 723:

/* Line 1806 of yacc.c  */
#line 5511 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 724:

/* Line 1806 of yacc.c  */
#line 5515 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 725:

/* Line 1806 of yacc.c  */
#line 5519 "sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 726:

/* Line 1806 of yacc.c  */
#line 5520 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 727:

/* Line 1806 of yacc.c  */
#line 5524 "sql_yacc.yy"
    {}
    break;

  case 728:

/* Line 1806 of yacc.c  */
#line 5525 "sql_yacc.yy"
    {}
    break;

  case 729:

/* Line 1806 of yacc.c  */
#line 5529 "sql_yacc.yy"
    {}
    break;

  case 731:

/* Line 1806 of yacc.c  */
#line 5534 "sql_yacc.yy"
    {}
    break;

  case 732:

/* Line 1806 of yacc.c  */
#line 5535 "sql_yacc.yy"
    {}
    break;

  case 733:

/* Line 1806 of yacc.c  */
#line 5536 "sql_yacc.yy"
    {}
    break;

  case 734:

/* Line 1806 of yacc.c  */
#line 5540 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 735:

/* Line 1806 of yacc.c  */
#line 5541 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 736:

/* Line 1806 of yacc.c  */
#line 5545 "sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 737:

/* Line 1806 of yacc.c  */
#line 5550 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 738:

/* Line 1806 of yacc.c  */
#line 5562 "sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 741:

/* Line 1806 of yacc.c  */
#line 5579 "sql_yacc.yy"
    {}
    break;

  case 743:

/* Line 1806 of yacc.c  */
#line 5584 "sql_yacc.yy"
    {}
    break;

  case 745:

/* Line 1806 of yacc.c  */
#line 5589 "sql_yacc.yy"
    {}
    break;

  case 753:

/* Line 1806 of yacc.c  */
#line 5609 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 754:

/* Line 1806 of yacc.c  */
#line 5610 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 755:

/* Line 1806 of yacc.c  */
#line 5615 "sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 760:

/* Line 1806 of yacc.c  */
#line 5630 "sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 761:

/* Line 1806 of yacc.c  */
#line 5642 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 762:

/* Line 1806 of yacc.c  */
#line 5643 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 763:

/* Line 1806 of yacc.c  */
#line 5644 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 764:

/* Line 1806 of yacc.c  */
#line 5648 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 765:

/* Line 1806 of yacc.c  */
#line 5649 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 766:

/* Line 1806 of yacc.c  */
#line 5654 "sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str).str);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 767:

/* Line 1806 of yacc.c  */
#line 5660 "sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str).str,(uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 768:

/* Line 1806 of yacc.c  */
#line 5673 "sql_yacc.yy"
    { (yyval.simple_string)=(char*) 0; /* Default length */ }
    break;

  case 769:

/* Line 1806 of yacc.c  */
#line 5674 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 770:

/* Line 1806 of yacc.c  */
#line 5678 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 771:

/* Line 1806 of yacc.c  */
#line 5679 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 772:

/* Line 1806 of yacc.c  */
#line 5683 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 773:

/* Line 1806 of yacc.c  */
#line 5684 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 774:

/* Line 1806 of yacc.c  */
#line 5692 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 775:

/* Line 1806 of yacc.c  */
#line 5715 "sql_yacc.yy"
    {}
    break;

  case 776:

/* Line 1806 of yacc.c  */
#line 5717 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 777:

/* Line 1806 of yacc.c  */
#line 5722 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 778:

/* Line 1806 of yacc.c  */
#line 5731 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 779:

/* Line 1806 of yacc.c  */
#line 5742 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 780:

/* Line 1806 of yacc.c  */
#line 5753 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 781:

/* Line 1806 of yacc.c  */
#line 5760 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 782:

/* Line 1806 of yacc.c  */
#line 5771 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 783:

/* Line 1806 of yacc.c  */
#line 5778 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 784:

/* Line 1806 of yacc.c  */
#line 5789 "sql_yacc.yy"
    {}
    break;

  case 785:

/* Line 1806 of yacc.c  */
#line 5796 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 786:

/* Line 1806 of yacc.c  */
#line 5808 "sql_yacc.yy"
    {}
    break;

  case 787:

/* Line 1806 of yacc.c  */
#line 5810 "sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 788:

/* Line 1806 of yacc.c  */
#line 5830 "sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 789:

/* Line 1806 of yacc.c  */
#line 5843 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 790:

/* Line 1806 of yacc.c  */
#line 5848 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 791:

/* Line 1806 of yacc.c  */
#line 5853 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 792:

/* Line 1806 of yacc.c  */
#line 5858 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 793:

/* Line 1806 of yacc.c  */
#line 5863 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 794:

/* Line 1806 of yacc.c  */
#line 5872 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 795:

/* Line 1806 of yacc.c  */
#line 5873 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 796:

/* Line 1806 of yacc.c  */
#line 5874 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 797:

/* Line 1806 of yacc.c  */
#line 5875 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 798:

/* Line 1806 of yacc.c  */
#line 5879 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 799:

/* Line 1806 of yacc.c  */
#line 5881 "sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 800:

/* Line 1806 of yacc.c  */
#line 5892 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 801:

/* Line 1806 of yacc.c  */
#line 5893 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 802:

/* Line 1806 of yacc.c  */
#line 5897 "sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 803:

/* Line 1806 of yacc.c  */
#line 5898 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 805:

/* Line 1806 of yacc.c  */
#line 5903 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 806:

/* Line 1806 of yacc.c  */
#line 5904 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 812:

/* Line 1806 of yacc.c  */
#line 5921 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 813:

/* Line 1806 of yacc.c  */
#line 5926 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 814:

/* Line 1806 of yacc.c  */
#line 5933 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 816:

/* Line 1806 of yacc.c  */
#line 5943 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 817:

/* Line 1806 of yacc.c  */
#line 5951 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_CHECK;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->check_opt.init();
          }
    break;

  case 819:

/* Line 1806 of yacc.c  */
#line 5960 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 821:

/* Line 1806 of yacc.c  */
#line 5969 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.no_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 823:

/* Line 1806 of yacc.c  */
#line 5980 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 824:

/* Line 1806 of yacc.c  */
#line 5987 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 826:

/* Line 1806 of yacc.c  */
#line 5995 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 827:

/* Line 1806 of yacc.c  */
#line 6007 "sql_yacc.yy"
    {}
    break;

  case 829:

/* Line 1806 of yacc.c  */
#line 6013 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= lex->part_info->partitions.elements;
          }
    break;

  case 830:

/* Line 1806 of yacc.c  */
#line 6018 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 831:

/* Line 1806 of yacc.c  */
#line 6026 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 833:

/* Line 1806 of yacc.c  */
#line 6041 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 834:

/* Line 1806 of yacc.c  */
#line 6045 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 835:

/* Line 1806 of yacc.c  */
#line 6049 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= lex->part_info->partitions.elements;
          }
    break;

  case 836:

/* Line 1806 of yacc.c  */
#line 6056 "sql_yacc.yy"
    {}
    break;

  case 837:

/* Line 1806 of yacc.c  */
#line 6057 "sql_yacc.yy"
    {}
    break;

  case 838:

/* Line 1806 of yacc.c  */
#line 6062 "sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 841:

/* Line 1806 of yacc.c  */
#line 6082 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 842:

/* Line 1806 of yacc.c  */
#line 6090 "sql_yacc.yy"
    { }
    break;

  case 843:

/* Line 1806 of yacc.c  */
#line 6092 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 844:

/* Line 1806 of yacc.c  */
#line 6096 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 845:

/* Line 1806 of yacc.c  */
#line 6100 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 847:

/* Line 1806 of yacc.c  */
#line 6107 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 848:

/* Line 1806 of yacc.c  */
#line 6116 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 850:

/* Line 1806 of yacc.c  */
#line 6129 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 851:

/* Line 1806 of yacc.c  */
#line 6138 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 852:

/* Line 1806 of yacc.c  */
#line 6142 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 853:

/* Line 1806 of yacc.c  */
#line 6151 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 854:

/* Line 1806 of yacc.c  */
#line 6160 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 855:

/* Line 1806 of yacc.c  */
#line 6166 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 856:

/* Line 1806 of yacc.c  */
#line 6172 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 857:

/* Line 1806 of yacc.c  */
#line 6181 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 858:

/* Line 1806 of yacc.c  */
#line 6190 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 859:

/* Line 1806 of yacc.c  */
#line 6209 "sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 860:

/* Line 1806 of yacc.c  */
#line 6230 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
          }
    break;

  case 861:

/* Line 1806 of yacc.c  */
#line 6235 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_FORCE;
          }
    break;

  case 862:

/* Line 1806 of yacc.c  */
#line 6239 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 863:

/* Line 1806 of yacc.c  */
#line 6246 "sql_yacc.yy"
    {}
    break;

  case 864:

/* Line 1806 of yacc.c  */
#line 6247 "sql_yacc.yy"
    {}
    break;

  case 865:

/* Line 1806 of yacc.c  */
#line 6251 "sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 866:

/* Line 1806 of yacc.c  */
#line 6252 "sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 867:

/* Line 1806 of yacc.c  */
#line 6256 "sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 868:

/* Line 1806 of yacc.c  */
#line 6257 "sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 869:

/* Line 1806 of yacc.c  */
#line 6258 "sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 870:

/* Line 1806 of yacc.c  */
#line 6262 "sql_yacc.yy"
    {}
    break;

  case 871:

/* Line 1806 of yacc.c  */
#line 6263 "sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 872:

/* Line 1806 of yacc.c  */
#line 6264 "sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 873:

/* Line 1806 of yacc.c  */
#line 6268 "sql_yacc.yy"
    {}
    break;

  case 874:

/* Line 1806 of yacc.c  */
#line 6269 "sql_yacc.yy"
    {}
    break;

  case 875:

/* Line 1806 of yacc.c  */
#line 6270 "sql_yacc.yy"
    {}
    break;

  case 876:

/* Line 1806 of yacc.c  */
#line 6271 "sql_yacc.yy"
    {}
    break;

  case 877:

/* Line 1806 of yacc.c  */
#line 6280 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 878:

/* Line 1806 of yacc.c  */
#line 6289 "sql_yacc.yy"
    {}
    break;

  case 879:

/* Line 1806 of yacc.c  */
#line 6291 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 880:

/* Line 1806 of yacc.c  */
#line 6298 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 881:

/* Line 1806 of yacc.c  */
#line 6306 "sql_yacc.yy"
    {}
    break;

  case 882:

/* Line 1806 of yacc.c  */
#line 6308 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 883:

/* Line 1806 of yacc.c  */
#line 6317 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 884:

/* Line 1806 of yacc.c  */
#line 6325 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 885:

/* Line 1806 of yacc.c  */
#line 6327 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 886:

/* Line 1806 of yacc.c  */
#line 6333 "sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 887:

/* Line 1806 of yacc.c  */
#line 6335 "sql_yacc.yy"
    {}
    break;

  case 890:

/* Line 1806 of yacc.c  */
#line 6344 "sql_yacc.yy"
    {}
    break;

  case 891:

/* Line 1806 of yacc.c  */
#line 6345 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 892:

/* Line 1806 of yacc.c  */
#line 6346 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 893:

/* Line 1806 of yacc.c  */
#line 6350 "sql_yacc.yy"
    {}
    break;

  case 894:

/* Line 1806 of yacc.c  */
#line 6352 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 897:

/* Line 1806 of yacc.c  */
#line 6373 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RESTORE_TABLE;
          }
    break;

  case 898:

/* Line 1806 of yacc.c  */
#line 6377 "sql_yacc.yy"
    {
            Lex->backup_dir = (yyvsp[(6) - (6)].lex_str).str;
          }
    break;

  case 899:

/* Line 1806 of yacc.c  */
#line 6384 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BACKUP_TABLE;
          }
    break;

  case 900:

/* Line 1806 of yacc.c  */
#line 6388 "sql_yacc.yy"
    {
            Lex->backup_dir = (yyvsp[(6) - (6)].lex_str).str;
          }
    break;

  case 901:

/* Line 1806 of yacc.c  */
#line 6395 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
          }
    break;

  case 902:

/* Line 1806 of yacc.c  */
#line 6400 "sql_yacc.yy"
    {}
    break;

  case 903:

/* Line 1806 of yacc.c  */
#line 6404 "sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 904:

/* Line 1806 of yacc.c  */
#line 6405 "sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 905:

/* Line 1806 of yacc.c  */
#line 6406 "sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 906:

/* Line 1806 of yacc.c  */
#line 6411 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 907:

/* Line 1806 of yacc.c  */
#line 6419 "sql_yacc.yy"
    {}
    break;

  case 908:

/* Line 1806 of yacc.c  */
#line 6423 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 909:

/* Line 1806 of yacc.c  */
#line 6424 "sql_yacc.yy"
    {}
    break;

  case 910:

/* Line 1806 of yacc.c  */
#line 6428 "sql_yacc.yy"
    {}
    break;

  case 911:

/* Line 1806 of yacc.c  */
#line 6429 "sql_yacc.yy"
    {}
    break;

  case 912:

/* Line 1806 of yacc.c  */
#line 6433 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 913:

/* Line 1806 of yacc.c  */
#line 6434 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 914:

/* Line 1806 of yacc.c  */
#line 6435 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 915:

/* Line 1806 of yacc.c  */
#line 6440 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 916:

/* Line 1806 of yacc.c  */
#line 6448 "sql_yacc.yy"
    {}
    break;

  case 917:

/* Line 1806 of yacc.c  */
#line 6453 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 918:

/* Line 1806 of yacc.c  */
#line 6461 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 919:

/* Line 1806 of yacc.c  */
#line 6474 "sql_yacc.yy"
    {}
    break;

  case 920:

/* Line 1806 of yacc.c  */
#line 6478 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 921:

/* Line 1806 of yacc.c  */
#line 6479 "sql_yacc.yy"
    {}
    break;

  case 922:

/* Line 1806 of yacc.c  */
#line 6483 "sql_yacc.yy"
    {}
    break;

  case 923:

/* Line 1806 of yacc.c  */
#line 6484 "sql_yacc.yy"
    {}
    break;

  case 924:

/* Line 1806 of yacc.c  */
#line 6488 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 925:

/* Line 1806 of yacc.c  */
#line 6489 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 926:

/* Line 1806 of yacc.c  */
#line 6490 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 927:

/* Line 1806 of yacc.c  */
#line 6491 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 928:

/* Line 1806 of yacc.c  */
#line 6492 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 929:

/* Line 1806 of yacc.c  */
#line 6493 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 930:

/* Line 1806 of yacc.c  */
#line 6498 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 931:

/* Line 1806 of yacc.c  */
#line 6506 "sql_yacc.yy"
    {}
    break;

  case 932:

/* Line 1806 of yacc.c  */
#line 6510 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 933:

/* Line 1806 of yacc.c  */
#line 6511 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 934:

/* Line 1806 of yacc.c  */
#line 6512 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 935:

/* Line 1806 of yacc.c  */
#line 6517 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 936:

/* Line 1806 of yacc.c  */
#line 6521 "sql_yacc.yy"
    {}
    break;

  case 937:

/* Line 1806 of yacc.c  */
#line 6523 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 938:

/* Line 1806 of yacc.c  */
#line 6530 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 939:

/* Line 1806 of yacc.c  */
#line 6535 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 942:

/* Line 1806 of yacc.c  */
#line 6548 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE))
              MYSQL_YYABORT;
          }
    break;

  case 943:

/* Line 1806 of yacc.c  */
#line 6561 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 946:

/* Line 1806 of yacc.c  */
#line 6575 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ, 
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 947:

/* Line 1806 of yacc.c  */
#line 6583 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 948:

/* Line 1806 of yacc.c  */
#line 6584 "sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 949:

/* Line 1806 of yacc.c  */
#line 6589 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
          }
    break;

  case 950:

/* Line 1806 of yacc.c  */
#line 6594 "sql_yacc.yy"
    {}
    break;

  case 953:

/* Line 1806 of yacc.c  */
#line 6604 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 954:

/* Line 1806 of yacc.c  */
#line 6612 "sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        global_system_variables.old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 956:

/* Line 1806 of yacc.c  */
#line 6623 "sql_yacc.yy"
    { }
    break;

  case 958:

/* Line 1806 of yacc.c  */
#line 6629 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 959:

/* Line 1806 of yacc.c  */
#line 6630 "sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 960:

/* Line 1806 of yacc.c  */
#line 6640 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 963:

/* Line 1806 of yacc.c  */
#line 6654 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (sel->set_braces(1))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                !sel->master_unit()->first_select()->braces &&
                sel->master_unit()->first_select()->linkage ==
                UNION_TYPE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                sel->master_unit()->fake_select_lex)
            {
 	       my_error(ER_WRONG_USAGE, MYF(0),
                        "CUBE/ROLLUP", "ORDER BY");
               MYSQL_YYABORT;
            }
            /* select in braces, can't contain global parameters */
            if (sel->master_unit()->fake_select_lex)
              sel->master_unit()->global_parameters=
                 sel->master_unit()->fake_select_lex;
          }
    break;

  case 965:

/* Line 1806 of yacc.c  */
#line 6688 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 967:

/* Line 1806 of yacc.c  */
#line 6707 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 968:

/* Line 1806 of yacc.c  */
#line 6715 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 970:

/* Line 1806 of yacc.c  */
#line 6722 "sql_yacc.yy"
    {}
    break;

  case 975:

/* Line 1806 of yacc.c  */
#line 6732 "sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table= 
                (TABLE_LIST *) Select->table_list.first;
          }
    break;

  case 978:

/* Line 1806 of yacc.c  */
#line 6747 "sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 981:

/* Line 1806 of yacc.c  */
#line 6762 "sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 982:

/* Line 1806 of yacc.c  */
#line 6764 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Lex->lock_option=  TL_READ_HIGH_PRIORITY;
            Lex->current_select->lock_option= TL_READ_HIGH_PRIORITY;
          }
    break;

  case 983:

/* Line 1806 of yacc.c  */
#line 6770 "sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 984:

/* Line 1806 of yacc.c  */
#line 6771 "sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 985:

/* Line 1806 of yacc.c  */
#line 6772 "sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 986:

/* Line 1806 of yacc.c  */
#line 6774 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 987:

/* Line 1806 of yacc.c  */
#line 6780 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 988:

/* Line 1806 of yacc.c  */
#line 6786 "sql_yacc.yy"
    {
            Lex->safe_to_cache_query=0;
            Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
          }
    break;

  case 989:

/* Line 1806 of yacc.c  */
#line 6792 "sql_yacc.yy"
    {
            /*
             Honor this flag only if SQL_NO_CACHE wasn't specified AND
             we are parsing the outermost SELECT in the query.
            */
            if (Lex->select_lex.sql_cache != SELECT_LEX::SQL_NO_CACHE &&
                Lex->current_select == &Lex->select_lex)
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 990:

/* Line 1806 of yacc.c  */
#line 6805 "sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 992:

/* Line 1806 of yacc.c  */
#line 6811 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->current_select->lock_option= TL_WRITE;
            lex->safe_to_cache_query=0;
            lex->protect_against_global_read_lock= TRUE;
          }
    break;

  case 993:

/* Line 1806 of yacc.c  */
#line 6819 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->current_select->lock_option= TL_READ_WITH_SHARED_LOCKS;
            lex->safe_to_cache_query=0;
          }
    break;

  case 996:

/* Line 1806 of yacc.c  */
#line 6832 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 997:

/* Line 1806 of yacc.c  */
#line 6847 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 998:

/* Line 1806 of yacc.c  */
#line 6872 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 999:

/* Line 1806 of yacc.c  */
#line 6878 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1000:

/* Line 1806 of yacc.c  */
#line 6884 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); /* table.* */ }
    break;

  case 1001:

/* Line 1806 of yacc.c  */
#line 6885 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1002:

/* Line 1806 of yacc.c  */
#line 6889 "sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1003:

/* Line 1806 of yacc.c  */
#line 6890 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1004:

/* Line 1806 of yacc.c  */
#line 6891 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1005:

/* Line 1806 of yacc.c  */
#line 6892 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1006:

/* Line 1806 of yacc.c  */
#line 6893 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1007:

/* Line 1806 of yacc.c  */
#line 6897 "sql_yacc.yy"
    {}
    break;

  case 1008:

/* Line 1806 of yacc.c  */
#line 6898 "sql_yacc.yy"
    {}
    break;

  case 1009:

/* Line 1806 of yacc.c  */
#line 6904 "sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1010:

/* Line 1806 of yacc.c  */
#line 6955 "sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_cond_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1011:

/* Line 1806 of yacc.c  */
#line 6962 "sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1012:

/* Line 1806 of yacc.c  */
#line 7005 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1013:

/* Line 1806 of yacc.c  */
#line 7011 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1014:

/* Line 1806 of yacc.c  */
#line 7017 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1015:

/* Line 1806 of yacc.c  */
#line 7023 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1016:

/* Line 1806 of yacc.c  */
#line 7029 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1017:

/* Line 1806 of yacc.c  */
#line 7035 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1018:

/* Line 1806 of yacc.c  */
#line 7041 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1020:

/* Line 1806 of yacc.c  */
#line 7051 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1021:

/* Line 1806 of yacc.c  */
#line 7057 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1022:

/* Line 1806 of yacc.c  */
#line 7063 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1023:

/* Line 1806 of yacc.c  */
#line 7069 "sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1024:

/* Line 1806 of yacc.c  */
#line 7075 "sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1026:

/* Line 1806 of yacc.c  */
#line 7085 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1027:

/* Line 1806 of yacc.c  */
#line 7091 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1028:

/* Line 1806 of yacc.c  */
#line 7101 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1029:

/* Line 1806 of yacc.c  */
#line 7107 "sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1030:

/* Line 1806 of yacc.c  */
#line 7115 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1031:

/* Line 1806 of yacc.c  */
#line 7121 "sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1032:

/* Line 1806 of yacc.c  */
#line 7131 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1033:

/* Line 1806 of yacc.c  */
#line 7137 "sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1034:

/* Line 1806 of yacc.c  */
#line 7146 "sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1035:

/* Line 1806 of yacc.c  */
#line 7156 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1036:

/* Line 1806 of yacc.c  */
#line 7162 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1037:

/* Line 1806 of yacc.c  */
#line 7172 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1038:

/* Line 1806 of yacc.c  */
#line 7178 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1040:

/* Line 1806 of yacc.c  */
#line 7191 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1041:

/* Line 1806 of yacc.c  */
#line 7197 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1042:

/* Line 1806 of yacc.c  */
#line 7203 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1043:

/* Line 1806 of yacc.c  */
#line 7209 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1044:

/* Line 1806 of yacc.c  */
#line 7215 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1045:

/* Line 1806 of yacc.c  */
#line 7221 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1046:

/* Line 1806 of yacc.c  */
#line 7227 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1047:

/* Line 1806 of yacc.c  */
#line 7233 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1048:

/* Line 1806 of yacc.c  */
#line 7239 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1049:

/* Line 1806 of yacc.c  */
#line 7245 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1050:

/* Line 1806 of yacc.c  */
#line 7251 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1051:

/* Line 1806 of yacc.c  */
#line 7257 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1052:

/* Line 1806 of yacc.c  */
#line 7263 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1053:

/* Line 1806 of yacc.c  */
#line 7269 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1063:

/* Line 1806 of yacc.c  */
#line 7298 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1064:

/* Line 1806 of yacc.c  */
#line 7299 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1065:

/* Line 1806 of yacc.c  */
#line 7300 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1066:

/* Line 1806 of yacc.c  */
#line 7301 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1067:

/* Line 1806 of yacc.c  */
#line 7302 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1068:

/* Line 1806 of yacc.c  */
#line 7303 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1069:

/* Line 1806 of yacc.c  */
#line 7307 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1070:

/* Line 1806 of yacc.c  */
#line 7308 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1076:

/* Line 1806 of yacc.c  */
#line 7318 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1081:

/* Line 1806 of yacc.c  */
#line 7334 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1082:

/* Line 1806 of yacc.c  */
#line 7340 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1083:

/* Line 1806 of yacc.c  */
#line 7344 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1084:

/* Line 1806 of yacc.c  */
#line 7350 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1085:

/* Line 1806 of yacc.c  */
#line 7356 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1086:

/* Line 1806 of yacc.c  */
#line 7362 "sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1087:

/* Line 1806 of yacc.c  */
#line 7368 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1088:

/* Line 1806 of yacc.c  */
#line 7370 "sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1089:

/* Line 1806 of yacc.c  */
#line 7377 "sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1090:

/* Line 1806 of yacc.c  */
#line 7384 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1091:

/* Line 1806 of yacc.c  */
#line 7390 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1092:

/* Line 1806 of yacc.c  */
#line 7392 "sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1093:

/* Line 1806 of yacc.c  */
#line 7401 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1094:

/* Line 1806 of yacc.c  */
#line 7408 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1095:

/* Line 1806 of yacc.c  */
#line 7416 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1096:

/* Line 1806 of yacc.c  */
#line 7422 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1097:

/* Line 1806 of yacc.c  */
#line 7429 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1098:

/* Line 1806 of yacc.c  */
#line 7435 "sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1099:

/* Line 1806 of yacc.c  */
#line 7449 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1100:

/* Line 1806 of yacc.c  */
#line 7457 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1101:

/* Line 1806 of yacc.c  */
#line 7472 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1102:

/* Line 1806 of yacc.c  */
#line 7478 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1103:

/* Line 1806 of yacc.c  */
#line 7484 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe();
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1104:

/* Line 1806 of yacc.c  */
#line 7492 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1105:

/* Line 1806 of yacc.c  */
#line 7498 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1106:

/* Line 1806 of yacc.c  */
#line 7504 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1107:

/* Line 1806 of yacc.c  */
#line 7510 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1108:

/* Line 1806 of yacc.c  */
#line 7516 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1109:

/* Line 1806 of yacc.c  */
#line 7531 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1110:

/* Line 1806 of yacc.c  */
#line 7543 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1111:

/* Line 1806 of yacc.c  */
#line 7549 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1112:

/* Line 1806 of yacc.c  */
#line 7555 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1113:

/* Line 1806 of yacc.c  */
#line 7561 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1114:

/* Line 1806 of yacc.c  */
#line 7567 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1115:

/* Line 1806 of yacc.c  */
#line 7573 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1116:

/* Line 1806 of yacc.c  */
#line 7579 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1117:

/* Line 1806 of yacc.c  */
#line 7585 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1118:

/* Line 1806 of yacc.c  */
#line 7591 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1119:

/* Line 1806 of yacc.c  */
#line 7597 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1120:

/* Line 1806 of yacc.c  */
#line 7603 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1121:

/* Line 1806 of yacc.c  */
#line 7609 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1122:

/* Line 1806 of yacc.c  */
#line 7615 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1123:

/* Line 1806 of yacc.c  */
#line 7621 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1124:

/* Line 1806 of yacc.c  */
#line 7627 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1125:

/* Line 1806 of yacc.c  */
#line 7633 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1126:

/* Line 1806 of yacc.c  */
#line 7639 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe();
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1127:

/* Line 1806 of yacc.c  */
#line 7647 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1128:

/* Line 1806 of yacc.c  */
#line 7668 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1129:

/* Line 1806 of yacc.c  */
#line 7675 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1806 of yacc.c  */
#line 7681 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1131:

/* Line 1806 of yacc.c  */
#line 7688 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1132:

/* Line 1806 of yacc.c  */
#line 7695 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1133:

/* Line 1806 of yacc.c  */
#line 7703 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1134:

/* Line 1806 of yacc.c  */
#line 7710 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1135:

/* Line 1806 of yacc.c  */
#line 7716 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1136:

/* Line 1806 of yacc.c  */
#line 7722 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1137:

/* Line 1806 of yacc.c  */
#line 7728 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1138:

/* Line 1806 of yacc.c  */
#line 7735 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1139:

/* Line 1806 of yacc.c  */
#line 7742 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1140:

/* Line 1806 of yacc.c  */
#line 7748 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1141:

/* Line 1806 of yacc.c  */
#line 7755 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1142:

/* Line 1806 of yacc.c  */
#line 7761 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1143:

/* Line 1806 of yacc.c  */
#line 7767 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1806 of yacc.c  */
#line 7773 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1145:

/* Line 1806 of yacc.c  */
#line 7779 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1146:

/* Line 1806 of yacc.c  */
#line 7785 "sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe();
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local();
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1147:

/* Line 1806 of yacc.c  */
#line 7803 "sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(3) - (4)].item));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1148:

/* Line 1806 of yacc.c  */
#line 7813 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1149:

/* Line 1806 of yacc.c  */
#line 7819 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1150:

/* Line 1806 of yacc.c  */
#line 7825 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1151:

/* Line 1806 of yacc.c  */
#line 7832 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1152:

/* Line 1806 of yacc.c  */
#line 7839 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1153:

/* Line 1806 of yacc.c  */
#line 7854 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1154:

/* Line 1806 of yacc.c  */
#line 7860 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1155:

/* Line 1806 of yacc.c  */
#line 7866 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1156:

/* Line 1806 of yacc.c  */
#line 7872 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1157:

/* Line 1806 of yacc.c  */
#line 7878 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1158:

/* Line 1806 of yacc.c  */
#line 7885 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1159:

/* Line 1806 of yacc.c  */
#line 7891 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1160:

/* Line 1806 of yacc.c  */
#line 7897 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1161:

/* Line 1806 of yacc.c  */
#line 7903 "sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1162:

/* Line 1806 of yacc.c  */
#line 7909 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1163:

/* Line 1806 of yacc.c  */
#line 7921 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1164:

/* Line 1806 of yacc.c  */
#line 7927 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1165:

/* Line 1806 of yacc.c  */
#line 7933 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1166:

/* Line 1806 of yacc.c  */
#line 7939 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1167:

/* Line 1806 of yacc.c  */
#line 7945 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1168:

/* Line 1806 of yacc.c  */
#line 7957 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1169:

/* Line 1806 of yacc.c  */
#line 7963 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1170:

/* Line 1806 of yacc.c  */
#line 7979 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1171:

/* Line 1806 of yacc.c  */
#line 7985 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1172:

/* Line 1806 of yacc.c  */
#line 7992 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1173:

/* Line 1806 of yacc.c  */
#line 7999 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1174:

/* Line 1806 of yacc.c  */
#line 8006 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1175:

/* Line 1806 of yacc.c  */
#line 8013 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1176:

/* Line 1806 of yacc.c  */
#line 8020 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1177:

/* Line 1806 of yacc.c  */
#line 8024 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1178:

/* Line 1806 of yacc.c  */
#line 8043 "sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1179:

/* Line 1806 of yacc.c  */
#line 8062 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1180:

/* Line 1806 of yacc.c  */
#line 8116 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1181:

/* Line 1806 of yacc.c  */
#line 8158 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1182:

/* Line 1806 of yacc.c  */
#line 8160 "sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1183:

/* Line 1806 of yacc.c  */
#line 8164 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1184:

/* Line 1806 of yacc.c  */
#line 8165 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1185:

/* Line 1806 of yacc.c  */
#line 8169 "sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1186:

/* Line 1806 of yacc.c  */
#line 8170 "sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1187:

/* Line 1806 of yacc.c  */
#line 8174 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1188:

/* Line 1806 of yacc.c  */
#line 8175 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1189:

/* Line 1806 of yacc.c  */
#line 8180 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1190:

/* Line 1806 of yacc.c  */
#line 8187 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1191:

/* Line 1806 of yacc.c  */
#line 8195 "sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1192:

/* Line 1806 of yacc.c  */
#line 8221 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1193:

/* Line 1806 of yacc.c  */
#line 8227 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg_distinct((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1194:

/* Line 1806 of yacc.c  */
#line 8233 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1195:

/* Line 1806 of yacc.c  */
#line 8239 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:

/* Line 1806 of yacc.c  */
#line 8245 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1197:

/* Line 1806 of yacc.c  */
#line 8251 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1198:

/* Line 1806 of yacc.c  */
#line 8260 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1199:

/* Line 1806 of yacc.c  */
#line 8266 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1200:

/* Line 1806 of yacc.c  */
#line 8268 "sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1201:

/* Line 1806 of yacc.c  */
#line 8270 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count_distinct(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1202:

/* Line 1806 of yacc.c  */
#line 8276 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1203:

/* Line 1806 of yacc.c  */
#line 8278 "sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1204:

/* Line 1806 of yacc.c  */
#line 8280 "sql_yacc.yy"
    { (yyval.item)= new Item_sum_ordered_checksum(* (yyvsp[(4) - (6)].item_list)); }
    break;

  case 1205:

/* Line 1806 of yacc.c  */
#line 8282 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1206:

/* Line 1806 of yacc.c  */
#line 8284 "sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1207:

/* Line 1806 of yacc.c  */
#line 8286 "sql_yacc.yy"
    { (yyval.item)= new Item_sum_unordered_checksum(* (yyvsp[(4) - (6)].item_list)); }
    break;

  case 1208:

/* Line 1806 of yacc.c  */
#line 8288 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1209:

/* Line 1806 of yacc.c  */
#line 8290 "sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1210:

/* Line 1806 of yacc.c  */
#line 8292 "sql_yacc.yy"
    { (yyval.item)= new Item_func_hash(* (yyvsp[(4) - (6)].item_list)); }
    break;

  case 1211:

/* Line 1806 of yacc.c  */
#line 8294 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1212:

/* Line 1806 of yacc.c  */
#line 8305 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1213:

/* Line 1806 of yacc.c  */
#line 8311 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1214:

/* Line 1806 of yacc.c  */
#line 8317 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1215:

/* Line 1806 of yacc.c  */
#line 8323 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1216:

/* Line 1806 of yacc.c  */
#line 8329 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1217:

/* Line 1806 of yacc.c  */
#line 8335 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1218:

/* Line 1806 of yacc.c  */
#line 8341 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1219:

/* Line 1806 of yacc.c  */
#line 8347 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1220:

/* Line 1806 of yacc.c  */
#line 8353 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum_distinct((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1221:

/* Line 1806 of yacc.c  */
#line 8359 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1222:

/* Line 1806 of yacc.c  */
#line 8363 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
          }
    break;

  case 1223:

/* Line 1806 of yacc.c  */
#line 8377 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1224:

/* Line 1806 of yacc.c  */
#line 8385 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1225:

/* Line 1806 of yacc.c  */
#line 8392 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1226:

/* Line 1806 of yacc.c  */
#line 8402 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1227:

/* Line 1806 of yacc.c  */
#line 8410 "sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe();
          }
    break;

  case 1228:

/* Line 1806 of yacc.c  */
#line 8425 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1229:

/* Line 1806 of yacc.c  */
#line 8426 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1230:

/* Line 1806 of yacc.c  */
#line 8431 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:

/* Line 1806 of yacc.c  */
#line 8436 "sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1232:

/* Line 1806 of yacc.c  */
#line 8441 "sql_yacc.yy"
    {
            Select->gorder_list = NULL;
          }
    break;

  case 1233:

/* Line 1806 of yacc.c  */
#line 8445 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list= new (YYTHD->mem_root)
                                   SQL_I_List<ORDER>(select->order_list);
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
            select->order_list.empty();
          }
    break;

  case 1234:

/* Line 1806 of yacc.c  */
#line 8457 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1235:

/* Line 1806 of yacc.c  */
#line 8466 "sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1236:

/* Line 1806 of yacc.c  */
#line 8474 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1237:

/* Line 1806 of yacc.c  */
#line 8476 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1238:

/* Line 1806 of yacc.c  */
#line 8478 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1239:

/* Line 1806 of yacc.c  */
#line 8480 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1240:

/* Line 1806 of yacc.c  */
#line 8482 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1241:

/* Line 1806 of yacc.c  */
#line 8484 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1242:

/* Line 1806 of yacc.c  */
#line 8486 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1243:

/* Line 1806 of yacc.c  */
#line 8488 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1244:

/* Line 1806 of yacc.c  */
#line 8490 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_TIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1245:

/* Line 1806 of yacc.c  */
#line 8492 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1246:

/* Line 1806 of yacc.c  */
#line 8494 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1247:

/* Line 1806 of yacc.c  */
#line 8498 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1248:

/* Line 1806 of yacc.c  */
#line 8499 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1249:

/* Line 1806 of yacc.c  */
#line 8504 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1250:

/* Line 1806 of yacc.c  */
#line 8511 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1251:

/* Line 1806 of yacc.c  */
#line 8518 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1252:

/* Line 1806 of yacc.c  */
#line 8519 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1253:

/* Line 1806 of yacc.c  */
#line 8524 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1254:

/* Line 1806 of yacc.c  */
#line 8531 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1255:

/* Line 1806 of yacc.c  */
#line 8538 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1256:

/* Line 1806 of yacc.c  */
#line 8539 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1257:

/* Line 1806 of yacc.c  */
#line 8543 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1258:

/* Line 1806 of yacc.c  */
#line 8544 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1259:

/* Line 1806 of yacc.c  */
#line 8549 "sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1260:

/* Line 1806 of yacc.c  */
#line 8557 "sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1261:

/* Line 1806 of yacc.c  */
#line 8566 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1262:

/* Line 1806 of yacc.c  */
#line 8568 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1806 of yacc.c  */
#line 8576 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1264:

/* Line 1806 of yacc.c  */
#line 8587 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1265:

/* Line 1806 of yacc.c  */
#line 8588 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1266:

/* Line 1806 of yacc.c  */
#line 8593 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1267:

/* Line 1806 of yacc.c  */
#line 8595 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1268:

/* Line 1806 of yacc.c  */
#line 8615 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1269:

/* Line 1806 of yacc.c  */
#line 8617 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1270:

/* Line 1806 of yacc.c  */
#line 8620 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1271:

/* Line 1806 of yacc.c  */
#line 8628 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1272:

/* Line 1806 of yacc.c  */
#line 8635 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1273:

/* Line 1806 of yacc.c  */
#line 8643 "sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1274:

/* Line 1806 of yacc.c  */
#line 8651 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1275:

/* Line 1806 of yacc.c  */
#line 8655 "sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1276:

/* Line 1806 of yacc.c  */
#line 8657 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1277:

/* Line 1806 of yacc.c  */
#line 8665 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1278:

/* Line 1806 of yacc.c  */
#line 8673 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1279:

/* Line 1806 of yacc.c  */
#line 8681 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1280:

/* Line 1806 of yacc.c  */
#line 8685 "sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1281:

/* Line 1806 of yacc.c  */
#line 8691 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1282:

/* Line 1806 of yacc.c  */
#line 8701 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1283:

/* Line 1806 of yacc.c  */
#line 8709 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1284:

/* Line 1806 of yacc.c  */
#line 8718 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1285:

/* Line 1806 of yacc.c  */
#line 8722 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1286:

/* Line 1806 of yacc.c  */
#line 8729 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1287:

/* Line 1806 of yacc.c  */
#line 8739 "sql_yacc.yy"
    {}
    break;

  case 1288:

/* Line 1806 of yacc.c  */
#line 8740 "sql_yacc.yy"
    {}
    break;

  case 1289:

/* Line 1806 of yacc.c  */
#line 8741 "sql_yacc.yy"
    {}
    break;

  case 1290:

/* Line 1806 of yacc.c  */
#line 8746 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1291:

/* Line 1806 of yacc.c  */
#line 8751 "sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                Lex->lock_option,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1292:

/* Line 1806 of yacc.c  */
#line 8760 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1293:

/* Line 1806 of yacc.c  */
#line 8782 "sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */

            if (!((yyvsp[(3) - (6)].table_list) || (yyvsp[(6) - (6)].lex_str_ptr)) && (yyvsp[(2) - (6)].select_lex)->embedding &&
                !(yyvsp[(2) - (6)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (6)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(6) - (6)].lex_str_ptr), 0,
                                               TL_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if ((yyvsp[(4) - (6)].num) || (yyvsp[(6) - (6)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (6)].table_list);
            }
          }
    break;

  case 1294:

/* Line 1806 of yacc.c  */
#line 8834 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1295:

/* Line 1806 of yacc.c  */
#line 8840 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1296:

/* Line 1806 of yacc.c  */
#line 8856 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1297:

/* Line 1806 of yacc.c  */
#line 8873 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1299:

/* Line 1806 of yacc.c  */
#line 8880 "sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1300:

/* Line 1806 of yacc.c  */
#line 8885 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (!opt_allow_subqueries)
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                       "--skip-allow-subqueries");
              MYSQL_YYABORT;
            }

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1301:

/* Line 1806 of yacc.c  */
#line 8917 "sql_yacc.yy"
    {}
    break;

  case 1302:

/* Line 1806 of yacc.c  */
#line 8918 "sql_yacc.yy"
    {}
    break;

  case 1303:

/* Line 1806 of yacc.c  */
#line 8923 "sql_yacc.yy"
    {
            (yyval.num)= global_system_variables.old_mode ? 
                  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1304:

/* Line 1806 of yacc.c  */
#line 8927 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1305:

/* Line 1806 of yacc.c  */
#line 8928 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1306:

/* Line 1806 of yacc.c  */
#line 8929 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1307:

/* Line 1806 of yacc.c  */
#line 8933 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1308:

/* Line 1806 of yacc.c  */
#line 8934 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1309:

/* Line 1806 of yacc.c  */
#line 8939 "sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1311:

/* Line 1806 of yacc.c  */
#line 8944 "sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1316:

/* Line 1806 of yacc.c  */
#line 8957 "sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1318:

/* Line 1806 of yacc.c  */
#line 8961 "sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1320:

/* Line 1806 of yacc.c  */
#line 8966 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1321:

/* Line 1806 of yacc.c  */
#line 8967 "sql_yacc.yy"
    {}
    break;

  case 1322:

/* Line 1806 of yacc.c  */
#line 8972 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1323:

/* Line 1806 of yacc.c  */
#line 8974 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1326:

/* Line 1806 of yacc.c  */
#line 8984 "sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1327:

/* Line 1806 of yacc.c  */
#line 8995 "sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1328:

/* Line 1806 of yacc.c  */
#line 9007 "sql_yacc.yy"
    {}
    break;

  case 1329:

/* Line 1806 of yacc.c  */
#line 9008 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1330:

/* Line 1806 of yacc.c  */
#line 9009 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1331:

/* Line 1806 of yacc.c  */
#line 9010 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1332:

/* Line 1806 of yacc.c  */
#line 9011 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1333:

/* Line 1806 of yacc.c  */
#line 9012 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1334:

/* Line 1806 of yacc.c  */
#line 9013 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1335:

/* Line 1806 of yacc.c  */
#line 9014 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1336:

/* Line 1806 of yacc.c  */
#line 9015 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1337:

/* Line 1806 of yacc.c  */
#line 9016 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1338:

/* Line 1806 of yacc.c  */
#line 9017 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1339:

/* Line 1806 of yacc.c  */
#line 9018 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1340:

/* Line 1806 of yacc.c  */
#line 9022 "sql_yacc.yy"
    {}
    break;

  case 1341:

/* Line 1806 of yacc.c  */
#line 9023 "sql_yacc.yy"
    { 
                                  (yyval.interval_time_st)=INTERVAL_MICROSECOND; 
                                  /*
                                    FRAC_SECOND was mistakenly implemented with
                                    a wrong resolution. According to the ODBC
                                    standard it should be nanoseconds, not
                                    microseconds. Changing it to nanoseconds
                                    in MySQL would mean making TIMESTAMPDIFF
                                    and TIMESTAMPADD to return DECIMAL, since
                                    the return value would be too big for BIGINT
                                    Hence we just deprecate the incorrect
                                    implementation without changing its
                                    resolution.
                                  */
                                  WARN_DEPRECATED(yythd, VER_CELOSIA, "FRAC_SECOND", "MICROSECOND");
                                }
    break;

  case 1342:

/* Line 1806 of yacc.c  */
#line 9042 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1343:

/* Line 1806 of yacc.c  */
#line 9043 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1344:

/* Line 1806 of yacc.c  */
#line 9044 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1345:

/* Line 1806 of yacc.c  */
#line 9045 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1346:

/* Line 1806 of yacc.c  */
#line 9046 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1347:

/* Line 1806 of yacc.c  */
#line 9047 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1348:

/* Line 1806 of yacc.c  */
#line 9048 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1349:

/* Line 1806 of yacc.c  */
#line 9049 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1350:

/* Line 1806 of yacc.c  */
#line 9050 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1351:

/* Line 1806 of yacc.c  */
#line 9054 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1352:

/* Line 1806 of yacc.c  */
#line 9055 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1353:

/* Line 1806 of yacc.c  */
#line 9056 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1354:

/* Line 1806 of yacc.c  */
#line 9057 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1358:

/* Line 1806 of yacc.c  */
#line 9067 "sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1359:

/* Line 1806 of yacc.c  */
#line 9069 "sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1362:

/* Line 1806 of yacc.c  */
#line 9082 "sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1363:

/* Line 1806 of yacc.c  */
#line 9084 "sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1364:

/* Line 1806 of yacc.c  */
#line 9088 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1366:

/* Line 1806 of yacc.c  */
#line 9100 "sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1367:

/* Line 1806 of yacc.c  */
#line 9104 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1368:

/* Line 1806 of yacc.c  */
#line 9115 "sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1369:

/* Line 1806 of yacc.c  */
#line 9120 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1372:

/* Line 1806 of yacc.c  */
#line 9142 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1373:

/* Line 1806 of yacc.c  */
#line 9144 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1374:

/* Line 1806 of yacc.c  */
#line 9148 "sql_yacc.yy"
    {}
    break;

  case 1375:

/* Line 1806 of yacc.c  */
#line 9150 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT; /* To be deleted in 5.1 */
          }
    break;

  case 1376:

/* Line 1806 of yacc.c  */
#line 9163 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1380:

/* Line 1806 of yacc.c  */
#line 9190 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1383:

/* Line 1806 of yacc.c  */
#line 9209 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1385:

/* Line 1806 of yacc.c  */
#line 9244 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1386:

/* Line 1806 of yacc.c  */
#line 9246 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1387:

/* Line 1806 of yacc.c  */
#line 9250 "sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1388:

/* Line 1806 of yacc.c  */
#line 9251 "sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1389:

/* Line 1806 of yacc.c  */
#line 9252 "sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1390:

/* Line 1806 of yacc.c  */
#line 9257 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1391:

/* Line 1806 of yacc.c  */
#line 9263 "sql_yacc.yy"
    {}
    break;

  case 1392:

/* Line 1806 of yacc.c  */
#line 9267 "sql_yacc.yy"
    {}
    break;

  case 1393:

/* Line 1806 of yacc.c  */
#line 9268 "sql_yacc.yy"
    {}
    break;

  case 1394:

/* Line 1806 of yacc.c  */
#line 9272 "sql_yacc.yy"
    {}
    break;

  case 1395:

/* Line 1806 of yacc.c  */
#line 9277 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1396:

/* Line 1806 of yacc.c  */
#line 9284 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1397:

/* Line 1806 of yacc.c  */
#line 9291 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1398:

/* Line 1806 of yacc.c  */
#line 9301 "sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1399:

/* Line 1806 of yacc.c  */
#line 9305 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1400:

/* Line 1806 of yacc.c  */
#line 9311 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1401:

/* Line 1806 of yacc.c  */
#line 9317 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1402:

/* Line 1806 of yacc.c  */
#line 9326 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1403:

/* Line 1806 of yacc.c  */
#line 9331 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1404:

/* Line 1806 of yacc.c  */
#line 9339 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1405:

/* Line 1806 of yacc.c  */
#line 9340 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1406:

/* Line 1806 of yacc.c  */
#line 9341 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1407:

/* Line 1806 of yacc.c  */
#line 9342 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1408:

/* Line 1806 of yacc.c  */
#line 9343 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1409:

/* Line 1806 of yacc.c  */
#line 9344 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1410:

/* Line 1806 of yacc.c  */
#line 9348 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1411:

/* Line 1806 of yacc.c  */
#line 9349 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1412:

/* Line 1806 of yacc.c  */
#line 9350 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1413:

/* Line 1806 of yacc.c  */
#line 9351 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1414:

/* Line 1806 of yacc.c  */
#line 9352 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1415:

/* Line 1806 of yacc.c  */
#line 9356 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1416:

/* Line 1806 of yacc.c  */
#line 9357 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1417:

/* Line 1806 of yacc.c  */
#line 9358 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1418:

/* Line 1806 of yacc.c  */
#line 9359 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1419:

/* Line 1806 of yacc.c  */
#line 9360 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1420:

/* Line 1806 of yacc.c  */
#line 9364 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1421:

/* Line 1806 of yacc.c  */
#line 9365 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1422:

/* Line 1806 of yacc.c  */
#line 9366 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1423:

/* Line 1806 of yacc.c  */
#line 9367 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1424:

/* Line 1806 of yacc.c  */
#line 9372 "sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1428:

/* Line 1806 of yacc.c  */
#line 9383 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1430:

/* Line 1806 of yacc.c  */
#line 9413 "sql_yacc.yy"
    {}
    break;

  case 1431:

/* Line 1806 of yacc.c  */
#line 9414 "sql_yacc.yy"
    {}
    break;

  case 1434:

/* Line 1806 of yacc.c  */
#line 9424 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1435:

/* Line 1806 of yacc.c  */
#line 9435 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && 
                  (!(lex->result= new select_dumpvar(lex->nest_level))))
              MYSQL_YYABORT;
          }
    break;

  case 1436:

/* Line 1806 of yacc.c  */
#line 9442 "sql_yacc.yy"
    {}
    break;

  case 1438:

/* Line 1806 of yacc.c  */
#line 9447 "sql_yacc.yy"
    {}
    break;

  case 1439:

/* Line 1806 of yacc.c  */
#line 9452 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1440:

/* Line 1806 of yacc.c  */
#line 9471 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1441:

/* Line 1806 of yacc.c  */
#line 9503 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1443:

/* Line 1806 of yacc.c  */
#line 9515 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange, lex->nest_level)))
              MYSQL_YYABORT;
          }
    break;

  case 1444:

/* Line 1806 of yacc.c  */
#line 9523 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1446:

/* Line 1806 of yacc.c  */
#line 9526 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange, lex->nest_level)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1447:

/* Line 1806 of yacc.c  */
#line 9538 "sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1448:

/* Line 1806 of yacc.c  */
#line 9549 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1449:

/* Line 1806 of yacc.c  */
#line 9555 "sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1450:

/* Line 1806 of yacc.c  */
#line 9566 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (6)].num);
            lex->drop_if_exists= (yyvsp[(4) - (6)].num);
          }
    break;

  case 1451:

/* Line 1806 of yacc.c  */
#line 9572 "sql_yacc.yy"
    {}
    break;

  case 1452:

/* Line 1806 of yacc.c  */
#line 9573 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1453:

/* Line 1806 of yacc.c  */
#line 9587 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1454:

/* Line 1806 of yacc.c  */
#line 9594 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1455:

/* Line 1806 of yacc.c  */
#line 9617 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1456:

/* Line 1806 of yacc.c  */
#line 9638 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1457:

/* Line 1806 of yacc.c  */
#line 9650 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1458:

/* Line 1806 of yacc.c  */
#line 9654 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (5)].num);
          }
    break;

  case 1459:

/* Line 1806 of yacc.c  */
#line 9660 "sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1460:

/* Line 1806 of yacc.c  */
#line 9666 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1461:

/* Line 1806 of yacc.c  */
#line 9673 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1462:

/* Line 1806 of yacc.c  */
#line 9678 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1463:

/* Line 1806 of yacc.c  */
#line 9683 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1466:

/* Line 1806 of yacc.c  */
#line 9698 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1467:

/* Line 1806 of yacc.c  */
#line 9705 "sql_yacc.yy"
    {}
    break;

  case 1468:

/* Line 1806 of yacc.c  */
#line 9706 "sql_yacc.yy"
    { Lex->mapped_user= true; }
    break;

  case 1471:

/* Line 1806 of yacc.c  */
#line 9716 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option ))
              MYSQL_YYABORT;
          }
    break;

  case 1472:

/* Line 1806 of yacc.c  */
#line 9725 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1473:

/* Line 1806 of yacc.c  */
#line 9726 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1474:

/* Line 1806 of yacc.c  */
#line 9730 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1475:

/* Line 1806 of yacc.c  */
#line 9731 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1476:

/* Line 1806 of yacc.c  */
#line 9739 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
            /* for subselects */
            lex->lock_option= TL_READ_DEFAULT;
          }
    break;

  case 1477:

/* Line 1806 of yacc.c  */
#line 9749 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1478:

/* Line 1806 of yacc.c  */
#line 9754 "sql_yacc.yy"
    {}
    break;

  case 1479:

/* Line 1806 of yacc.c  */
#line 9759 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1480:

/* Line 1806 of yacc.c  */
#line 9766 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1481:

/* Line 1806 of yacc.c  */
#line 9771 "sql_yacc.yy"
    {}
    break;

  case 1482:

/* Line 1806 of yacc.c  */
#line 9776 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1483:

/* Line 1806 of yacc.c  */
#line 9788 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1484:

/* Line 1806 of yacc.c  */
#line 9790 "sql_yacc.yy"
    {
            if (!allow_delayed_write()) MYSQL_YYABORT;
            (yyval.lock_type)= TL_WRITE_DELAYED;
          }
    break;

  case 1485:

/* Line 1806 of yacc.c  */
#line 9794 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1486:

/* Line 1806 of yacc.c  */
#line 9798 "sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1487:

/* Line 1806 of yacc.c  */
#line 9800 "sql_yacc.yy"
    {
            if (!allow_delayed_write()) MYSQL_YYABORT;
            (yyval.lock_type)= TL_WRITE_DELAYED;
          }
    break;

  case 1488:

/* Line 1806 of yacc.c  */
#line 9807 "sql_yacc.yy"
    {}
    break;

  case 1489:

/* Line 1806 of yacc.c  */
#line 9808 "sql_yacc.yy"
    {}
    break;

  case 1490:

/* Line 1806 of yacc.c  */
#line 9813 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1491:

/* Line 1806 of yacc.c  */
#line 9821 "sql_yacc.yy"
    {}
    break;

  case 1492:

/* Line 1806 of yacc.c  */
#line 9822 "sql_yacc.yy"
    {}
    break;

  case 1493:

/* Line 1806 of yacc.c  */
#line 9823 "sql_yacc.yy"
    {}
    break;

  case 1494:

/* Line 1806 of yacc.c  */
#line 9825 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1496:

/* Line 1806 of yacc.c  */
#line 9835 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1497:

/* Line 1806 of yacc.c  */
#line 9836 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1498:

/* Line 1806 of yacc.c  */
#line 9840 "sql_yacc.yy"
    {}
    break;

  case 1499:

/* Line 1806 of yacc.c  */
#line 9841 "sql_yacc.yy"
    {}
    break;

  case 1500:

/* Line 1806 of yacc.c  */
#line 9843 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1501:

/* Line 1806 of yacc.c  */
#line 9844 "sql_yacc.yy"
    {}
    break;

  case 1502:

/* Line 1806 of yacc.c  */
#line 9846 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1503:

/* Line 1806 of yacc.c  */
#line 9847 "sql_yacc.yy"
    {}
    break;

  case 1508:

/* Line 1806 of yacc.c  */
#line 9862 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1509:

/* Line 1806 of yacc.c  */
#line 9871 "sql_yacc.yy"
    {}
    break;

  case 1510:

/* Line 1806 of yacc.c  */
#line 9872 "sql_yacc.yy"
    {}
    break;

  case 1511:

/* Line 1806 of yacc.c  */
#line 9876 "sql_yacc.yy"
    {}
    break;

  case 1512:

/* Line 1806 of yacc.c  */
#line 9877 "sql_yacc.yy"
    {}
    break;

  case 1513:

/* Line 1806 of yacc.c  */
#line 9882 "sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1514:

/* Line 1806 of yacc.c  */
#line 9887 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1515:

/* Line 1806 of yacc.c  */
#line 9895 "sql_yacc.yy"
    {}
    break;

  case 1517:

/* Line 1806 of yacc.c  */
#line 9901 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1518:

/* Line 1806 of yacc.c  */
#line 9906 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1519:

/* Line 1806 of yacc.c  */
#line 9913 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1520:

/* Line 1806 of yacc.c  */
#line 9915 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1522:

/* Line 1806 of yacc.c  */
#line 9924 "sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1524:

/* Line 1806 of yacc.c  */
#line 9932 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->lock_option= TL_UNLOCK; /* Will be set later */
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1525:

/* Line 1806 of yacc.c  */
#line 9941 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1526:

/* Line 1806 of yacc.c  */
#line 9959 "sql_yacc.yy"
    {}
    break;

  case 1529:

/* Line 1806 of yacc.c  */
#line 9969 "sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1532:

/* Line 1806 of yacc.c  */
#line 9982 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1533:

/* Line 1806 of yacc.c  */
#line 9991 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1534:

/* Line 1806 of yacc.c  */
#line 9992 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1535:

/* Line 1806 of yacc.c  */
#line 9999 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            lex->lock_option= TL_WRITE_DEFAULT;
            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1536:

/* Line 1806 of yacc.c  */
#line 10007 "sql_yacc.yy"
    {}
    break;

  case 1537:

/* Line 1806 of yacc.c  */
#line 10012 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1538:

/* Line 1806 of yacc.c  */
#line 10018 "sql_yacc.yy"
    {}
    break;

  case 1539:

/* Line 1806 of yacc.c  */
#line 10020 "sql_yacc.yy"
    { mysql_init_multi_delete(Lex); }
    break;

  case 1540:

/* Line 1806 of yacc.c  */
#line 10022 "sql_yacc.yy"
    { 
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1541:

/* Line 1806 of yacc.c  */
#line 10027 "sql_yacc.yy"
    { mysql_init_multi_delete(Lex); }
    break;

  case 1542:

/* Line 1806 of yacc.c  */
#line 10029 "sql_yacc.yy"
    { 
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1543:

/* Line 1806 of yacc.c  */
#line 10036 "sql_yacc.yy"
    {}
    break;

  case 1544:

/* Line 1806 of yacc.c  */
#line 10037 "sql_yacc.yy"
    {}
    break;

  case 1545:

/* Line 1806 of yacc.c  */
#line 10042 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (3)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           (yyvsp[(3) - (3)].lex_str_ptr),
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1546:

/* Line 1806 of yacc.c  */
#line 10054 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (5)].lex_str), (yyvsp[(3) - (5)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           (yyvsp[(5) - (5)].lex_str_ptr), 
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1547:

/* Line 1806 of yacc.c  */
#line 10068 "sql_yacc.yy"
    {}
    break;

  case 1548:

/* Line 1806 of yacc.c  */
#line 10069 "sql_yacc.yy"
    {}
    break;

  case 1549:

/* Line 1806 of yacc.c  */
#line 10073 "sql_yacc.yy"
    {}
    break;

  case 1550:

/* Line 1806 of yacc.c  */
#line 10074 "sql_yacc.yy"
    {}
    break;

  case 1551:

/* Line 1806 of yacc.c  */
#line 10078 "sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1552:

/* Line 1806 of yacc.c  */
#line 10079 "sql_yacc.yy"
    { Lex->lock_option= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1553:

/* Line 1806 of yacc.c  */
#line 10080 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1554:

/* Line 1806 of yacc.c  */
#line 10085 "sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
          }
    break;

  case 1561:

/* Line 1806 of yacc.c  */
#line 10109 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1562:

/* Line 1806 of yacc.c  */
#line 10113 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1563:

/* Line 1806 of yacc.c  */
#line 10117 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1564:

/* Line 1806 of yacc.c  */
#line 10121 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1565:

/* Line 1806 of yacc.c  */
#line 10125 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1566:

/* Line 1806 of yacc.c  */
#line 10129 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1567:

/* Line 1806 of yacc.c  */
#line 10133 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1568:

/* Line 1806 of yacc.c  */
#line 10137 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1569:

/* Line 1806 of yacc.c  */
#line 10141 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1570:

/* Line 1806 of yacc.c  */
#line 10148 "sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1571:

/* Line 1806 of yacc.c  */
#line 10152 "sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1572:

/* Line 1806 of yacc.c  */
#line 10161 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->lock_option= TL_READ;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1573:

/* Line 1806 of yacc.c  */
#line 10170 "sql_yacc.yy"
    {}
    break;

  case 1574:

/* Line 1806 of yacc.c  */
#line 10175 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1575:

/* Line 1806 of yacc.c  */
#line 10182 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1576:

/* Line 1806 of yacc.c  */
#line 10190 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1577:

/* Line 1806 of yacc.c  */
#line 10198 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1578:

/* Line 1806 of yacc.c  */
#line 10206 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1579:

/* Line 1806 of yacc.c  */
#line 10214 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1580:

/* Line 1806 of yacc.c  */
#line 10222 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            WARN_DEPRECATED(yythd, "6.0", "SHOW PLUGIN", "'SHOW PLUGINS'");
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1581:

/* Line 1806 of yacc.c  */
#line 10230 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1582:

/* Line 1806 of yacc.c  */
#line 10237 "sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1583:

/* Line 1806 of yacc.c  */
#line 10239 "sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1584:

/* Line 1806 of yacc.c  */
#line 10241 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1585:

/* Line 1806 of yacc.c  */
#line 10256 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_NEW_MASTER;
            Lex->mi.log_file_name = (yyvsp[(8) - (16)].lex_str).str;
            Lex->mi.pos = (yyvsp[(12) - (16)].ulonglong_number);
            Lex->mi.server_id = (yyvsp[(16) - (16)].ulong_num);
          }
    break;

  case 1586:

/* Line 1806 of yacc.c  */
#line 10263 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1587:

/* Line 1806 of yacc.c  */
#line 10267 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1588:

/* Line 1806 of yacc.c  */
#line 10271 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1590:

/* Line 1806 of yacc.c  */
#line 10276 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_INFO_FOR;
            lex->group_id= (yyvsp[(4) - (4)].ulonglong_number);
          }
    break;

  case 1591:

/* Line 1806 of yacc.c  */
#line 10282 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1592:

/* Line 1806 of yacc.c  */
#line 10291 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_COLUMN_TYPES;
          }
    break;

  case 1593:

/* Line 1806 of yacc.c  */
#line 10296 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            WARN_DEPRECATED(yythd, "6.0", "SHOW TABLE TYPES", "'SHOW [STORAGE] ENGINES'");
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1594:

/* Line 1806 of yacc.c  */
#line 10304 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1595:

/* Line 1806 of yacc.c  */
#line 10311 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1596:

/* Line 1806 of yacc.c  */
#line 10316 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1597:

/* Line 1806 of yacc.c  */
#line 10321 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1598:

/* Line 1806 of yacc.c  */
#line 10326 "sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1599:

/* Line 1806 of yacc.c  */
#line 10328 "sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1600:

/* Line 1806 of yacc.c  */
#line 10330 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1601:

/* Line 1806 of yacc.c  */
#line 10332 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1602:

/* Line 1806 of yacc.c  */
#line 10334 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1603:

/* Line 1806 of yacc.c  */
#line 10336 "sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1604:

/* Line 1806 of yacc.c  */
#line 10343 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_STATSSERVERS_STATUS; }
    break;

  case 1605:

/* Line 1806 of yacc.c  */
#line 10345 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1606:

/* Line 1806 of yacc.c  */
#line 10353 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_ENGINE_STATUS;
            if (!(lex->create_info.db_type=
                  ha_resolve_by_legacy_type(YYTHD, DB_TYPE_INNODB)))
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), "InnoDB");
              MYSQL_YYABORT;
            }
            WARN_DEPRECATED(yythd, "6.0", "SHOW INNODB STATUS", "'SHOW ENGINE INNODB STATUS'");
          }
    break;

  case 1607:

/* Line 1806 of yacc.c  */
#line 10365 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_ENGINE_MUTEX;
            if (!(lex->create_info.db_type=
                  ha_resolve_by_legacy_type(YYTHD, DB_TYPE_INNODB)))
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), "InnoDB");
              MYSQL_YYABORT;
            }
            WARN_DEPRECATED(yythd, "6.0", "SHOW MUTEX STATUS", "'SHOW ENGINE INNODB MUTEX'");
          }
    break;

  case 1608:

/* Line 1806 of yacc.c  */
#line 10377 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1609:

/* Line 1806 of yacc.c  */
#line 10379 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1610:

/* Line 1806 of yacc.c  */
#line 10387 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1611:

/* Line 1806 of yacc.c  */
#line 10394 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1612:

/* Line 1806 of yacc.c  */
#line 10401 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1613:

/* Line 1806 of yacc.c  */
#line 10411 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1614:

/* Line 1806 of yacc.c  */
#line 10418 "sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1615:

/* Line 1806 of yacc.c  */
#line 10424 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1616:

/* Line 1806 of yacc.c  */
#line 10433 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1617:

/* Line 1806 of yacc.c  */
#line 10441 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1618:

/* Line 1806 of yacc.c  */
#line 10445 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1619:

/* Line 1806 of yacc.c  */
#line 10449 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1620:

/* Line 1806 of yacc.c  */
#line 10456 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1621:

/* Line 1806 of yacc.c  */
#line 10463 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1622:

/* Line 1806 of yacc.c  */
#line 10469 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1623:

/* Line 1806 of yacc.c  */
#line 10476 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1624:

/* Line 1806 of yacc.c  */
#line 10483 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_TABLE_STATS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1625:

/* Line 1806 of yacc.c  */
#line 10490 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_USER_STATS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_USER_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1626:

/* Line 1806 of yacc.c  */
#line 10497 "sql_yacc.yy"
    {
#ifdef DBUG_OFF
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#else
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
#endif
          }
    break;

  case 1627:

/* Line 1806 of yacc.c  */
#line 10507 "sql_yacc.yy"
    {
#ifdef DBUG_OFF
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#else
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
#endif
          }
    break;

  case 1628:

/* Line 1806 of yacc.c  */
#line 10517 "sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1629:

/* Line 1806 of yacc.c  */
#line 10525 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1630:

/* Line 1806 of yacc.c  */
#line 10527 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1631:

/* Line 1806 of yacc.c  */
#line 10529 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1636:

/* Line 1806 of yacc.c  */
#line 10543 "sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1637:

/* Line 1806 of yacc.c  */
#line 10544 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1638:

/* Line 1806 of yacc.c  */
#line 10548 "sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1639:

/* Line 1806 of yacc.c  */
#line 10549 "sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1640:

/* Line 1806 of yacc.c  */
#line 10553 "sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1641:

/* Line 1806 of yacc.c  */
#line 10554 "sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1644:

/* Line 1806 of yacc.c  */
#line 10563 "sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1645:

/* Line 1806 of yacc.c  */
#line 10564 "sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1646:

/* Line 1806 of yacc.c  */
#line 10568 "sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1647:

/* Line 1806 of yacc.c  */
#line 10569 "sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1649:

/* Line 1806 of yacc.c  */
#line 10575 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1650:

/* Line 1806 of yacc.c  */
#line 10582 "sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1651:

/* Line 1806 of yacc.c  */
#line 10592 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->lock_option= TL_READ;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1652:

/* Line 1806 of yacc.c  */
#line 10603 "sql_yacc.yy"
    {}
    break;

  case 1653:

/* Line 1806 of yacc.c  */
#line 10605 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1654:

/* Line 1806 of yacc.c  */
#line 10607 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1657:

/* Line 1806 of yacc.c  */
#line 10619 "sql_yacc.yy"
    {}
    break;

  case 1658:

/* Line 1806 of yacc.c  */
#line 10620 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1659:

/* Line 1806 of yacc.c  */
#line 10621 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1660:

/* Line 1806 of yacc.c  */
#line 10625 "sql_yacc.yy"
    {}
    break;

  case 1661:

/* Line 1806 of yacc.c  */
#line 10626 "sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1662:

/* Line 1806 of yacc.c  */
#line 10628 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1663:

/* Line 1806 of yacc.c  */
#line 10642 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1664:

/* Line 1806 of yacc.c  */
#line 10649 "sql_yacc.yy"
    {}
    break;

  case 1667:

/* Line 1806 of yacc.c  */
#line 10659 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLES; }
    break;

  case 1668:

/* Line 1806 of yacc.c  */
#line 10660 "sql_yacc.yy"
    {}
    break;

  case 1669:

/* Line 1806 of yacc.c  */
#line 10662 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLES | REFRESH_READ_LOCK; }
    break;

  case 1670:

/* Line 1806 of yacc.c  */
#line 10664 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1671:

/* Line 1806 of yacc.c  */
#line 10666 "sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1672:

/* Line 1806 of yacc.c  */
#line 10668 "sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1673:

/* Line 1806 of yacc.c  */
#line 10670 "sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1674:

/* Line 1806 of yacc.c  */
#line 10672 "sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1675:

/* Line 1806 of yacc.c  */
#line 10674 "sql_yacc.yy"
    { Lex->type|= REFRESH_GOOGLESTATS; }
    break;

  case 1676:

/* Line 1806 of yacc.c  */
#line 10676 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1677:

/* Line 1806 of yacc.c  */
#line 10678 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1678:

/* Line 1806 of yacc.c  */
#line 10680 "sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1679:

/* Line 1806 of yacc.c  */
#line 10682 "sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1680:

/* Line 1806 of yacc.c  */
#line 10684 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1681:

/* Line 1806 of yacc.c  */
#line 10686 "sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1682:

/* Line 1806 of yacc.c  */
#line 10690 "sql_yacc.yy"
    {}
    break;

  case 1683:

/* Line 1806 of yacc.c  */
#line 10691 "sql_yacc.yy"
    {}
    break;

  case 1684:

/* Line 1806 of yacc.c  */
#line 10696 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1685:

/* Line 1806 of yacc.c  */
#line 10701 "sql_yacc.yy"
    {}
    break;

  case 1688:

/* Line 1806 of yacc.c  */
#line 10710 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1689:

/* Line 1806 of yacc.c  */
#line 10711 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1690:

/* Line 1806 of yacc.c  */
#line 10712 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1691:

/* Line 1806 of yacc.c  */
#line 10717 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1692:

/* Line 1806 of yacc.c  */
#line 10723 "sql_yacc.yy"
    {}
    break;

  case 1694:

/* Line 1806 of yacc.c  */
#line 10732 "sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1695:

/* Line 1806 of yacc.c  */
#line 10736 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1696:

/* Line 1806 of yacc.c  */
#line 10748 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1697:

/* Line 1806 of yacc.c  */
#line 10757 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1698:

/* Line 1806 of yacc.c  */
#line 10758 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1699:

/* Line 1806 of yacc.c  */
#line 10759 "sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1700:

/* Line 1806 of yacc.c  */
#line 10760 "sql_yacc.yy"
    { Lex->type= ONLY_KILL_IDLE; }
    break;

  case 1701:

/* Line 1806 of yacc.c  */
#line 10767 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1702:

/* Line 1806 of yacc.c  */
#line 10778 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD DATA");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1703:

/* Line 1806 of yacc.c  */
#line 10789 "sql_yacc.yy"
    {}
    break;

  case 1704:

/* Line 1806 of yacc.c  */
#line 10791 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            WARN_DEPRECATED(yythd, "6.0", "LOAD TABLE FROM MASTER",
                            "MySQL Administrator (mysqldump, mysql)");
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD TABLE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_LOAD_MASTER_TABLE;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(3) - (5)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1705:

/* Line 1806 of yacc.c  */
#line 10808 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->lock_option= (yyvsp[(1) - (4)].lock_type);
            lex->local_file=  (yyvsp[(2) - (4)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(4) - (4)].lex_str).str, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 1706:

/* Line 1806 of yacc.c  */
#line 10819 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(9) - (9)].table), NULL, TL_OPTION_UPDATING,
                                           lex->lock_option))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1707:

/* Line 1806 of yacc.c  */
#line 10829 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(11) - (11)].charset); }
    break;

  case 1708:

/* Line 1806 of yacc.c  */
#line 10832 "sql_yacc.yy"
    {}
    break;

  case 1709:

/* Line 1806 of yacc.c  */
#line 10834 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_LOAD_MASTER_DATA;
            WARN_DEPRECATED(yythd, "6.0", "LOAD DATA FROM MASTER",
                            "mysqldump or future "
                            "BACKUP/RESTORE DATABASE facility");
          }
    break;

  case 1710:

/* Line 1806 of yacc.c  */
#line 10843 "sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1711:

/* Line 1806 of yacc.c  */
#line 10844 "sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1712:

/* Line 1806 of yacc.c  */
#line 10848 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1713:

/* Line 1806 of yacc.c  */
#line 10850 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1714:

/* Line 1806 of yacc.c  */
#line 10861 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1715:

/* Line 1806 of yacc.c  */
#line 10865 "sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1716:

/* Line 1806 of yacc.c  */
#line 10866 "sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1717:

/* Line 1806 of yacc.c  */
#line 10867 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1722:

/* Line 1806 of yacc.c  */
#line 10882 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1723:

/* Line 1806 of yacc.c  */
#line 10887 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1724:

/* Line 1806 of yacc.c  */
#line 10894 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1725:

/* Line 1806 of yacc.c  */
#line 10899 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1730:

/* Line 1806 of yacc.c  */
#line 10917 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1731:

/* Line 1806 of yacc.c  */
#line 10922 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1733:

/* Line 1806 of yacc.c  */
#line 10931 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1734:

/* Line 1806 of yacc.c  */
#line 10938 "sql_yacc.yy"
    {}
    break;

  case 1735:

/* Line 1806 of yacc.c  */
#line 10939 "sql_yacc.yy"
    {}
    break;

  case 1736:

/* Line 1806 of yacc.c  */
#line 10940 "sql_yacc.yy"
    {}
    break;

  case 1737:

/* Line 1806 of yacc.c  */
#line 10945 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1738:

/* Line 1806 of yacc.c  */
#line 10947 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1739:

/* Line 1806 of yacc.c  */
#line 10951 "sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1740:

/* Line 1806 of yacc.c  */
#line 10953 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1741:

/* Line 1806 of yacc.c  */
#line 10961 "sql_yacc.yy"
    {}
    break;

  case 1742:

/* Line 1806 of yacc.c  */
#line 10962 "sql_yacc.yy"
    {}
    break;

  case 1743:

/* Line 1806 of yacc.c  */
#line 10969 "sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1744:

/* Line 1806 of yacc.c  */
#line 10993 "sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1745:

/* Line 1806 of yacc.c  */
#line 11005 "sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1746:

/* Line 1806 of yacc.c  */
#line 11016 "sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1747:

/* Line 1806 of yacc.c  */
#line 11035 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1748:

/* Line 1806 of yacc.c  */
#line 11043 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1749:

/* Line 1806 of yacc.c  */
#line 11055 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1750:

/* Line 1806 of yacc.c  */
#line 11070 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1751:

/* Line 1806 of yacc.c  */
#line 11090 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1752:

/* Line 1806 of yacc.c  */
#line 11091 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1753:

/* Line 1806 of yacc.c  */
#line 11093 "sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1754:

/* Line 1806 of yacc.c  */
#line 11100 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1755:

/* Line 1806 of yacc.c  */
#line 11101 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1756:

/* Line 1806 of yacc.c  */
#line 11103 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1757:

/* Line 1806 of yacc.c  */
#line 11110 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1758:

/* Line 1806 of yacc.c  */
#line 11116 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1759:

/* Line 1806 of yacc.c  */
#line 11122 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1760:

/* Line 1806 of yacc.c  */
#line 11128 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1761:

/* Line 1806 of yacc.c  */
#line 11134 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1762:

/* Line 1806 of yacc.c  */
#line 11163 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1763:

/* Line 1806 of yacc.c  */
#line 11190 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1764:

/* Line 1806 of yacc.c  */
#line 11191 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1765:

/* Line 1806 of yacc.c  */
#line 11192 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1766:

/* Line 1806 of yacc.c  */
#line 11197 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1767:

/* Line 1806 of yacc.c  */
#line 11207 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1768:

/* Line 1806 of yacc.c  */
#line 11217 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1769:

/* Line 1806 of yacc.c  */
#line 11223 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1770:

/* Line 1806 of yacc.c  */
#line 11232 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1771:

/* Line 1806 of yacc.c  */
#line 11246 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1772:

/* Line 1806 of yacc.c  */
#line 11247 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1773:

/* Line 1806 of yacc.c  */
#line 11252 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1774:

/* Line 1806 of yacc.c  */
#line 11261 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1775:

/* Line 1806 of yacc.c  */
#line 11276 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1776:

/* Line 1806 of yacc.c  */
#line 11281 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1777:

/* Line 1806 of yacc.c  */
#line 11327 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1778:

/* Line 1806 of yacc.c  */
#line 11332 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1779:

/* Line 1806 of yacc.c  */
#line 11349 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1780:

/* Line 1806 of yacc.c  */
#line 11354 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1781:

/* Line 1806 of yacc.c  */
#line 11433 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1782:

/* Line 1806 of yacc.c  */
#line 11458 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1783:

/* Line 1806 of yacc.c  */
#line 11488 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1784:

/* Line 1806 of yacc.c  */
#line 11490 "sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1785:

/* Line 1806 of yacc.c  */
#line 11506 "sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1786:

/* Line 1806 of yacc.c  */
#line 11515 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1787:

/* Line 1806 of yacc.c  */
#line 11520 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1788:

/* Line 1806 of yacc.c  */
#line 11526 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1789:

/* Line 1806 of yacc.c  */
#line 11532 "sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1790:

/* Line 1806 of yacc.c  */
#line 11542 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1791:

/* Line 1806 of yacc.c  */
#line 11548 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1792:

/* Line 1806 of yacc.c  */
#line 11557 "sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1793:

/* Line 1806 of yacc.c  */
#line 11566 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1794:

/* Line 1806 of yacc.c  */
#line 11568 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, (yyvsp[(1) - (1)].lex_str).str + wlen);
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1795:

/* Line 1806 of yacc.c  */
#line 11597 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1796:

/* Line 1806 of yacc.c  */
#line 11613 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1797:

/* Line 1806 of yacc.c  */
#line 11629 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1798:

/* Line 1806 of yacc.c  */
#line 11645 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1799:

/* Line 1806 of yacc.c  */
#line 11647 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1800:

/* Line 1806 of yacc.c  */
#line 11657 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1801:

/* Line 1806 of yacc.c  */
#line 11659 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1802:

/* Line 1806 of yacc.c  */
#line 11669 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1803:

/* Line 1806 of yacc.c  */
#line 11670 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1804:

/* Line 1806 of yacc.c  */
#line 11671 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1805:

/* Line 1806 of yacc.c  */
#line 11676 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->role.str= NULL; (yyval.lex_user)->role.length= 0;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1806:

/* Line 1806 of yacc.c  */
#line 11691 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->role.str= NULL; (yyval.lex_user)->role.length= 0;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 1807:

/* Line 1806 of yacc.c  */
#line 11711 "sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1808:

/* Line 1806 of yacc.c  */
#line 11725 "sql_yacc.yy"
    {}
    break;

  case 1809:

/* Line 1806 of yacc.c  */
#line 11726 "sql_yacc.yy"
    {}
    break;

  case 1810:

/* Line 1806 of yacc.c  */
#line 11727 "sql_yacc.yy"
    {}
    break;

  case 1811:

/* Line 1806 of yacc.c  */
#line 11728 "sql_yacc.yy"
    {}
    break;

  case 1812:

/* Line 1806 of yacc.c  */
#line 11729 "sql_yacc.yy"
    {}
    break;

  case 1813:

/* Line 1806 of yacc.c  */
#line 11730 "sql_yacc.yy"
    {}
    break;

  case 1814:

/* Line 1806 of yacc.c  */
#line 11731 "sql_yacc.yy"
    {}
    break;

  case 1815:

/* Line 1806 of yacc.c  */
#line 11732 "sql_yacc.yy"
    {}
    break;

  case 1816:

/* Line 1806 of yacc.c  */
#line 11733 "sql_yacc.yy"
    {}
    break;

  case 1817:

/* Line 1806 of yacc.c  */
#line 11734 "sql_yacc.yy"
    {}
    break;

  case 1818:

/* Line 1806 of yacc.c  */
#line 11735 "sql_yacc.yy"
    {}
    break;

  case 1819:

/* Line 1806 of yacc.c  */
#line 11736 "sql_yacc.yy"
    {}
    break;

  case 1820:

/* Line 1806 of yacc.c  */
#line 11737 "sql_yacc.yy"
    {}
    break;

  case 1821:

/* Line 1806 of yacc.c  */
#line 11738 "sql_yacc.yy"
    {}
    break;

  case 1822:

/* Line 1806 of yacc.c  */
#line 11739 "sql_yacc.yy"
    {}
    break;

  case 1823:

/* Line 1806 of yacc.c  */
#line 11740 "sql_yacc.yy"
    {}
    break;

  case 1824:

/* Line 1806 of yacc.c  */
#line 11741 "sql_yacc.yy"
    {}
    break;

  case 1825:

/* Line 1806 of yacc.c  */
#line 11742 "sql_yacc.yy"
    {}
    break;

  case 1826:

/* Line 1806 of yacc.c  */
#line 11743 "sql_yacc.yy"
    {}
    break;

  case 1827:

/* Line 1806 of yacc.c  */
#line 11744 "sql_yacc.yy"
    {}
    break;

  case 1828:

/* Line 1806 of yacc.c  */
#line 11745 "sql_yacc.yy"
    {}
    break;

  case 1829:

/* Line 1806 of yacc.c  */
#line 11746 "sql_yacc.yy"
    {}
    break;

  case 1830:

/* Line 1806 of yacc.c  */
#line 11747 "sql_yacc.yy"
    {}
    break;

  case 1831:

/* Line 1806 of yacc.c  */
#line 11748 "sql_yacc.yy"
    {}
    break;

  case 1832:

/* Line 1806 of yacc.c  */
#line 11749 "sql_yacc.yy"
    {}
    break;

  case 1833:

/* Line 1806 of yacc.c  */
#line 11750 "sql_yacc.yy"
    {}
    break;

  case 1834:

/* Line 1806 of yacc.c  */
#line 11751 "sql_yacc.yy"
    {}
    break;

  case 1835:

/* Line 1806 of yacc.c  */
#line 11752 "sql_yacc.yy"
    {}
    break;

  case 1836:

/* Line 1806 of yacc.c  */
#line 11753 "sql_yacc.yy"
    {}
    break;

  case 1837:

/* Line 1806 of yacc.c  */
#line 11754 "sql_yacc.yy"
    {}
    break;

  case 1838:

/* Line 1806 of yacc.c  */
#line 11755 "sql_yacc.yy"
    {}
    break;

  case 1839:

/* Line 1806 of yacc.c  */
#line 11756 "sql_yacc.yy"
    {}
    break;

  case 1840:

/* Line 1806 of yacc.c  */
#line 11757 "sql_yacc.yy"
    {}
    break;

  case 1841:

/* Line 1806 of yacc.c  */
#line 11758 "sql_yacc.yy"
    {}
    break;

  case 1842:

/* Line 1806 of yacc.c  */
#line 11759 "sql_yacc.yy"
    {}
    break;

  case 1843:

/* Line 1806 of yacc.c  */
#line 11760 "sql_yacc.yy"
    {}
    break;

  case 1844:

/* Line 1806 of yacc.c  */
#line 11761 "sql_yacc.yy"
    {}
    break;

  case 1845:

/* Line 1806 of yacc.c  */
#line 11762 "sql_yacc.yy"
    {}
    break;

  case 1846:

/* Line 1806 of yacc.c  */
#line 11763 "sql_yacc.yy"
    {}
    break;

  case 1847:

/* Line 1806 of yacc.c  */
#line 11764 "sql_yacc.yy"
    {}
    break;

  case 1848:

/* Line 1806 of yacc.c  */
#line 11765 "sql_yacc.yy"
    {}
    break;

  case 1849:

/* Line 1806 of yacc.c  */
#line 11766 "sql_yacc.yy"
    {}
    break;

  case 1850:

/* Line 1806 of yacc.c  */
#line 11767 "sql_yacc.yy"
    {}
    break;

  case 1851:

/* Line 1806 of yacc.c  */
#line 11768 "sql_yacc.yy"
    {}
    break;

  case 1852:

/* Line 1806 of yacc.c  */
#line 11769 "sql_yacc.yy"
    {}
    break;

  case 1853:

/* Line 1806 of yacc.c  */
#line 11770 "sql_yacc.yy"
    {}
    break;

  case 1854:

/* Line 1806 of yacc.c  */
#line 11771 "sql_yacc.yy"
    {}
    break;

  case 1855:

/* Line 1806 of yacc.c  */
#line 11772 "sql_yacc.yy"
    {}
    break;

  case 1856:

/* Line 1806 of yacc.c  */
#line 11773 "sql_yacc.yy"
    {}
    break;

  case 1857:

/* Line 1806 of yacc.c  */
#line 11774 "sql_yacc.yy"
    {}
    break;

  case 1858:

/* Line 1806 of yacc.c  */
#line 11775 "sql_yacc.yy"
    {}
    break;

  case 1859:

/* Line 1806 of yacc.c  */
#line 11776 "sql_yacc.yy"
    {}
    break;

  case 1860:

/* Line 1806 of yacc.c  */
#line 11777 "sql_yacc.yy"
    {}
    break;

  case 1861:

/* Line 1806 of yacc.c  */
#line 11778 "sql_yacc.yy"
    {}
    break;

  case 1862:

/* Line 1806 of yacc.c  */
#line 11779 "sql_yacc.yy"
    {}
    break;

  case 1863:

/* Line 1806 of yacc.c  */
#line 11789 "sql_yacc.yy"
    {}
    break;

  case 1864:

/* Line 1806 of yacc.c  */
#line 11790 "sql_yacc.yy"
    {}
    break;

  case 1865:

/* Line 1806 of yacc.c  */
#line 11791 "sql_yacc.yy"
    {}
    break;

  case 1866:

/* Line 1806 of yacc.c  */
#line 11792 "sql_yacc.yy"
    {}
    break;

  case 1867:

/* Line 1806 of yacc.c  */
#line 11793 "sql_yacc.yy"
    {}
    break;

  case 1868:

/* Line 1806 of yacc.c  */
#line 11794 "sql_yacc.yy"
    {}
    break;

  case 1869:

/* Line 1806 of yacc.c  */
#line 11795 "sql_yacc.yy"
    {}
    break;

  case 1870:

/* Line 1806 of yacc.c  */
#line 11796 "sql_yacc.yy"
    {}
    break;

  case 1871:

/* Line 1806 of yacc.c  */
#line 11797 "sql_yacc.yy"
    {}
    break;

  case 1872:

/* Line 1806 of yacc.c  */
#line 11798 "sql_yacc.yy"
    {}
    break;

  case 1873:

/* Line 1806 of yacc.c  */
#line 11799 "sql_yacc.yy"
    {}
    break;

  case 1874:

/* Line 1806 of yacc.c  */
#line 11800 "sql_yacc.yy"
    {}
    break;

  case 1875:

/* Line 1806 of yacc.c  */
#line 11801 "sql_yacc.yy"
    {}
    break;

  case 1876:

/* Line 1806 of yacc.c  */
#line 11802 "sql_yacc.yy"
    {}
    break;

  case 1877:

/* Line 1806 of yacc.c  */
#line 11803 "sql_yacc.yy"
    {}
    break;

  case 1878:

/* Line 1806 of yacc.c  */
#line 11804 "sql_yacc.yy"
    {}
    break;

  case 1879:

/* Line 1806 of yacc.c  */
#line 11805 "sql_yacc.yy"
    {}
    break;

  case 1880:

/* Line 1806 of yacc.c  */
#line 11806 "sql_yacc.yy"
    {}
    break;

  case 1881:

/* Line 1806 of yacc.c  */
#line 11807 "sql_yacc.yy"
    {}
    break;

  case 1882:

/* Line 1806 of yacc.c  */
#line 11808 "sql_yacc.yy"
    {}
    break;

  case 1883:

/* Line 1806 of yacc.c  */
#line 11809 "sql_yacc.yy"
    {}
    break;

  case 1884:

/* Line 1806 of yacc.c  */
#line 11810 "sql_yacc.yy"
    {}
    break;

  case 1885:

/* Line 1806 of yacc.c  */
#line 11811 "sql_yacc.yy"
    {}
    break;

  case 1886:

/* Line 1806 of yacc.c  */
#line 11812 "sql_yacc.yy"
    {}
    break;

  case 1887:

/* Line 1806 of yacc.c  */
#line 11813 "sql_yacc.yy"
    {}
    break;

  case 1888:

/* Line 1806 of yacc.c  */
#line 11814 "sql_yacc.yy"
    {}
    break;

  case 1889:

/* Line 1806 of yacc.c  */
#line 11815 "sql_yacc.yy"
    {}
    break;

  case 1890:

/* Line 1806 of yacc.c  */
#line 11816 "sql_yacc.yy"
    {}
    break;

  case 1891:

/* Line 1806 of yacc.c  */
#line 11817 "sql_yacc.yy"
    {}
    break;

  case 1892:

/* Line 1806 of yacc.c  */
#line 11818 "sql_yacc.yy"
    {}
    break;

  case 1893:

/* Line 1806 of yacc.c  */
#line 11819 "sql_yacc.yy"
    {}
    break;

  case 1894:

/* Line 1806 of yacc.c  */
#line 11820 "sql_yacc.yy"
    {}
    break;

  case 1895:

/* Line 1806 of yacc.c  */
#line 11821 "sql_yacc.yy"
    {}
    break;

  case 1896:

/* Line 1806 of yacc.c  */
#line 11822 "sql_yacc.yy"
    {}
    break;

  case 1897:

/* Line 1806 of yacc.c  */
#line 11823 "sql_yacc.yy"
    {}
    break;

  case 1898:

/* Line 1806 of yacc.c  */
#line 11824 "sql_yacc.yy"
    {}
    break;

  case 1899:

/* Line 1806 of yacc.c  */
#line 11825 "sql_yacc.yy"
    {}
    break;

  case 1900:

/* Line 1806 of yacc.c  */
#line 11826 "sql_yacc.yy"
    {}
    break;

  case 1901:

/* Line 1806 of yacc.c  */
#line 11827 "sql_yacc.yy"
    {}
    break;

  case 1902:

/* Line 1806 of yacc.c  */
#line 11828 "sql_yacc.yy"
    {}
    break;

  case 1903:

/* Line 1806 of yacc.c  */
#line 11829 "sql_yacc.yy"
    {}
    break;

  case 1904:

/* Line 1806 of yacc.c  */
#line 11830 "sql_yacc.yy"
    {}
    break;

  case 1905:

/* Line 1806 of yacc.c  */
#line 11831 "sql_yacc.yy"
    {}
    break;

  case 1906:

/* Line 1806 of yacc.c  */
#line 11832 "sql_yacc.yy"
    {}
    break;

  case 1907:

/* Line 1806 of yacc.c  */
#line 11833 "sql_yacc.yy"
    {}
    break;

  case 1908:

/* Line 1806 of yacc.c  */
#line 11834 "sql_yacc.yy"
    {}
    break;

  case 1909:

/* Line 1806 of yacc.c  */
#line 11835 "sql_yacc.yy"
    {}
    break;

  case 1910:

/* Line 1806 of yacc.c  */
#line 11836 "sql_yacc.yy"
    {}
    break;

  case 1911:

/* Line 1806 of yacc.c  */
#line 11837 "sql_yacc.yy"
    {}
    break;

  case 1912:

/* Line 1806 of yacc.c  */
#line 11838 "sql_yacc.yy"
    {}
    break;

  case 1913:

/* Line 1806 of yacc.c  */
#line 11839 "sql_yacc.yy"
    {}
    break;

  case 1914:

/* Line 1806 of yacc.c  */
#line 11840 "sql_yacc.yy"
    {}
    break;

  case 1915:

/* Line 1806 of yacc.c  */
#line 11841 "sql_yacc.yy"
    {}
    break;

  case 1916:

/* Line 1806 of yacc.c  */
#line 11842 "sql_yacc.yy"
    {}
    break;

  case 1917:

/* Line 1806 of yacc.c  */
#line 11843 "sql_yacc.yy"
    {}
    break;

  case 1918:

/* Line 1806 of yacc.c  */
#line 11844 "sql_yacc.yy"
    {}
    break;

  case 1919:

/* Line 1806 of yacc.c  */
#line 11845 "sql_yacc.yy"
    {}
    break;

  case 1920:

/* Line 1806 of yacc.c  */
#line 11846 "sql_yacc.yy"
    {}
    break;

  case 1921:

/* Line 1806 of yacc.c  */
#line 11847 "sql_yacc.yy"
    {}
    break;

  case 1922:

/* Line 1806 of yacc.c  */
#line 11848 "sql_yacc.yy"
    {}
    break;

  case 1923:

/* Line 1806 of yacc.c  */
#line 11849 "sql_yacc.yy"
    {}
    break;

  case 1924:

/* Line 1806 of yacc.c  */
#line 11850 "sql_yacc.yy"
    {}
    break;

  case 1925:

/* Line 1806 of yacc.c  */
#line 11851 "sql_yacc.yy"
    {}
    break;

  case 1926:

/* Line 1806 of yacc.c  */
#line 11852 "sql_yacc.yy"
    {}
    break;

  case 1927:

/* Line 1806 of yacc.c  */
#line 11853 "sql_yacc.yy"
    {}
    break;

  case 1928:

/* Line 1806 of yacc.c  */
#line 11854 "sql_yacc.yy"
    {}
    break;

  case 1929:

/* Line 1806 of yacc.c  */
#line 11855 "sql_yacc.yy"
    {}
    break;

  case 1930:

/* Line 1806 of yacc.c  */
#line 11856 "sql_yacc.yy"
    {}
    break;

  case 1931:

/* Line 1806 of yacc.c  */
#line 11857 "sql_yacc.yy"
    {}
    break;

  case 1932:

/* Line 1806 of yacc.c  */
#line 11858 "sql_yacc.yy"
    {}
    break;

  case 1933:

/* Line 1806 of yacc.c  */
#line 11859 "sql_yacc.yy"
    {}
    break;

  case 1934:

/* Line 1806 of yacc.c  */
#line 11860 "sql_yacc.yy"
    {}
    break;

  case 1935:

/* Line 1806 of yacc.c  */
#line 11861 "sql_yacc.yy"
    {}
    break;

  case 1936:

/* Line 1806 of yacc.c  */
#line 11862 "sql_yacc.yy"
    {}
    break;

  case 1937:

/* Line 1806 of yacc.c  */
#line 11863 "sql_yacc.yy"
    {}
    break;

  case 1938:

/* Line 1806 of yacc.c  */
#line 11864 "sql_yacc.yy"
    {}
    break;

  case 1939:

/* Line 1806 of yacc.c  */
#line 11865 "sql_yacc.yy"
    {}
    break;

  case 1940:

/* Line 1806 of yacc.c  */
#line 11866 "sql_yacc.yy"
    {}
    break;

  case 1941:

/* Line 1806 of yacc.c  */
#line 11867 "sql_yacc.yy"
    {}
    break;

  case 1942:

/* Line 1806 of yacc.c  */
#line 11868 "sql_yacc.yy"
    {}
    break;

  case 1943:

/* Line 1806 of yacc.c  */
#line 11869 "sql_yacc.yy"
    {}
    break;

  case 1944:

/* Line 1806 of yacc.c  */
#line 11870 "sql_yacc.yy"
    {}
    break;

  case 1945:

/* Line 1806 of yacc.c  */
#line 11871 "sql_yacc.yy"
    {}
    break;

  case 1946:

/* Line 1806 of yacc.c  */
#line 11872 "sql_yacc.yy"
    {}
    break;

  case 1947:

/* Line 1806 of yacc.c  */
#line 11873 "sql_yacc.yy"
    {}
    break;

  case 1948:

/* Line 1806 of yacc.c  */
#line 11874 "sql_yacc.yy"
    {}
    break;

  case 1949:

/* Line 1806 of yacc.c  */
#line 11875 "sql_yacc.yy"
    {}
    break;

  case 1950:

/* Line 1806 of yacc.c  */
#line 11876 "sql_yacc.yy"
    {}
    break;

  case 1951:

/* Line 1806 of yacc.c  */
#line 11877 "sql_yacc.yy"
    {}
    break;

  case 1952:

/* Line 1806 of yacc.c  */
#line 11878 "sql_yacc.yy"
    {}
    break;

  case 1953:

/* Line 1806 of yacc.c  */
#line 11879 "sql_yacc.yy"
    {}
    break;

  case 1954:

/* Line 1806 of yacc.c  */
#line 11880 "sql_yacc.yy"
    {}
    break;

  case 1955:

/* Line 1806 of yacc.c  */
#line 11881 "sql_yacc.yy"
    {}
    break;

  case 1956:

/* Line 1806 of yacc.c  */
#line 11882 "sql_yacc.yy"
    {}
    break;

  case 1957:

/* Line 1806 of yacc.c  */
#line 11883 "sql_yacc.yy"
    {}
    break;

  case 1958:

/* Line 1806 of yacc.c  */
#line 11884 "sql_yacc.yy"
    {}
    break;

  case 1959:

/* Line 1806 of yacc.c  */
#line 11885 "sql_yacc.yy"
    {}
    break;

  case 1960:

/* Line 1806 of yacc.c  */
#line 11886 "sql_yacc.yy"
    {}
    break;

  case 1961:

/* Line 1806 of yacc.c  */
#line 11887 "sql_yacc.yy"
    {}
    break;

  case 1962:

/* Line 1806 of yacc.c  */
#line 11888 "sql_yacc.yy"
    {}
    break;

  case 1963:

/* Line 1806 of yacc.c  */
#line 11889 "sql_yacc.yy"
    {}
    break;

  case 1964:

/* Line 1806 of yacc.c  */
#line 11890 "sql_yacc.yy"
    {}
    break;

  case 1965:

/* Line 1806 of yacc.c  */
#line 11891 "sql_yacc.yy"
    {}
    break;

  case 1966:

/* Line 1806 of yacc.c  */
#line 11892 "sql_yacc.yy"
    {}
    break;

  case 1967:

/* Line 1806 of yacc.c  */
#line 11893 "sql_yacc.yy"
    {}
    break;

  case 1968:

/* Line 1806 of yacc.c  */
#line 11894 "sql_yacc.yy"
    {}
    break;

  case 1969:

/* Line 1806 of yacc.c  */
#line 11895 "sql_yacc.yy"
    {}
    break;

  case 1970:

/* Line 1806 of yacc.c  */
#line 11896 "sql_yacc.yy"
    {}
    break;

  case 1971:

/* Line 1806 of yacc.c  */
#line 11897 "sql_yacc.yy"
    {}
    break;

  case 1972:

/* Line 1806 of yacc.c  */
#line 11898 "sql_yacc.yy"
    {}
    break;

  case 1973:

/* Line 1806 of yacc.c  */
#line 11899 "sql_yacc.yy"
    {}
    break;

  case 1974:

/* Line 1806 of yacc.c  */
#line 11900 "sql_yacc.yy"
    {}
    break;

  case 1975:

/* Line 1806 of yacc.c  */
#line 11901 "sql_yacc.yy"
    {}
    break;

  case 1976:

/* Line 1806 of yacc.c  */
#line 11902 "sql_yacc.yy"
    {}
    break;

  case 1977:

/* Line 1806 of yacc.c  */
#line 11903 "sql_yacc.yy"
    {}
    break;

  case 1978:

/* Line 1806 of yacc.c  */
#line 11904 "sql_yacc.yy"
    {}
    break;

  case 1979:

/* Line 1806 of yacc.c  */
#line 11905 "sql_yacc.yy"
    {}
    break;

  case 1980:

/* Line 1806 of yacc.c  */
#line 11906 "sql_yacc.yy"
    {}
    break;

  case 1981:

/* Line 1806 of yacc.c  */
#line 11907 "sql_yacc.yy"
    {}
    break;

  case 1982:

/* Line 1806 of yacc.c  */
#line 11908 "sql_yacc.yy"
    {}
    break;

  case 1983:

/* Line 1806 of yacc.c  */
#line 11909 "sql_yacc.yy"
    {}
    break;

  case 1984:

/* Line 1806 of yacc.c  */
#line 11910 "sql_yacc.yy"
    {}
    break;

  case 1985:

/* Line 1806 of yacc.c  */
#line 11911 "sql_yacc.yy"
    {}
    break;

  case 1986:

/* Line 1806 of yacc.c  */
#line 11912 "sql_yacc.yy"
    {}
    break;

  case 1987:

/* Line 1806 of yacc.c  */
#line 11913 "sql_yacc.yy"
    {}
    break;

  case 1988:

/* Line 1806 of yacc.c  */
#line 11914 "sql_yacc.yy"
    {}
    break;

  case 1989:

/* Line 1806 of yacc.c  */
#line 11915 "sql_yacc.yy"
    {}
    break;

  case 1990:

/* Line 1806 of yacc.c  */
#line 11916 "sql_yacc.yy"
    {}
    break;

  case 1991:

/* Line 1806 of yacc.c  */
#line 11917 "sql_yacc.yy"
    {}
    break;

  case 1992:

/* Line 1806 of yacc.c  */
#line 11918 "sql_yacc.yy"
    {}
    break;

  case 1993:

/* Line 1806 of yacc.c  */
#line 11919 "sql_yacc.yy"
    {}
    break;

  case 1994:

/* Line 1806 of yacc.c  */
#line 11920 "sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1806 of yacc.c  */
#line 11921 "sql_yacc.yy"
    {}
    break;

  case 1996:

/* Line 1806 of yacc.c  */
#line 11922 "sql_yacc.yy"
    {}
    break;

  case 1997:

/* Line 1806 of yacc.c  */
#line 11923 "sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1806 of yacc.c  */
#line 11924 "sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1806 of yacc.c  */
#line 11925 "sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1806 of yacc.c  */
#line 11926 "sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1806 of yacc.c  */
#line 11927 "sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1806 of yacc.c  */
#line 11928 "sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1806 of yacc.c  */
#line 11929 "sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1806 of yacc.c  */
#line 11930 "sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1806 of yacc.c  */
#line 11931 "sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1806 of yacc.c  */
#line 11932 "sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1806 of yacc.c  */
#line 11933 "sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1806 of yacc.c  */
#line 11934 "sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1806 of yacc.c  */
#line 11935 "sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1806 of yacc.c  */
#line 11936 "sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1806 of yacc.c  */
#line 11937 "sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1806 of yacc.c  */
#line 11938 "sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1806 of yacc.c  */
#line 11939 "sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1806 of yacc.c  */
#line 11940 "sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1806 of yacc.c  */
#line 11941 "sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1806 of yacc.c  */
#line 11942 "sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1806 of yacc.c  */
#line 11943 "sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1806 of yacc.c  */
#line 11944 "sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1806 of yacc.c  */
#line 11945 "sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1806 of yacc.c  */
#line 11946 "sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1806 of yacc.c  */
#line 11947 "sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1806 of yacc.c  */
#line 11948 "sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1806 of yacc.c  */
#line 11949 "sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1806 of yacc.c  */
#line 11950 "sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1806 of yacc.c  */
#line 11951 "sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1806 of yacc.c  */
#line 11952 "sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1806 of yacc.c  */
#line 11953 "sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1806 of yacc.c  */
#line 11954 "sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1806 of yacc.c  */
#line 11955 "sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1806 of yacc.c  */
#line 11956 "sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1806 of yacc.c  */
#line 11957 "sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1806 of yacc.c  */
#line 11958 "sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1806 of yacc.c  */
#line 11959 "sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1806 of yacc.c  */
#line 11960 "sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1806 of yacc.c  */
#line 11961 "sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1806 of yacc.c  */
#line 11962 "sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1806 of yacc.c  */
#line 11963 "sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1806 of yacc.c  */
#line 11964 "sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1806 of yacc.c  */
#line 11965 "sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1806 of yacc.c  */
#line 11966 "sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1806 of yacc.c  */
#line 11967 "sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1806 of yacc.c  */
#line 11968 "sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1806 of yacc.c  */
#line 11969 "sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1806 of yacc.c  */
#line 11970 "sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1806 of yacc.c  */
#line 11971 "sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1806 of yacc.c  */
#line 11972 "sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1806 of yacc.c  */
#line 11973 "sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1806 of yacc.c  */
#line 11974 "sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1806 of yacc.c  */
#line 11975 "sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1806 of yacc.c  */
#line 11976 "sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1806 of yacc.c  */
#line 11977 "sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1806 of yacc.c  */
#line 11978 "sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1806 of yacc.c  */
#line 11979 "sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1806 of yacc.c  */
#line 11980 "sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1806 of yacc.c  */
#line 11981 "sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1806 of yacc.c  */
#line 11982 "sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1806 of yacc.c  */
#line 11983 "sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1806 of yacc.c  */
#line 11984 "sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1806 of yacc.c  */
#line 11985 "sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1806 of yacc.c  */
#line 11986 "sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1806 of yacc.c  */
#line 11987 "sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1806 of yacc.c  */
#line 11988 "sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1806 of yacc.c  */
#line 11989 "sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1806 of yacc.c  */
#line 11990 "sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1806 of yacc.c  */
#line 11991 "sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1806 of yacc.c  */
#line 11992 "sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1806 of yacc.c  */
#line 11993 "sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1806 of yacc.c  */
#line 11994 "sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1806 of yacc.c  */
#line 11995 "sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1806 of yacc.c  */
#line 11996 "sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1806 of yacc.c  */
#line 11997 "sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1806 of yacc.c  */
#line 11998 "sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1806 of yacc.c  */
#line 11999 "sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1806 of yacc.c  */
#line 12000 "sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1806 of yacc.c  */
#line 12001 "sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1806 of yacc.c  */
#line 12002 "sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1806 of yacc.c  */
#line 12003 "sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1806 of yacc.c  */
#line 12004 "sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1806 of yacc.c  */
#line 12005 "sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1806 of yacc.c  */
#line 12006 "sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1806 of yacc.c  */
#line 12007 "sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1806 of yacc.c  */
#line 12008 "sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1806 of yacc.c  */
#line 12009 "sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1806 of yacc.c  */
#line 12010 "sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1806 of yacc.c  */
#line 12011 "sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1806 of yacc.c  */
#line 12012 "sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1806 of yacc.c  */
#line 12013 "sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1806 of yacc.c  */
#line 12014 "sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1806 of yacc.c  */
#line 12015 "sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1806 of yacc.c  */
#line 12016 "sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1806 of yacc.c  */
#line 12017 "sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1806 of yacc.c  */
#line 12018 "sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1806 of yacc.c  */
#line 12019 "sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1806 of yacc.c  */
#line 12020 "sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1806 of yacc.c  */
#line 12021 "sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1806 of yacc.c  */
#line 12022 "sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1806 of yacc.c  */
#line 12023 "sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1806 of yacc.c  */
#line 12024 "sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1806 of yacc.c  */
#line 12025 "sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1806 of yacc.c  */
#line 12026 "sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1806 of yacc.c  */
#line 12027 "sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1806 of yacc.c  */
#line 12028 "sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1806 of yacc.c  */
#line 12029 "sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1806 of yacc.c  */
#line 12030 "sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1806 of yacc.c  */
#line 12031 "sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1806 of yacc.c  */
#line 12032 "sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1806 of yacc.c  */
#line 12033 "sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1806 of yacc.c  */
#line 12034 "sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1806 of yacc.c  */
#line 12035 "sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1806 of yacc.c  */
#line 12036 "sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1806 of yacc.c  */
#line 12037 "sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1806 of yacc.c  */
#line 12038 "sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1806 of yacc.c  */
#line 12039 "sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1806 of yacc.c  */
#line 12040 "sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1806 of yacc.c  */
#line 12041 "sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1806 of yacc.c  */
#line 12042 "sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1806 of yacc.c  */
#line 12043 "sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1806 of yacc.c  */
#line 12044 "sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1806 of yacc.c  */
#line 12045 "sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1806 of yacc.c  */
#line 12046 "sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1806 of yacc.c  */
#line 12047 "sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1806 of yacc.c  */
#line 12048 "sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1806 of yacc.c  */
#line 12049 "sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1806 of yacc.c  */
#line 12050 "sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1806 of yacc.c  */
#line 12051 "sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1806 of yacc.c  */
#line 12052 "sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1806 of yacc.c  */
#line 12053 "sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1806 of yacc.c  */
#line 12054 "sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1806 of yacc.c  */
#line 12061 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
          }
    break;

  case 2130:

/* Line 1806 of yacc.c  */
#line 12071 "sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1806 of yacc.c  */
#line 12075 "sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1806 of yacc.c  */
#line 12076 "sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1806 of yacc.c  */
#line 12085 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              /*
                If we are in SP we want have own LEX for each assignment.
                This is mostly because it is hard for several sp_instr_set
                and sp_instr_set_trigger instructions share one LEX.
                (Well, it is theoretically possible but adds some extra
                overhead on preparation for execution stage and IMO less
                robust).

                QQ: May be we should simply prohibit group assignments in SP?
              */
              lex->sphead->reset_lex(thd);
              lex= thd->lex;

              /* Set new LEX as if we at start of set rule. */
              lex->sql_command= SQLCOM_SET_OPTION;
              mysql_init_select(lex);
              lex->option_type=OPT_SESSION;
              lex->var_list.empty();
              lex->one_shot_set= 0;
              lex->autocommit= 0;
              lex->sphead->m_tmp_query= lip->get_tok_start();
            }
          }
    break;

  case 2136:

/* Line 1806 of yacc.c  */
#line 12116 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              sp_head *sp= lex->sphead;

              if (!lex->var_list.is_empty())
              {
                /*
                  We have assignment to user or system variable or
                  option setting, so we should construct sp_instr_stmt
                  for it.
                */
                LEX_STRING qbuff;
                sp_instr_stmt *i;

                if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                           lex)))
                  MYSQL_YYABORT;

                /*
                  Extract the query statement from the tokenizer.  The
                  end is either lip->ptr, if there was no lookahead,
                  lip->tok_end otherwise.
                */
                if (yychar == YYEMPTY)
                  qbuff.length= lip->get_ptr() - sp->m_tmp_query;
                else
                  qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

                if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                                    qbuff.length + 5)))
                  MYSQL_YYABORT;

                strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
                        qbuff.length);
                qbuff.length+= 4;
                i->m_query= qbuff;
                if (sp->add_instr(i))
                  MYSQL_YYABORT;
              }
              if (lex->sphead->restore_lex(thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2137:

/* Line 1806 of yacc.c  */
#line 12167 "sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1806 of yacc.c  */
#line 12168 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2139:

/* Line 1806 of yacc.c  */
#line 12169 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2140:

/* Line 1806 of yacc.c  */
#line 12170 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2141:

/* Line 1806 of yacc.c  */
#line 12174 "sql_yacc.yy"
    { (yyval.num)= OPT_DEFAULT; }
    break;

  case 2142:

/* Line 1806 of yacc.c  */
#line 12175 "sql_yacc.yy"
    { Lex->one_shot_set= 1; (yyval.num)= OPT_SESSION; }
    break;

  case 2143:

/* Line 1806 of yacc.c  */
#line 12179 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2144:

/* Line 1806 of yacc.c  */
#line 12180 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2145:

/* Line 1806 of yacc.c  */
#line 12181 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2146:

/* Line 1806 of yacc.c  */
#line 12182 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2147:

/* Line 1806 of yacc.c  */
#line 12186 "sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2148:

/* Line 1806 of yacc.c  */
#line 12187 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2149:

/* Line 1806 of yacc.c  */
#line 12188 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2150:

/* Line 1806 of yacc.c  */
#line 12189 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2153:

/* Line 1806 of yacc.c  */
#line 12199 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            LEX_STRING *name= &(yyvsp[(2) - (4)].variable).base_name;

            if ((yyvsp[(2) - (4)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              if (set_trigger_new_row(YYTHD, name, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(2) - (4)].variable).var)
            {
              if ((yyvsp[(1) - (4)].var_type))
                lex->option_type= (yyvsp[(1) - (4)].var_type);

              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(2) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable_t *spv= spc->find_variable(name);

              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2154:

/* Line 1806 of yacc.c  */
#line 12241 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            lex->option_type= (yyvsp[(1) - (5)].var_type);
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(5) - (5)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2155:

/* Line 1806 of yacc.c  */
#line 12260 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2156:

/* Line 1806 of yacc.c  */
#line 12271 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2157:

/* Line 1806 of yacc.c  */
#line 12284 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2158:

/* Line 1806 of yacc.c  */
#line 12298 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2159:

/* Line 1806 of yacc.c  */
#line 12313 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2160:

/* Line 1806 of yacc.c  */
#line 12332 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            if (thd->security_ctx->uses_role)
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "CHANGE PASSWORD for mapped users");
              MYSQL_YYABORT;
            }
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->priv_user;
            user->role.str= NULL; user->role.length= 0;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2161:

/* Line 1806 of yacc.c  */
#line 12366 "sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2162:

/* Line 1806 of yacc.c  */
#line 12376 "sql_yacc.yy"
    {
#ifdef HAVE_REPLICATION
            Lex->var_list.push_back(new set_var_failover((yyvsp[(3) - (3)].ulong_num)));
#else
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#endif
          }
    break;

  case 2163:

/* Line 1806 of yacc.c  */
#line 12386 "sql_yacc.yy"
    {
            Lex->var_list.push_back(new set_var_group_id((yyvsp[(3) - (8)].ulonglong_number), (yyvsp[(7) - (8)].ulong_num), (yyvsp[(8) - (8)].num)));
          }
    break;

  case 2164:

/* Line 1806 of yacc.c  */
#line 12392 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2165:

/* Line 1806 of yacc.c  */
#line 12393 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2166:

/* Line 1806 of yacc.c  */
#line 12397 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable_t *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2167:

/* Line 1806 of yacc.c  */
#line 12424 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2168:

/* Line 1806 of yacc.c  */
#line 12467 "sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2169:

/* Line 1806 of yacc.c  */
#line 12480 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2170:

/* Line 1806 of yacc.c  */
#line 12481 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2171:

/* Line 1806 of yacc.c  */
#line 12482 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2172:

/* Line 1806 of yacc.c  */
#line 12483 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2173:

/* Line 1806 of yacc.c  */
#line 12487 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2174:

/* Line 1806 of yacc.c  */
#line 12489 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
              Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2175:

/* Line 1806 of yacc.c  */
#line 12498 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2176:

/* Line 1806 of yacc.c  */
#line 12509 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2177:

/* Line 1806 of yacc.c  */
#line 12510 "sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2178:

/* Line 1806 of yacc.c  */
#line 12512 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2179:

/* Line 1806 of yacc.c  */
#line 12518 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2180:

/* Line 1806 of yacc.c  */
#line 12524 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2181:

/* Line 1806 of yacc.c  */
#line 12535 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2182:

/* Line 1806 of yacc.c  */
#line 12546 "sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1806 of yacc.c  */
#line 12561 "sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type))
              MYSQL_YYABORT;
            /* If table is to be write locked, protect from a impending GRL. */
            if (lock_type >= TL_WRITE_ALLOW_WRITE)
              Lex->protect_against_global_read_lock= TRUE;
          }
    break;

  case 2188:

/* Line 1806 of yacc.c  */
#line 12572 "sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2189:

/* Line 1806 of yacc.c  */
#line 12573 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2190:

/* Line 1806 of yacc.c  */
#line 12574 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2191:

/* Line 1806 of yacc.c  */
#line 12575 "sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2192:

/* Line 1806 of yacc.c  */
#line 12580 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2193:

/* Line 1806 of yacc.c  */
#line 12591 "sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1806 of yacc.c  */
#line 12600 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2195:

/* Line 1806 of yacc.c  */
#line 12612 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2196:

/* Line 1806 of yacc.c  */
#line 12624 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2197:

/* Line 1806 of yacc.c  */
#line 12643 "sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
          }
    break;

  case 2198:

/* Line 1806 of yacc.c  */
#line 12649 "sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2199:

/* Line 1806 of yacc.c  */
#line 12650 "sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2200:

/* Line 1806 of yacc.c  */
#line 12654 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2201:

/* Line 1806 of yacc.c  */
#line 12655 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2202:

/* Line 1806 of yacc.c  */
#line 12659 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2203:

/* Line 1806 of yacc.c  */
#line 12660 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2204:

/* Line 1806 of yacc.c  */
#line 12661 "sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2205:

/* Line 1806 of yacc.c  */
#line 12662 "sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2206:

/* Line 1806 of yacc.c  */
#line 12664 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2207:

/* Line 1806 of yacc.c  */
#line 12672 "sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1806 of yacc.c  */
#line 12676 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2209:

/* Line 1806 of yacc.c  */
#line 12677 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2210:

/* Line 1806 of yacc.c  */
#line 12678 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2211:

/* Line 1806 of yacc.c  */
#line 12679 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2212:

/* Line 1806 of yacc.c  */
#line 12680 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2213:

/* Line 1806 of yacc.c  */
#line 12687 "sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1806 of yacc.c  */
#line 12692 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2215:

/* Line 1806 of yacc.c  */
#line 12698 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2216:

/* Line 1806 of yacc.c  */
#line 12709 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2217:

/* Line 1806 of yacc.c  */
#line 12720 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2218:

/* Line 1806 of yacc.c  */
#line 12727 "sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1806 of yacc.c  */
#line 12733 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2220:

/* Line 1806 of yacc.c  */
#line 12740 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2221:

/* Line 1806 of yacc.c  */
#line 12752 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2224:

/* Line 1806 of yacc.c  */
#line 12770 "sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1806 of yacc.c  */
#line 12772 "sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2230:

/* Line 1806 of yacc.c  */
#line 12790 "sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2231:

/* Line 1806 of yacc.c  */
#line 12791 "sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1806 of yacc.c  */
#line 12793 "sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2233:

/* Line 1806 of yacc.c  */
#line 12794 "sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1806 of yacc.c  */
#line 12796 "sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2235:

/* Line 1806 of yacc.c  */
#line 12797 "sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1806 of yacc.c  */
#line 12799 "sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2237:

/* Line 1806 of yacc.c  */
#line 12800 "sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1806 of yacc.c  */
#line 12801 "sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2239:

/* Line 1806 of yacc.c  */
#line 12802 "sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1806 of yacc.c  */
#line 12803 "sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2241:

/* Line 1806 of yacc.c  */
#line 12804 "sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2242:

/* Line 1806 of yacc.c  */
#line 12805 "sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2243:

/* Line 1806 of yacc.c  */
#line 12806 "sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2244:

/* Line 1806 of yacc.c  */
#line 12807 "sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2245:

/* Line 1806 of yacc.c  */
#line 12808 "sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2246:

/* Line 1806 of yacc.c  */
#line 12809 "sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2247:

/* Line 1806 of yacc.c  */
#line 12810 "sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2248:

/* Line 1806 of yacc.c  */
#line 12811 "sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2249:

/* Line 1806 of yacc.c  */
#line 12812 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2250:

/* Line 1806 of yacc.c  */
#line 12813 "sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2251:

/* Line 1806 of yacc.c  */
#line 12814 "sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2252:

/* Line 1806 of yacc.c  */
#line 12815 "sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2253:

/* Line 1806 of yacc.c  */
#line 12816 "sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2254:

/* Line 1806 of yacc.c  */
#line 12817 "sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2255:

/* Line 1806 of yacc.c  */
#line 12818 "sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2256:

/* Line 1806 of yacc.c  */
#line 12819 "sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2257:

/* Line 1806 of yacc.c  */
#line 12820 "sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2258:

/* Line 1806 of yacc.c  */
#line 12821 "sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2259:

/* Line 1806 of yacc.c  */
#line 12822 "sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2260:

/* Line 1806 of yacc.c  */
#line 12823 "sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2261:

/* Line 1806 of yacc.c  */
#line 12824 "sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2262:

/* Line 1806 of yacc.c  */
#line 12825 "sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2263:

/* Line 1806 of yacc.c  */
#line 12829 "sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1806 of yacc.c  */
#line 12830 "sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1806 of yacc.c  */
#line 12840 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2268:

/* Line 1806 of yacc.c  */
#line 12850 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2269:

/* Line 1806 of yacc.c  */
#line 12860 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2270:

/* Line 1806 of yacc.c  */
#line 12873 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2271:

/* Line 1806 of yacc.c  */
#line 12888 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2272:

/* Line 1806 of yacc.c  */
#line 12901 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2273:

/* Line 1806 of yacc.c  */
#line 12914 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2274:

/* Line 1806 of yacc.c  */
#line 12926 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2275:

/* Line 1806 of yacc.c  */
#line 12931 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2276:

/* Line 1806 of yacc.c  */
#line 12939 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2277:

/* Line 1806 of yacc.c  */
#line 12944 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2278:

/* Line 1806 of yacc.c  */
#line 12952 "sql_yacc.yy"
    {
            (yyvsp[(1) - (2)].lex_user)->role= (yyvsp[(2) - (2)].lex_str);
            if (Lex->users_list.push_back((yyvsp[(1) - (2)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2279:

/* Line 1806 of yacc.c  */
#line 12958 "sql_yacc.yy"
    {
            (yyvsp[(3) - (4)].lex_user)->role= (yyvsp[(4) - (4)].lex_str);
            if (Lex->users_list.push_back((yyvsp[(3) - (4)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2280:

/* Line 1806 of yacc.c  */
#line 12967 "sql_yacc.yy"
    {
            (yyval.lex_str).str= NULL; (yyval.lex_str).length= 0;
          }
    break;

  case 2281:

/* Line 1806 of yacc.c  */
#line 12971 "sql_yacc.yy"
    {
            if (!Lex->mapped_user)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "CREATE USER", "ROLE");
              MYSQL_YYABORT;
            }
            else if (check_string_char_length(&(yyvsp[(2) - (2)].lex_str), ER(ER_USERNAME),
                                              USERNAME_CHAR_LENGTH,
                                              system_charset_info, 0))
              MYSQL_YYABORT;
            (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2282:

/* Line 1806 of yacc.c  */
#line 12987 "sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2283:

/* Line 1806 of yacc.c  */
#line 13014 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); }
    break;

  case 2284:

/* Line 1806 of yacc.c  */
#line 13016 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2285:

/* Line 1806 of yacc.c  */
#line 13021 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2289:

/* Line 1806 of yacc.c  */
#line 13035 "sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2291:

/* Line 1806 of yacc.c  */
#line 13064 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2292:

/* Line 1806 of yacc.c  */
#line 13068 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2293:

/* Line 1806 of yacc.c  */
#line 13072 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2294:

/* Line 1806 of yacc.c  */
#line 13076 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2295:

/* Line 1806 of yacc.c  */
#line 13082 "sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1806 of yacc.c  */
#line 13087 "sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1806 of yacc.c  */
#line 13088 "sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1806 of yacc.c  */
#line 13092 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2300:

/* Line 1806 of yacc.c  */
#line 13094 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2301:

/* Line 1806 of yacc.c  */
#line 13100 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2302:

/* Line 1806 of yacc.c  */
#line 13106 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2303:

/* Line 1806 of yacc.c  */
#line 13112 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2304:

/* Line 1806 of yacc.c  */
#line 13121 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2305:

/* Line 1806 of yacc.c  */
#line 13126 "sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1806 of yacc.c  */
#line 13130 "sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1806 of yacc.c  */
#line 13131 "sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1806 of yacc.c  */
#line 13136 "sql_yacc.yy"
    { (yyval.num)= (YYTHD->variables.completion_type == 1); }
    break;

  case 2309:

/* Line 1806 of yacc.c  */
#line 13137 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2310:

/* Line 1806 of yacc.c  */
#line 13138 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2311:

/* Line 1806 of yacc.c  */
#line 13143 "sql_yacc.yy"
    { (yyval.num)= (YYTHD->variables.completion_type == 2); }
    break;

  case 2312:

/* Line 1806 of yacc.c  */
#line 13144 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2313:

/* Line 1806 of yacc.c  */
#line 13145 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2314:

/* Line 1806 of yacc.c  */
#line 13149 "sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1806 of yacc.c  */
#line 13150 "sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1806 of yacc.c  */
#line 13155 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            lex->tx_chain= (yyvsp[(3) - (4)].num); 
            lex->tx_release= (yyvsp[(4) - (4)].num);
          }
    break;

  case 2317:

/* Line 1806 of yacc.c  */
#line 13165 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            lex->tx_chain= (yyvsp[(3) - (4)].num); 
            lex->tx_release= (yyvsp[(4) - (4)].num);
          }
    break;

  case 2318:

/* Line 1806 of yacc.c  */
#line 13173 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2319:

/* Line 1806 of yacc.c  */
#line 13182 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2320:

/* Line 1806 of yacc.c  */
#line 13191 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2321:

/* Line 1806 of yacc.c  */
#line 13204 "sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1806 of yacc.c  */
#line 13210 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result && 
               (lex->result->get_nest_level() == -1 ||
                lex->result->get_nest_level() == lex->nest_level))
              {
                /* 
                   Only the last SELECT can have INTO unless the INTO and UNION
                   are at different nest levels. In version 5.1 and above, INTO
                   will onle be allowed at top level.
                */
                my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
                MYSQL_YYABORT;
              }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* This counter shouldn't be incremented for UNION parts */
            Lex->nest_level--;
            if (mysql_new_select(lex, 0))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage=UNION_TYPE;
            if ((yyvsp[(2) - (2)].num)) /* UNION DISTINCT - remember position */
              lex->current_select->master_unit()->union_distinct=
                lex->current_select;
          }
    break;

  case 2324:

/* Line 1806 of yacc.c  */
#line 13240 "sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2325:

/* Line 1806 of yacc.c  */
#line 13250 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2326:

/* Line 1806 of yacc.c  */
#line 13251 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2327:

/* Line 1806 of yacc.c  */
#line 13252 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2328:

/* Line 1806 of yacc.c  */
#line 13256 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2329:

/* Line 1806 of yacc.c  */
#line 13272 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2332:

/* Line 1806 of yacc.c  */
#line 13285 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2333:

/* Line 1806 of yacc.c  */
#line 13286 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2334:

/* Line 1806 of yacc.c  */
#line 13287 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2335:

/* Line 1806 of yacc.c  */
#line 13291 "sql_yacc.yy"
    {
          (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
        }
    break;

  case 2336:

/* Line 1806 of yacc.c  */
#line 13298 "sql_yacc.yy"
    {
          (yyval.select_lex)= (yyvsp[(4) - (5)].select_lex);
        }
    break;

  case 2337:

/* Line 1806 of yacc.c  */
#line 13303 "sql_yacc.yy"
    {
          (yyval.select_lex)= (yyvsp[(4) - (6)].select_lex);
        }
    break;

  case 2338:

/* Line 1806 of yacc.c  */
#line 13308 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }

            if (!opt_allow_subqueries)
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                       "--skip-allow-subqueries");
              MYSQL_YYABORT;
            }

            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2339:

/* Line 1806 of yacc.c  */
#line 13337 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            /*
              Set the required lock level for the tables associated with the
              current sub-select. This will overwrite previous lock options set
              using st_select_lex::add_table_to_list in any of the following
              rules: single_multi, table_wild_one, load_data, table_alias_ref,
              table_factor.
              The default lock level is TL_READ_DEFAULT but it can be modified
              with query options specific for a certain (sub-)SELECT.
            */
            lex->current_select->
              set_lock_for_tables(lex->current_select->lock_option);

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2340:

/* Line 1806 of yacc.c  */
#line 13373 "sql_yacc.yy"
    {}
    break;

  case 2341:

/* Line 1806 of yacc.c  */
#line 13375 "sql_yacc.yy"
    {}
    break;

  case 2342:

/* Line 1806 of yacc.c  */
#line 13377 "sql_yacc.yy"
    {}
    break;

  case 2356:

/* Line 1806 of yacc.c  */
#line 13410 "sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2357:

/* Line 1806 of yacc.c  */
#line 13424 "sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2358:

/* Line 1806 of yacc.c  */
#line 13437 "sql_yacc.yy"
    {}
    break;

  case 2359:

/* Line 1806 of yacc.c  */
#line 13439 "sql_yacc.yy"
    {}
    break;

  case 2360:

/* Line 1806 of yacc.c  */
#line 13441 "sql_yacc.yy"
    {}
    break;

  case 2361:

/* Line 1806 of yacc.c  */
#line 13446 "sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2362:

/* Line 1806 of yacc.c  */
#line 13451 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2363:

/* Line 1806 of yacc.c  */
#line 13453 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2364:

/* Line 1806 of yacc.c  */
#line 13455 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2365:

/* Line 1806 of yacc.c  */
#line 13460 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2366:

/* Line 1806 of yacc.c  */
#line 13462 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2367:

/* Line 1806 of yacc.c  */
#line 13464 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2368:

/* Line 1806 of yacc.c  */
#line 13469 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            if (!opt_allow_views)
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                       "--skip-allow-views");
              MYSQL_YYABORT;
            }
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 2370:

/* Line 1806 of yacc.c  */
#line 13488 "sql_yacc.yy"
    {}
    break;

  case 2372:

/* Line 1806 of yacc.c  */
#line 13494 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2373:

/* Line 1806 of yacc.c  */
#line 13499 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2374:

/* Line 1806 of yacc.c  */
#line 13506 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2375:

/* Line 1806 of yacc.c  */
#line 13515 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2378:

/* Line 1806 of yacc.c  */
#line 13537 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2379:

/* Line 1806 of yacc.c  */
#line 13539 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2380:

/* Line 1806 of yacc.c  */
#line 13541 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2381:

/* Line 1806 of yacc.c  */
#line 13543 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2382:

/* Line 1806 of yacc.c  */
#line 13560 "sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2383:

/* Line 1806 of yacc.c  */
#line 13566 "sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2384:

/* Line 1806 of yacc.c  */
#line 13571 "sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (!opt_allow_triggers)
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                       "--skip-allow-triggers");
              MYSQL_YYABORT;
            }

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2385:

/* Line 1806 of yacc.c  */
#line 13608 "sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE))
              MYSQL_YYABORT;
          }
    break;

  case 2386:

/* Line 1806 of yacc.c  */
#line 13641 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2387:

/* Line 1806 of yacc.c  */
#line 13659 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2388:

/* Line 1806 of yacc.c  */
#line 13682 "sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (!opt_allow_stored_procedures)
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                       "--skip-allow-stored-procedures");
              MYSQL_YYABORT;
            }

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2389:

/* Line 1806 of yacc.c  */
#line 13721 "sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2390:

/* Line 1806 of yacc.c  */
#line 13725 "sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2391:

/* Line 1806 of yacc.c  */
#line 13733 "sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2392:

/* Line 1806 of yacc.c  */
#line 13756 "sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2393:

/* Line 1806 of yacc.c  */
#line 13765 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2394:

/* Line 1806 of yacc.c  */
#line 13821 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (!opt_allow_stored_procedures)
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                       "--skip-allow-stored-procedures");
              MYSQL_YYABORT;
            }

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2395:

/* Line 1806 of yacc.c  */
#line 13852 "sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2396:

/* Line 1806 of yacc.c  */
#line 13861 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2397:

/* Line 1806 of yacc.c  */
#line 13869 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2398:

/* Line 1806 of yacc.c  */
#line 13877 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2399:

/* Line 1806 of yacc.c  */
#line 13891 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
            if (!opt_allow_xa)
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0), "--allow-xa=0");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2400:

/* Line 1806 of yacc.c  */
#line 13900 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2401:

/* Line 1806 of yacc.c  */
#line 13904 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2402:

/* Line 1806 of yacc.c  */
#line 13908 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2403:

/* Line 1806 of yacc.c  */
#line 13912 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2404:

/* Line 1806 of yacc.c  */
#line 13916 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2405:

/* Line 1806 of yacc.c  */
#line 13923 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2406:

/* Line 1806 of yacc.c  */
#line 13930 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2407:

/* Line 1806 of yacc.c  */
#line 13937 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2408:

/* Line 1806 of yacc.c  */
#line 13946 "sql_yacc.yy"
    {}
    break;

  case 2409:

/* Line 1806 of yacc.c  */
#line 13947 "sql_yacc.yy"
    {}
    break;

  case 2410:

/* Line 1806 of yacc.c  */
#line 13951 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2411:

/* Line 1806 of yacc.c  */
#line 13952 "sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2412:

/* Line 1806 of yacc.c  */
#line 13953 "sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2413:

/* Line 1806 of yacc.c  */
#line 13957 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2414:

/* Line 1806 of yacc.c  */
#line 13958 "sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2415:

/* Line 1806 of yacc.c  */
#line 13963 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2416:

/* Line 1806 of yacc.c  */
#line 13965 "sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2418:

/* Line 1806 of yacc.c  */
#line 13970 "sql_yacc.yy"
    {}
    break;

  case 2419:

/* Line 1806 of yacc.c  */
#line 13971 "sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2420:

/* Line 1806 of yacc.c  */
#line 13976 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2421:

/* Line 1806 of yacc.c  */
#line 13986 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;



/* Line 1806 of yacc.c  */
#line 37006 "sql_yacc.cc"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



